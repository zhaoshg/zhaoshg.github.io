<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>曙光博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.javacn.top/"/>
  <updated>2019-05-01T03:41:57.737Z</updated>
  <id>http://blog.javacn.top/</id>
  
  <author>
    <name>赵曙光</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Springboot 防XSS攻击的处理</title>
    <link href="http://blog.javacn.top/post/8c91cf7f.html"/>
    <id>http://blog.javacn.top/post/8c91cf7f.html</id>
    <published>2019-04-20T13:42:02.000Z</published>
    <updated>2019-05-01T03:41:57.737Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springboot-防XSS攻击的处理"><a href="#Springboot-防XSS攻击的处理" class="headerlink" title="Springboot 防XSS攻击的处理"></a>Springboot 防XSS攻击的处理</h1><p>XSS攻击大家可能都知道是什么。</p><p>防xss攻击有2种方式，一种是输入过滤，一种是输出过滤。<br>输入过滤有个好处，是可以顺便防SQL注入，但有个坏处，就是数据库被人手动加了个攻击脚本之类的，则会导致xss问题。而且我们大家基本会用一些开源的ORM框架，比如mybatis，都是预编译模式，它也会帮你挡住一些sql注入问题。</p><p>一般情况，我们会对输入做过滤，这样保存到数据库，再显示到页面的时候，连输出过滤都不用做了。</p><p>而输出过滤，比输入过滤更简单，就是把所有要显示的东西，都过滤一遍，这样页面上就不会出现各种各样的问题了。</p><p>对于输入过滤，一般有两种请求要过滤，一种是@RequestParam接收参数方式，一种是@RequestBody接收参数方式。这两种是有区别的，@RequestParam比较好处理，因为我们直接写一个类继承HttpServletRequestWrapper即可，通过重载来处理参数。</p><p>@RequestBody就不太好处理了，因为它是流的形式。 不过，我们的项目用的是json的形式进行参数传递，那我们能不能在用Json解析器的时候，来统一处理呢？答案是肯定的。</p><p>那下面分别说一下这两种方式的处理步骤。</p><p>最后还会讲一下@JsonSerialize这个注解的用法，因为我项目中，会有一些特殊字段不需要过滤XSS攻击脚本，所以，我会用这个注解来处理这个问题。</p><a id="more"></a><h2 id="一、-RequestParam接收参数处理方式"><a href="#一、-RequestParam接收参数处理方式" class="headerlink" title="一、 @RequestParam接收参数处理方式"></a>一、 @RequestParam接收参数处理方式</h2><h3 id="1、定义XssHttpServletRequestWrapper"><a href="#1、定义XssHttpServletRequestWrapper" class="headerlink" title="1、定义XssHttpServletRequestWrapper"></a>1、定义XssHttpServletRequestWrapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.util.HtmlUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XssHttpServletRequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 描述 : 构造函数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> *            请求对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">XssHttpServletRequestWrapper</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(request);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHeader</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">String value = <span class="keyword">super</span>.getHeader(name);</span><br><span class="line"><span class="keyword">return</span> HtmlUtils.htmlEscape(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">String value = <span class="keyword">super</span>.getParameter(name);</span><br><span class="line"><span class="keyword">return</span> HtmlUtils.htmlEscape(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line">String[] values = <span class="keyword">super</span>.getParameterValues(name);</span><br><span class="line"><span class="keyword">if</span> (values != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> length = values.length;</span><br><span class="line">String[] escapseValues = <span class="keyword">new</span> String[length];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">escapseValues[i] = HtmlUtils.htmlEscape(values[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> escapseValues;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.getParameterValues(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、定义Filter"><a href="#2、定义Filter" class="headerlink" title="2、定义Filter"></a>2、定义Filter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XssFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">log.debug(<span class="string">"(XssFilter) initialize"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">XssHttpServletRequestWrapper xssRequest = <span class="keyword">new</span> XssHttpServletRequestWrapper((HttpServletRequest) request);</span><br><span class="line">chain.doFilter(xssRequest, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">log.debug(<span class="string">"(XssFilter) destroy"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、注册filter"><a href="#3、注册filter" class="headerlink" title="3、注册filter"></a>3、注册filter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonGenerator;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializerProvider;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.<span class="keyword">module</span>.SimpleModule;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomFilterConfiguration</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">xssFilterRegistration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean registration = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        registration.setFilter(<span class="keyword">new</span> XssFilter());</span><br><span class="line">        registration.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">        <span class="comment">// registration.addInitParameter("paramName", "paramValue");</span></span><br><span class="line">        registration.setName(<span class="string">"xssFilter"</span>);</span><br><span class="line">        registration.setOrder(<span class="number">11</span>);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、-RequestBody接收参数处理方式"><a href="#二、-RequestBody接收参数处理方式" class="headerlink" title="二、@RequestBody接收参数处理方式"></a>二、@RequestBody接收参数处理方式</h2><h3 id="1、-定义解析器"><a href="#1、-定义解析器" class="headerlink" title="1、 定义解析器"></a>1、 定义解析器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonParser;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationContext;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonDeserializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.util.HtmlUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 反序列化json时对xss过滤 ，主要是用来防止sql注入。但是目前我们使用mybatis，而且模型还有公式不能过滤，所以这个可以不用。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @Author: zhaoshuguang 10:46 2019-05-01</span></span><br><span class="line"><span class="comment"> * @modify  zhaoshuguang 10:46 2019-05-01</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XssStringJsonDeserializer</span> <span class="keyword">extends</span> <span class="title">JsonDeserializer</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deserialize</span><span class="params">(JsonParser p, DeserializationContext ctxt)</span> <span class="keyword">throws</span> IOException, JsonProcessingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String source = p.getText();</span><br><span class="line">        <span class="comment">// 把字符串做XSS过滤</span></span><br><span class="line">        String encodeStr = HtmlUtils.htmlEscape(source);</span><br><span class="line">        <span class="keyword">return</span> encodeStr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、-创建XssObjectMapper的bean-替换spring-boot原有的实例-用于整个系统的json转换"><a href="#2、-创建XssObjectMapper的bean-替换spring-boot原有的实例-用于整个系统的json转换" class="headerlink" title="2、 创建XssObjectMapper的bean,替换spring boot原有的实例,用于整个系统的json转换."></a>2、 创建XssObjectMapper的bean,替换spring boot原有的实例,用于整个系统的json转换.</h3><p>修改一下上面的 CustomFilterConfiguration 文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.common.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Primary;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonGenerator;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializerProvider;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.<span class="keyword">module</span>.SimpleModule;</span><br><span class="line"><span class="keyword">import</span> com.test.common.filter.XssFilter;</span><br><span class="line"><span class="keyword">import</span> com.test.common.filter.wrapper.XssStringJsonDeSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomFilterConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 是否过滤空串 **/</span></span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"$&#123;json.remove.null.value.enable:false&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> enableRemoveNullValue;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">xssFilterRegistration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FilterRegistrationBean registration = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">        registration.setFilter(<span class="keyword">new</span> XssFilter());</span><br><span class="line">        registration.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">        <span class="comment">// registration.addInitParameter("paramName", "paramValue");</span></span><br><span class="line">        registration.setName(<span class="string">"xssFilter"</span>);</span><br><span class="line">        registration.setOrder(<span class="number">11</span>);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建XssObjectMapper的bean,替换spring boot原有的实例,用于整个系统的json转换.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ObjectMapper <span class="title">xssObjectMapper</span><span class="params">(Jackson2ObjectMapperBuilder builder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 解析器</span></span><br><span class="line">        ObjectMapper objectMapper = builder.createXmlMapper(<span class="keyword">false</span>).build();</span><br><span class="line">        <span class="comment">// 注册xss解析器</span></span><br><span class="line">        SimpleModule xssModule = <span class="keyword">new</span> SimpleModule(<span class="string">"XssStringJsonSerializer"</span>);</span><br><span class="line">        xssModule.addDeserializer(String.class, <span class="keyword">new</span> XssStringJsonDeserializer());</span><br><span class="line">        objectMapper.registerModule(xssModule);</span><br><span class="line">        <span class="comment">// 返回</span></span><br><span class="line">        <span class="keyword">return</span> objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样基本上就能将前台传过来的参数中XSS攻击脚本过滤干净了。</p><p>同理我们也可以注册一个XssStringJsonSerializer，用来负责输出XSS过滤。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.util.HtmlUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonGenerator;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializerProvider;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  这个用来Json序列化时过滤XSS， 在controller返回json串时使用。</span></span><br><span class="line"><span class="comment"> *  如果有需要特殊处理的属性，不用过滤，那就在相应的属性或者类上使用"<span class="doctag">@JsonDeserialize</span>(using = NoneXssStringJsonSerializer.class)"即可。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XssStringJsonSerializer</span> <span class="keyword">extends</span> <span class="title">JsonSerializer</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Class&lt;String&gt; <span class="title">handledType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> String.class;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(String value, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//注释到后端返回给前端特殊符合编码</span></span><br><span class="line">String encodedValue = HtmlUtils.htmlEscape(value);</span><br><span class="line">jsonGenerator.writeString(encodedValue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、-例外情况"><a href="#三、-例外情况" class="headerlink" title="三、 例外情况"></a>三、 例外情况</h2><p>如果，我有个controller传过来的参数用的是@requestBody方式，并且，其中有个字段，我不想过滤，我就想用带有特殊符号的怎么办？ </p><p>或者，我用了全局的XssStringJsonSerializer，在controller返回json串的时候，就做了XSS过滤，但是有些特定的属性或者类，我不想过滤，我就想输出带html标签的。咋办？</p><p>难道我手动处理？那不能够吧，万一涉及的地方很多呢？万一后面还有N个这样的接口怎么办？</p><p>不着急，咱们有两个神器：@JsonSerialize 、 @JsonDeserialize </p><h3 id="JsonSerialize-的使用"><a href="#JsonSerialize-的使用" class="headerlink" title="@JsonSerialize 的使用"></a>@JsonSerialize 的使用</h3><p>此注解用于属性或者getter方法上，用于在序列化时嵌入开发者自定义的代码。比如我有个字段不需要过滤xss。</p><p>那我完全可以写一个NoneXssStringJsonSerializer.java 里面把下面这两句注释掉：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//String encodedValue = HtmlUtils.htmlEscape(value);</span></span><br><span class="line"><span class="comment">//jsonGenerator.writeString(encodedValue);</span></span><br></pre></td></tr></table></figure><p>然后，把@JsonSerialize(using=NoneXssStringJsonSerializer.class)放到那个字段的get方法上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonSerialize</span>(using=NoneXssStringJsonSerializer.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getValue</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，你还可以让这个NoneXssStringJsonSerializer干些别的事情，比如像上面说的，把Date转成Long，格式化时间啊、字符串啊，等等等等。</p><h3 id="JsonDeserialize的使用"><a href="#JsonDeserialize的使用" class="headerlink" title="@JsonDeserialize的使用"></a>@JsonDeserialize的使用</h3><p>和@JsonSerialize一样，只不过这个在反序列化时候用而已。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Springboot-防XSS攻击的处理&quot;&gt;&lt;a href=&quot;#Springboot-防XSS攻击的处理&quot; class=&quot;headerlink&quot; title=&quot;Springboot 防XSS攻击的处理&quot;&gt;&lt;/a&gt;Springboot 防XSS攻击的处理&lt;/h1&gt;&lt;p&gt;XSS攻击大家可能都知道是什么。&lt;/p&gt;
&lt;p&gt;防xss攻击有2种方式，一种是输入过滤，一种是输出过滤。&lt;br&gt;输入过滤有个好处，是可以顺便防SQL注入，但有个坏处，就是数据库被人手动加了个攻击脚本之类的，则会导致xss问题。而且我们大家基本会用一些开源的ORM框架，比如mybatis，都是预编译模式，它也会帮你挡住一些sql注入问题。&lt;/p&gt;
&lt;p&gt;一般情况，我们会对输入做过滤，这样保存到数据库，再显示到页面的时候，连输出过滤都不用做了。&lt;/p&gt;
&lt;p&gt;而输出过滤，比输入过滤更简单，就是把所有要显示的东西，都过滤一遍，这样页面上就不会出现各种各样的问题了。&lt;/p&gt;
&lt;p&gt;对于输入过滤，一般有两种请求要过滤，一种是@RequestParam接收参数方式，一种是@RequestBody接收参数方式。这两种是有区别的，@RequestParam比较好处理，因为我们直接写一个类继承HttpServletRequestWrapper即可，通过重载来处理参数。&lt;/p&gt;
&lt;p&gt;@RequestBody就不太好处理了，因为它是流的形式。 不过，我们的项目用的是json的形式进行参数传递，那我们能不能在用Json解析器的时候，来统一处理呢？答案是肯定的。&lt;/p&gt;
&lt;p&gt;那下面分别说一下这两种方式的处理步骤。&lt;/p&gt;
&lt;p&gt;最后还会讲一下@JsonSerialize这个注解的用法，因为我项目中，会有一些特殊字段不需要过滤XSS攻击脚本，所以，我会用这个注解来处理这个问题。&lt;/p&gt;
    
    </summary>
    
      <category term="springboot" scheme="http://blog.javacn.top/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://blog.javacn.top/tags/springboot/"/>
    
      <category term="xss" scheme="http://blog.javacn.top/tags/xss/"/>
    
      <category term="原创" scheme="http://blog.javacn.top/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>Mac下IDEA常用快捷键</title>
    <link href="http://blog.javacn.top/post/472262bf.html"/>
    <id>http://blog.javacn.top/post/472262bf.html</id>
    <published>2017-11-26T08:00:56.000Z</published>
    <updated>2019-04-20T11:03:11.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Mac键盘符号和修饰键说明"><a href="#Mac键盘符号和修饰键说明" class="headerlink" title="Mac键盘符号和修饰键说明"></a>Mac键盘符号和修饰键说明</h4><ul><li><code>⌘</code> Command</li><li><code>⇧</code> Shift</li><li><code>⌥</code> Option</li><li><code>⌃</code> Control</li><li><code>↩︎</code> Return/Enter</li><li><code>⌫</code> Delete</li><li><code>⌦</code> 向前删除键（Fn+Delete）</li><li><code>↑</code> 上箭头</li><li><code>↓</code> 下箭头</li><li><code>←</code> 左箭头</li><li><code>→</code> 右箭头</li><li><code>⇞</code> Page Up（Fn+↑）</li><li><code>⇟</code> Page Down（Fn+↓）</li><li><code>Home</code> Fn + ←</li><li><code>End</code> Fn + →</li><li><code>⇥</code> 右制表符（Tab键）</li><li><code>⇤</code> 左制表符（Shift+Tab）</li><li><code>⎋</code> Escape (Esc)</li></ul><a id="more"></a><h4 id="一、Editing（编辑）"><a href="#一、Editing（编辑）" class="headerlink" title="一、Editing（编辑）"></a>一、Editing（编辑）</h4><ul><li><code>⌃Space</code> 基本的代码补全（补全任何类、方法、变量）</li><li><code>⌃⇧Space</code> 智能代码补全（过滤器方法列表和变量的预期类型）</li><li><code>⌘⇧↩</code> 自动结束代码，行末自动添加分号</li><li><code>⌘P</code> 显示方法的参数信息</li><li><code>⌃J, Mid. button click</code> 快速查看文档</li><li><code>⇧F1</code> 查看外部文档（在某些代码上会触发打开浏览器显示相关文档）</li><li><code>⌘+鼠标放在代码上</code> 显示代码简要信息</li><li><code>⌘F1</code> 在错误或警告处显示具体描述信息</li><li><code>⌘N, ⌃↩, ⌃N</code> 生成代码（getter、setter、构造函数、hashCode/equals,toString）</li><li><code>⌃O</code> 覆盖方法（重写父类方法）</li><li><code>⌃I</code> 实现方法（实现接口中的方法）</li><li><code>⌘⌥T</code> 包围代码（使用if..else, try..catch, for, synchronized等包围选中的代码）</li><li><code>⌘/</code> 注释/取消注释与行注释</li><li><code>⌘⌥/</code> 注释/取消注释与块注释</li><li><code>⌥↑</code> 连续选中代码块</li><li><code>⌥↓</code> 减少当前选中的代码块</li><li><code>⌃⇧Q</code> 显示上下文信息</li><li><code>⌥↩</code> 显示意向动作和快速修复代码</li><li><code>⌘⌥L</code> 格式化代码</li><li><code>⌃⌥O</code> 优化import</li><li><code>⌃⌥I</code> 自动缩进线</li><li><code>⇥ / ⇧⇥</code> 缩进代码 / 反缩进代码</li><li><code>⌘X</code> 剪切当前行或选定的块到剪贴板</li><li><code>⌘C</code> 复制当前行或选定的块到剪贴板</li><li><code>⌘V</code> 从剪贴板粘贴</li><li><code>⌘⇧V</code> 从最近的缓冲区粘贴</li><li><code>⌘D</code> 复制当前行或选定的块</li><li><code>⌘⌫</code> 删除当前行或选定的块的行</li><li><code>⌃⇧J</code> 智能的将代码拼接成一行</li><li><code>⌘↩</code> 智能的拆分拼接的行</li><li><code>⇧↩</code> 开始新的一行</li><li><code>⌘⇧U</code> 大小写切换</li><li><code>⌘⇧] / ⌘⇧[</code> 选择直到代码块结束/开始</li><li><code>⌥⌦</code> 删除到单词的末尾（⌦键为Fn+Delete）</li><li><code>⌥⌫</code> 删除到单词的开头</li><li><code>⌘+ / ⌘-</code> 展开 / 折叠代码块</li><li><code>⌘⇧+</code> 展开所以代码块</li><li><code>⌘⇧-</code> 折叠所有代码块</li><li><code>⌘W</code> 关闭活动的编辑器选项卡</li></ul><h4 id="二、Search-Replace（查询-替换）"><a href="#二、Search-Replace（查询-替换）" class="headerlink" title="二、Search/Replace（查询/替换）"></a>二、Search/Replace（查询/替换）</h4><ul><li><code>Double ⇧</code> 查询任何东西</li><li><code>⌘F</code> 文件内查找</li><li><code>⌘G</code> 查找模式下，向下查找</li><li><code>⌘⇧G</code> 查找模式下，向上查找</li><li><code>⌘R</code> 文件内替换</li><li><code>⌘⇧F</code> 全局查找（根据路径）</li><li><code>⌘⇧R</code> 全局替换（根据路径）</li><li><code>⌘⇧S</code> 查询结构（Ultimate Edition 版专用，需要在Keymap中设置）</li><li><code>⌘⇧M</code> 替换结构（Ultimate Edition 版专用，需要在Keymap中设置）</li></ul><h4 id="三、Usage-Search（使用查询）"><a href="#三、Usage-Search（使用查询）" class="headerlink" title="三、Usage Search（使用查询）"></a>三、Usage Search（使用查询）</h4><ul><li><code>⌥F7 / ⌘F7</code> 在文件中查找用法 / 在类中查找用法</li><li><code>⌘⇧F7</code> 在文件中突出显示的用法</li><li><code>⌘⌥F7</code> 显示用法</li></ul><h4 id="四、Compile-and-Run（编译和运行）"><a href="#四、Compile-and-Run（编译和运行）" class="headerlink" title="四、Compile and Run（编译和运行）"></a>四、Compile and Run（编译和运行）</h4><ul><li><code>⌘F9</code> 编译Project</li><li><code>⌘⇧F9</code> 编译选择的文件、包或模块</li><li><code>⌃⌥R</code> 弹出 Run 的可选择菜单</li><li><code>⌃⌥D</code> 弹出 Debug 的可选择菜单</li><li><code>⌃R</code> 运行</li><li><code>⌃D</code> 调试</li><li><code>⌃⇧R, ⌃⇧D</code> 从编辑器运行上下文环境配置</li></ul><h4 id="五、Debugging（调试）"><a href="#五、Debugging（调试）" class="headerlink" title="五、Debugging（调试）"></a>五、Debugging（调试）</h4><ul><li><code>F8</code> 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</li><li><code>F7</code> 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</li><li><code>⇧F7</code> 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法</li><li><code>⇧F8</code> 跳出</li><li><code>⌥F9</code> 运行到光标处，如果光标前有其他断点会进入到该断点</li><li><code>⌥F8</code> 计算表达式（可以更改变量值使其生效）</li><li><code>⌘⌥R</code> 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上</li><li><code>⌘F8</code> 切换断点（若光标当前行有断点则取消断点，没有则加上断点）</li><li><code>⌘⇧F8</code> 查看断点信息</li></ul><h4 id="六、Navigation（导航）"><a href="#六、Navigation（导航）" class="headerlink" title="六、Navigation（导航）"></a>六、Navigation（导航）</h4><ul><li><code>⌘O</code> 查找类文件</li><li><code>⌘⇧O</code> 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠<code>/</code></li><li><code>⌘⌥O</code> 前往指定的变量 / 方法</li><li><code>⌃← / ⌃→</code> 左右切换打开的编辑tab页</li><li><code>F12</code> 返回到前一个工具窗口</li><li><code>⎋</code> 从工具窗口进入代码文件窗口</li><li><code>⇧⎋</code> 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</li><li><code>⌘⇧F4</code> 关闭活动run/messages/find/… tab</li><li><code>⌘L</code> 在当前文件跳转到某一行的指定处</li><li><code>⌘E</code> 显示最近打开的文件记录列表</li><li><code>⌘⌥← / ⌘⌥→</code> 退回 / 前进到上一个操作的地方</li><li><code>⌘⇧⌫</code> 跳转到最后一个编辑的地方</li><li><code>⌥F1</code> 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)</li><li><code>⌘B / ⌘ 鼠标点击</code> 进入光标所在的方法/变量的接口或是定义处</li><li><code>⌘⌥B</code> 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</li><li><code>⌥ Space, ⌘Y</code> 快速打开光标所在方法、类的定义</li><li><code>⌃⇧B</code> 跳转到类型声明处</li><li><code>⌘U</code> 前往当前光标所在方法的父类的方法 / 接口定义</li><li><code>⌃↓ / ⌃↑</code> 当前光标跳转到当前文件的前一个/后一个方法名位置</li><li><code>⌘] / ⌘[</code> 移动光标到当前所在代码的花括号开始/结束位置</li><li><code>⌘F12</code> 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</li><li><code>⌃H</code> 显示当前类的层次结构</li><li><code>⌘⇧H</code> 显示方法层次结构</li><li><code>⌃⌥H</code> 显示调用层次结构</li><li><code>F2 / ⇧F2</code> 跳转到下一个/上一个突出错误或警告的位置</li><li><code>F4 / ⌘↓</code> 编辑/查看代码源</li><li><code>⌥ Home</code> 显示到当前文件的导航条</li><li><code>F3</code>选中文件/文件夹/代码行，添加/取消书签</li><li><code>⌥F3</code> 选中文件/文件夹/代码行，使用助记符添加/取消书签</li><li><code>⌃0...⌃9</code> 定位到对应数值的书签位置</li><li><code>⌘F3</code> 显示所有书签</li></ul><h4 id="七、Refactoring（重构）"><a href="#七、Refactoring（重构）" class="headerlink" title="七、Refactoring（重构）"></a>七、Refactoring（重构）</h4><ul><li><code>F5</code> 复制文件到指定目录</li><li><code>F6</code> 移动文件到指定目录</li><li><code>⌘⌫</code> 在文件上为安全删除文件，弹出确认框</li><li><code>⇧F6</code> 重命名文件</li><li><code>⌘F6</code> 更改签名</li><li><code>⌘⌥N</code> 一致性</li><li><code>⌘⌥M</code> 将选中的代码提取为方法</li><li><code>⌘⌥V</code> 提取变量</li><li><code>⌘⌥F</code> 提取字段</li><li><code>⌘⌥C</code> 提取常量</li><li><code>⌘⌥P</code> 提取参数</li></ul><h4 id="八、VCS-Local-History（版本控制-本地历史记录）"><a href="#八、VCS-Local-History（版本控制-本地历史记录）" class="headerlink" title="八、VCS/Local History（版本控制/本地历史记录）"></a>八、VCS/Local History（版本控制/本地历史记录）</h4><ul><li><code>⌘K</code> 提交代码到版本控制器</li><li><code>⌘T</code> 从版本控制器更新代码</li><li><code>⌥⇧C</code> 查看最近的变更记录</li><li><code>⌃C</code> 快速弹出版本控制器操作面板</li></ul><h4 id="九、Live-Templates（动态代码模板）"><a href="#九、Live-Templates（动态代码模板）" class="headerlink" title="九、Live Templates（动态代码模板）"></a>九、Live Templates（动态代码模板）</h4><ul><li><code>⌘⌥J</code> 弹出模板选择窗口，将选定的代码使用动态模板包住</li><li><code>⌘J</code> 插入自定义动态代码模板</li></ul><h4 id="十、General（通用）"><a href="#十、General（通用）" class="headerlink" title="十、General（通用）"></a>十、General（通用）</h4><ul><li><code>⌘1...⌘9</code> 打开相应编号的工具窗口</li><li><code>⌘S</code> 保存所有</li><li><code>⌘⌥Y</code> 同步、刷新</li><li><code>⌃⌘F</code> 切换全屏模式</li><li><code>⌘⇧F12</code> 切换最大化编辑器</li><li><code>⌥⇧F</code> 添加到收藏夹</li><li><code>⌥⇧I</code> 检查当前文件与当前的配置文件</li><li><code>§⌃, ⌃`</code> 快速切换当前的scheme（切换主题、代码样式等）</li><li><code>⌘,</code> 打开IDEA系统设置</li><li><code>⌘;</code> 打开项目结构对话框</li><li><code>⇧⌘A</code> 查找动作（可设置相关选项）</li><li><code>⌃⇥</code> 编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上delete，则是关闭对应选中的窗口）</li></ul><h4 id="十一、Other（一些官方文档上没有体现的快捷键）"><a href="#十一、Other（一些官方文档上没有体现的快捷键）" class="headerlink" title="十一、Other（一些官方文档上没有体现的快捷键）"></a>十一、Other（一些官方文档上没有体现的快捷键）</h4><ul><li><code>⌘⇧8</code> 竖编辑模式</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Mac键盘符号和修饰键说明&quot;&gt;&lt;a href=&quot;#Mac键盘符号和修饰键说明&quot; class=&quot;headerlink&quot; title=&quot;Mac键盘符号和修饰键说明&quot;&gt;&lt;/a&gt;Mac键盘符号和修饰键说明&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;⌘&lt;/code&gt; Command&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⇧&lt;/code&gt; Shift&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌥&lt;/code&gt; Option&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌃&lt;/code&gt; Control&lt;/li&gt;
&lt;li&gt;&lt;code&gt;↩︎&lt;/code&gt; Return/Enter&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌫&lt;/code&gt; Delete&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⌦&lt;/code&gt; 向前删除键（Fn+Delete）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;↑&lt;/code&gt; 上箭头&lt;/li&gt;
&lt;li&gt;&lt;code&gt;↓&lt;/code&gt; 下箭头&lt;/li&gt;
&lt;li&gt;&lt;code&gt;←&lt;/code&gt; 左箭头&lt;/li&gt;
&lt;li&gt;&lt;code&gt;→&lt;/code&gt; 右箭头&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⇞&lt;/code&gt; Page Up（Fn+↑）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⇟&lt;/code&gt; Page Down（Fn+↓）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Home&lt;/code&gt; Fn + ←&lt;/li&gt;
&lt;li&gt;&lt;code&gt;End&lt;/code&gt; Fn + →&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⇥&lt;/code&gt; 右制表符（Tab键）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⇤&lt;/code&gt; 左制表符（Shift+Tab）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;⎋&lt;/code&gt; Escape (Esc)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="mac" scheme="http://blog.javacn.top/categories/mac/"/>
    
    
      <category term="mac" scheme="http://blog.javacn.top/tags/mac/"/>
    
      <category term="IDEA" scheme="http://blog.javacn.top/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>NexT主题设置</title>
    <link href="http://blog.javacn.top/post/fde961f3.html"/>
    <id>http://blog.javacn.top/post/fde961f3.html</id>
    <published>2017-11-22T10:03:17.000Z</published>
    <updated>2019-04-20T11:03:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NexT字数统计与阅读时长设置"><a href="#NexT字数统计与阅读时长设置" class="headerlink" title="NexT字数统计与阅读时长设置"></a>NexT字数统计与阅读时长设置</h1><p>NexT主题默认已经集成了文章【字数统计】、【阅读时长】统计功能，如果我们需要使用，只需要在主题配置文件(Blog\themes\next_config.yml)中打开<code>wordcount</code> 统计功能即可。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>如果仅仅只是打开开关，部署之后会发现文章的【字数统计】和【阅读时长】后面没有对应的xxx字，xx分钟等字样，只有光秃秃的数字在那里。</p><a id="more"></a><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>找到<code>Blog\themes\next\layout\_macro\post.swig</code> 文件</p><ul><li>字数统计</li></ul><p>搜到找到如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; __('post.wordcount') &#125;&#125;"</span>&gt;</span></span><br><span class="line">     &#123;&#123; wordcount(post.content) &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加 “字”到<code>wordcount(post.content)</code> 后面，修改后为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; __('post.wordcount') &#125;&#125;"</span>&gt;</span></span><br><span class="line">     &#123;&#123; wordcount(post.content) &#125;&#125; 字</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>阅读时长</li></ul><p>找到如下代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; __('post.min2read') &#125;&#125;"</span>&gt;</span></span><br><span class="line">   &#123;&#123; min2read(post.content) &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加 “分钟”到<code>min2read(post.content)</code> 后面，修改后为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">title</span>=<span class="string">"&#123;&#123; __('post.min2read') &#125;&#125;"</span>&gt;</span></span><br><span class="line">   &#123;&#123; min2read(post.content) &#125;&#125; 分钟</span><br><span class="line"> <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再次运行，就能得到正常的如“字数统计 xxxx字” 、 “阅读时长 xx分钟”这样的样式了.</p><h1 id="设置分类列表"><a href="#设置分类列表" class="headerlink" title="设置分类列表"></a>设置分类列表</h1><h2 id="修改根目录下-config-yml"><a href="#修改根目录下-config-yml" class="headerlink" title="修改根目录下_config.yml"></a>修改根目录下_config.yml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Directory</span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: public</span><br><span class="line">#这个是tags的目录</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">#这个是category的目录</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br></pre></td></tr></table></figure><h2 id="修改themes下-config-yml"><a href="#修改themes下-config-yml" class="headerlink" title="修改themes下_config.yml"></a>修改themes下_config.yml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  #categories要打开</span><br><span class="line">  categories: /categories</span><br><span class="line">  #about: /about</span><br><span class="line">  archives: /archives</span><br><span class="line">  #tags要打开</span><br><span class="line">  tags: /tags</span><br><span class="line">  #sitemap: /sitemap.xml</span><br><span class="line">  #commonweal: /404.html</span><br></pre></td></tr></table></figure><h2 id="生成tags和categories页面"><a href="#生成tags和categories页面" class="headerlink" title="生成tags和categories页面"></a>生成tags和categories页面</h2><p>在根目录下执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$hexo n page &quot;tags&quot;</span><br><span class="line">$hexo n page &quot;categories&quot;</span><br></pre></td></tr></table></figure><p>然后去source目录下找到categories/index.md<br>修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2017-04-19 16:19:25</span><br><span class="line">type: categories</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>去source目录下找到tags/index.md<br>修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2017-04-19 16:19:25</span><br><span class="line">type: tags</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>这样就配置好了</p><h1 id="在文章中添加tag、分类"><a href="#在文章中添加tag、分类" class="headerlink" title="在文章中添加tag、分类"></a>在文章中添加tag、分类</h1><h2 id="模板中添加"><a href="#模板中添加" class="headerlink" title="模板中添加"></a>模板中添加</h2><p>编辑 /sacaffolds/post.md</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories: </span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>这样，new出来的文章默认就带上categories和tags了</p><h2 id="多个tag的写法"><a href="#多个tag的写法" class="headerlink" title="多个tag的写法"></a>多个tag的写法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tages: </span><br><span class="line">    - 标签1</span><br><span class="line">    - 标签2</span><br><span class="line">    ...</span><br><span class="line">    - 标签n</span><br></pre></td></tr></table></figure><h1 id="链接持久化终极解决之道"><a href="#链接持久化终极解决之道" class="headerlink" title="链接持久化终极解决之道"></a>链接持久化终极解决之道</h1><h2 id="使用hexo-abbrlink插件"><a href="#使用hexo-abbrlink插件" class="headerlink" title="使用hexo-abbrlink插件"></a>使用hexo-abbrlink插件</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><h3 id="修改站点配置文件"><a href="#修改站点配置文件" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">post/:abbrlink.html</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line"><span class="attr">  alg:</span> <span class="string">crc32</span>  <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line"><span class="attr">  rep:</span> <span class="string">hex</span>    <span class="comment"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></figure><h3 id="修改scaffolds里的模版文件"><a href="#修改scaffolds里的模版文件" class="headerlink" title="修改scaffolds里的模版文件"></a>修改<code>scaffolds</code>里的模版文件</h3><p>修改<code>post.md</code>为:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&#123;&#123;</span> <span class="string">title</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">&#123;&#123;</span> <span class="string">date</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span><span class="bullet">--1234567</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;NexT字数统计与阅读时长设置&quot;&gt;&lt;a href=&quot;#NexT字数统计与阅读时长设置&quot; class=&quot;headerlink&quot; title=&quot;NexT字数统计与阅读时长设置&quot;&gt;&lt;/a&gt;NexT字数统计与阅读时长设置&lt;/h1&gt;&lt;p&gt;NexT主题默认已经集成了文章【字数统计】、【阅读时长】统计功能，如果我们需要使用，只需要在主题配置文件(Blog\themes\next_config.yml)中打开&lt;code&gt;wordcount&lt;/code&gt; 统计功能即可。&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;如果仅仅只是打开开关，部署之后会发现文章的【字数统计】和【阅读时长】后面没有对应的xxx字，xx分钟等字样，只有光秃秃的数字在那里。&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://blog.javacn.top/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://blog.javacn.top/tags/hexo/"/>
    
      <category term="NexT" scheme="http://blog.javacn.top/tags/NexT/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 hexo＋github 搭建个人博客</title>
    <link href="http://blog.javacn.top/post/bb827274.html"/>
    <id>http://blog.javacn.top/post/bb827274.html</id>
    <published>2017-04-19T03:39:13.000Z</published>
    <updated>2019-04-20T12:42:18.934Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub Pages 有以下几个优点：</p><ul><li>轻量级的博客系统，没有麻烦的配置</li><li>免费空间，享受 Git 版本管理功能</li><li>使用标记语言，比如 Markdown</li><li>无需自己搭建服务器</li><li>可以绑定自己的域名</li></ul><p>当然他也有缺点：</p><ul><li>搭配模板系统，相当于静态页发布，每运行生成一次都必须遍历全部的文本文件，网站越大，生成时间越长</li><li>动态程序的部分相当局限，比如没有评论，不过有解决方案</li><li>基于 Git，很多东西需要定制，不像 Wordpress 有强大的后台</li></ul><p>要想搭建漂亮的 blog，还需要模板系统，官方推荐的是 jekyll，但是配置稍复杂，今天推荐另一个选择 —— hexo，一个简单地、轻量地、基于 Node 的一个静态博客框架。</p><p>下面介绍下如何使用 hexo 和 github pages 搭建个人博客。</p><a id="more"></a><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>注意: 本文针对 Windows 平台和 Hexo 3.1.1</p><h2 id="安装-github-windows"><a href="#安装-github-windows" class="headerlink" title="安装 github windows"></a>安装 github windows</h2><p>主要使用 git bash，如果对 git 命令不熟悉的也可以使用 git 客户端进行某些操作<br><a href="https://desktop.github.com/" target="_blank" rel="noopener">github windows</a></p><h2 id="安装-node-js"><a href="#安装-node-js" class="headerlink" title="安装 node.js"></a>安装 node.js</h2><p>因为要使用 npm，比较简单的方法就是安装 node.js<br><a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a><br>安装完成后添加 Path 环境变量，使 npm 命令生效<br><code>;C:\Program Files\nodejs\node_modules\npm</code></p><h2 id="创建-Github-Pages"><a href="#创建-Github-Pages" class="headerlink" title="创建 Github Pages"></a>创建 Github Pages</h2><p>没有 github 账号的话，需要注册一个，不赘述</p><p>然后创建一个仓库，名字是[yourGithubAccount].github.io</p><h2 id="配置-ssh-key"><a href="#配置-ssh-key" class="headerlink" title="配置 ssh key"></a>配置 ssh key</h2><p>使用 git bash 生成 public ssh key，以下是最简单的方法<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ssh</span>-keygen -t rsa</span><br></pre></td></tr></table></figure></p><p>C/Documents and Settings/username/.ssh 目录下会生成 id_rsa.pub</p><p>将 id_rsa.pub 的内容完全复制到 github Account Setting 里的 ssh key 里即可</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ssh</span> -T git@github.com</span><br></pre></td></tr></table></figure><p>然后会看到<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi [yourGithubAccount]! You<span class="string">'ve successfully authenticated, but GitHub does not provide ps access.</span></span><br></pre></td></tr></table></figure></p><h2 id="设置用户信息"><a href="#设置用户信息" class="headerlink" title="设置用户信息"></a>设置用户信息</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$git</span> config --global user.name <span class="string">"[yourName]"</span>//用户名</span><br><span class="line"><span class="variable">$git</span> config --global user.email  <span class="string">"[yourEmail]"</span>//填写自己的邮箱</span><br></pre></td></tr></table></figure><p>经过以上步骤，本机已成功连接到 github，为部署打下基础。</p><h1 id="配置-hexo"><a href="#配置-hexo" class="headerlink" title="配置 hexo"></a>配置 hexo</h1><h2 id="本地-clone"><a href="#本地-clone" class="headerlink" title="本地 clone"></a>本地 clone</h2><p>创建本地目录，然后使用 git bash 或者客户端 clone 之前创建的仓库（[yourGithubAccount].github.io）</p><h2 id="安装、配置-hexo"><a href="#安装、配置-hexo" class="headerlink" title="安装、配置 hexo"></a>安装、配置 hexo</h2><ul><li><p>进入仓库目录，使用 git bash 安装配置 hexo</p><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$npm</span> install -g hexo-cli</span><br><span class="line"><span class="variable">$npm</span> install hexo --save</span><br><span class="line"><span class="variable">$hexo</span> init</span><br></pre></td></tr></table></figure></li><li><p>安装 hexo 插件</p><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$npm</span> install hexo-generator-index --save</span><br><span class="line"><span class="variable">$npm</span> install hexo-generator-archive --save</span><br><span class="line"><span class="variable">$npm</span> install hexo-generator-category --save</span><br><span class="line"><span class="variable">$npm</span> install hexo-generator-tag --save</span><br><span class="line"><span class="variable">$npm</span> install hexo-server --save</span><br><span class="line"><span class="variable">$npm</span> install hexo-deployer-git --save</span><br><span class="line"><span class="variable">$npm</span> install hexo-deployer-heroku --save</span><br><span class="line"><span class="variable">$npm</span> install hexo-deployer-rsync --save</span><br><span class="line"><span class="variable">$npm</span> install hexo-deployer-openshift --save</span><br><span class="line"><span class="variable">$npm</span> install hexo-renderer-marked@<span class="number">0.2</span> --save</span><br><span class="line"><span class="variable">$npm</span> install hexo-renderer-stylus@<span class="number">0.2</span> --save</span><br><span class="line"><span class="variable">$npm</span> install hexo-generator-feed@<span class="number">1</span> --save</span><br><span class="line"><span class="variable">$npm</span> install hexo-generator-sitemap@<span class="number">1</span> --save</span><br><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure></li><li><p>安装 ejs，否则无法解析模板</p><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$npm</span> install</span><br></pre></td></tr></table></figure></li><li><p>生成 public 文件夹</p><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hexo</span> g</span><br></pre></td></tr></table></figure></li><li><p>浏览器输入 localhost:4000 本地查看效果</p><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hexo</span> s</span><br></pre></td></tr></table></figure></li><li><p>主题<br>hexo 有很多主题可选，我选了 Jacman，默认支持多说评论、网站统计、分享等功能，只要稍微配置即可使用。可以根据自己需求进行选择。</p></li></ul><h1 id="使用-hexo"><a href="#使用-hexo" class="headerlink" title="使用 hexo"></a>使用 hexo</h1><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>配置 _config.yml<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="string">git@github.com:[yourGithubAccount]/[yourGithubAccount].github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></p><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hexo</span> d</span><br></pre></td></tr></table></figure><p>即可将 hexo 部署到 github 上</p><p>提示找不到 git 时<br>需执行（虽然之前已经执行过）<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$npm</span> install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>然后<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hexo</span> d</span><br></pre></td></tr></table></figure></p><p>即可通过 http://[yourGithubAccount].github.io/ 查看了</p><h2 id="发表新文章"><a href="#发表新文章" class="headerlink" title="发表新文章"></a>发表新文章</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hexo</span> new <span class="string">"title"</span></span><br></pre></td></tr></table></figure><p>然后在 source/_post 下会生成该md文件，即可使用编辑器编写了</p><p>编写过程中，可以在本地实时查看效果，很是方便</p><p>支持 markdown，不了解的自行 google 吧</p><p>编写完成后，部署还是一样的<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hexo</span> g</span><br><span class="line"><span class="variable">$hexo</span> d</span><br></pre></td></tr></table></figure></p><p>如果部署过程中报错，可执行以下命令重新部署<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hexo</span> clean</span><br><span class="line"><span class="variable">$hexo</span> generate</span><br><span class="line"><span class="variable">$hexo</span> deploy</span><br></pre></td></tr></table></figure></p><h2 id="添加自定义页面"><a href="#添加自定义页面" class="headerlink" title="添加自定义页面"></a>添加自定义页面</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hexo</span> new page <span class="string">"about"</span></span><br></pre></td></tr></table></figure><p>该命令会生成 source/about/index.md，编辑即可</p><h2 id="插件的升级与卸载"><a href="#插件的升级与卸载" class="headerlink" title="插件的升级与卸载"></a>插件的升级与卸载</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$npm</span> update</span><br><span class="line"><span class="variable">$npm</span> uninstall &lt;plugin-name&gt;</span><br></pre></td></tr></table></figure><h2 id="更新-hexo"><a href="#更新-hexo" class="headerlink" title="更新 hexo"></a>更新 hexo</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$npm</span> update -g hexo</span><br></pre></td></tr></table></figure><h2 id="绑定自定义域名"><a href="#绑定自定义域名" class="headerlink" title="绑定自定义域名"></a>绑定自定义域名</h2><p>在/source/ 目录下新建内容为自定义域名的 CNAME 文件，部署即可（域名设置略）</p><h2 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h2><p>Hexo简写命令<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hexo</span> n <span class="comment">#new</span></span><br><span class="line"><span class="variable">$hexo</span> g <span class="comment">#generate</span></span><br><span class="line"><span class="variable">$hexo</span> s <span class="comment">#server</span></span><br><span class="line"><span class="variable">$hexo</span> d <span class="comment">#deploy</span></span><br></pre></td></tr></table></figure></p><p>以上是基本操作，质量高的 blog 所带来的好处是不言而喻的，感兴趣的可以行动起来了。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://alfred-sun.github.io/blog/2014/12/05/github-pages/" target="_blank" rel="noopener">http://alfred-sun.github.io/blog/2014/12/05/github-pages/</a><br><a href="http://beiyuu.com/github-pages/" target="_blank" rel="noopener">http://beiyuu.com/github-pages/</a><br><a href="http://cnfeat.com/2014/05/10/2014-05-11-how-to-build-a-blog/" target="_blank" rel="noopener">http://cnfeat.com/2014/05/10/2014-05-11-how-to-build-a-blog/</a><br><a href="http://wsgzao.github.io/post/hexo-guide/" target="_blank" rel="noopener">http://wsgzao.github.io/post/hexo-guide/</a><br><a href="http://fy98.com/2014/03/03/build-blog-with-hexo/" target="_blank" rel="noopener">http://fy98.com/2014/03/03/build-blog-with-hexo/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GitHub Pages 有以下几个优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;轻量级的博客系统，没有麻烦的配置&lt;/li&gt;
&lt;li&gt;免费空间，享受 Git 版本管理功能&lt;/li&gt;
&lt;li&gt;使用标记语言，比如 Markdown&lt;/li&gt;
&lt;li&gt;无需自己搭建服务器&lt;/li&gt;
&lt;li&gt;可以绑定自己的域名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然他也有缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搭配模板系统，相当于静态页发布，每运行生成一次都必须遍历全部的文本文件，网站越大，生成时间越长&lt;/li&gt;
&lt;li&gt;动态程序的部分相当局限，比如没有评论，不过有解决方案&lt;/li&gt;
&lt;li&gt;基于 Git，很多东西需要定制，不像 Wordpress 有强大的后台&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要想搭建漂亮的 blog，还需要模板系统，官方推荐的是 jekyll，但是配置稍复杂，今天推荐另一个选择 —— hexo，一个简单地、轻量地、基于 Node 的一个静态博客框架。&lt;/p&gt;
&lt;p&gt;下面介绍下如何使用 hexo 和 github pages 搭建个人博客。&lt;/p&gt;
    
    </summary>
    
      <category term="other" scheme="http://blog.javacn.top/categories/other/"/>
    
    
      <category term="hexo" scheme="http://blog.javacn.top/tags/hexo/"/>
    
      <category term="github" scheme="http://blog.javacn.top/tags/github/"/>
    
      <category term="转载" scheme="http://blog.javacn.top/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
</feed>
