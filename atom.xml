<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>荆棘之路</title>
  <subtitle>Just Do It !</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.javacn.top/"/>
  <updated>2017-05-05T06:54:44.184Z</updated>
  <id>http://www.javacn.top/</id>
  
  <author>
    <name>曙光</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>分布式系统的事务处理</title>
    <link href="http://www.javacn.top/20170505/transaction_distributed_system/"/>
    <id>http://www.javacn.top/20170505/transaction_distributed_system/</id>
    <published>2017-05-05T03:46:44.000Z</published>
    <updated>2017-05-05T06:54:44.184Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分布式事务及应用场景"><a href="#分布式事务及应用场景" class="headerlink" title="分布式事务及应用场景"></a>分布式事务及应用场景</h1><p>当我们在生产线上用一台服务器来提供数据服务的时候，我会遇到如下的两个问题：</p>
<ol>
<li>一台服务器的性能不足以提供足够的能力服务于所有的网络请求。</li>
<li>我们总是害怕我们的这台服务器停机，造成服务不可用或是数据丢失。</li>
</ol>
<p>于是我们不得不对我们的服务器进行扩展，加入更多的机器来分担性能上的问题，以及来解决单点故障问题。<br>通常，我们会通过两种手段来扩展我们的数据服务：</p>
<ol>
<li><strong>数据分区</strong>：就是把数据分块放在不同的服务器上（如：uid % 16，一致性哈希等）。</li>
<li><strong>数据镜像</strong>：让所有的服务器都有相同的数据，提供相当的服务。</li>
</ol>
<p>$y^i$</p>
<a id="more"></a>
<p>对于第一种情况，我们无法解决数据丢失的问题，单台服务器出问题时，会有部分数据丢失。所以，<strong>数据服务的高可用性只能通过第二种方法来完成——数据的冗余存储</strong>（一般工业界认为比较安全的备份数应该是3份，如：Hadoop和Dynamo）。 但是，<strong>加入更多的机器，会让我们的数据服务变得很复杂，尤其是跨服务器的事务处理，也就是跨服务器的数据一致性。</strong>这个是一个很难的问题。 让我们用最经典的Use Case：“<strong><em>A帐号向B帐号汇钱</em></strong>”来说明一下，熟悉RDBMS事务的都知道从帐号A到帐号B需要6个操作：</p>
<ol>
<li>从A帐号中把余额读出来。</li>
<li>对A帐号做减法操作。</li>
<li>把结果写回A帐号中。</li>
<li>从B帐号中把余额读出来。</li>
<li>对B帐号做加法操作。</li>
<li>把结果写回B帐号中。</li>
</ol>
<p>为了数据的一致性，这6件事，要么都成功做完，要么都不成功，而且这个操作的过程中，对A、B帐号的其它访问必需锁死，所谓锁死就是要排除其它的读写操作，不然会有脏数据的问题，这就是事务。<br>那么，我们在加入了更多的机器后，这个事情会变得复杂起来：</p>
<ol>
<li><p><strong>在数据分区的方案中</strong>：如果A帐号和B帐号的数据不在同一台服务器上怎么办？我们需要一个跨机器的事务处理。也就是说，如果A的扣钱成功了，但B的加钱不成功，我们还要把A的操作给回滚回去。这在跨机器的情况下，就变得比较复杂了。</p>
</li>
<li><p><strong>在数据镜像的方案中</strong>：A帐号和B帐号间的汇款是可以在一台机器上完成的，但是别忘了我们有多台机器存在A帐号和B帐号的副本。如果对A帐号的汇钱有两个并发操作（要汇给B和C），这两个操作发生在不同的两台服务器上怎么办？也就是说，在数据镜像中，在不同的服务器上对同一个数据的写操作怎么保证其一致性，保证数据不冲突？</p>
</li>
</ol>
<p>同时，我们还要考虑性能的因素，如果不考虑性能的话，事务得到保证并不困难，系统慢一点就行了。除了考虑性能外，我们还要考虑可用性，也就是说，一台机器没了，数据不丢失，服务可由别的机器继续提供。 于是，我们需要重点考虑下面的这么几个情况：</p>
<ol>
<li><strong>容灾</strong>：数据不丢、结点的Failover</li>
<li><strong>数据的一致性</strong>：事务处理</li>
<li><strong>性能</strong>：吞吐量 、 响应时间</li>
</ol>
<p>前面说过，要解决数据不丢，只能通过数据冗余的方法，就算是数据分区，每个区也需要进行数据冗余处理。这就是数据副本：当出现某个节点的数据丢失时可以从副本读到，数据副本是分布式系统解决数据丢失异常的唯一手段。所以，在这篇文章中，简单起见，我们只讨论在数据冗余情况下考虑数据的一致性和性能的问题。简单说来：</p>
<ol>
<li><strong>要想让数据有高可用性，就得写多份数据。</strong></li>
<li><strong>写多份的问题会导致数据一致性的问题。</strong></li>
<li><strong>数据一致性的问题又会引发性能问题</strong></li>
</ol>
<p>这就是软件开发，按下了葫芦起了瓢。</p>
<h1 id="一致性模型"><a href="#一致性模型" class="headerlink" title="一致性模型"></a>一致性模型</h1><p>说起数据一致性来说，简单说有三种类型（当然，如果细分的话，还有很多一致性模型，如：顺序一致性，FIFO一致性，会话一致性，单读一致性，单写一致性，但为了本文的简单易读，我只说下面三种）：</p>
<ol>
<li>Weak 弱一致性：当你写入一个新值后，读操作在数据副本上可能读出来，也可能读不出来。比如：某些cache系统，网络游戏其它玩家的数据和你没什么关系，VOIP这样的系统，或是百度搜索引擎（呵呵）。</li>
<li>Eventually 最终一致性：当你写入一个新值后，有可能读不出来，但在某个时间窗口之后保证最终能读出来。比如：DNS，电子邮件、Amazon S3，Google搜索引擎这样的系统。</li>
<li>Strong 强一致性：新的数据一旦写入，在任意副本任意时刻都能读到新值。比如：文件系统，RDBMS，Azure Table都是强一致性的。</li>
</ol>
<p>从这三种一致型的模型上来说，我们可以看到，Weak和Eventually一般来说是异步冗余的，而Strong一般来说是同步冗余的，异步的通常意味着更好的性能，但也意味着更复杂的状态控制。同步意味着简单，但也意味着性能下降。 好，让我们由浅入深，一步一步地来看有哪些技术：</p>
<h2 id="Master-Slave"><a href="#Master-Slave" class="headerlink" title="Master-Slave"></a>Master-Slave</h2><p>首先是Master-Slave结构，对于这种加构，Slave一般是Master的备份。在这样的系统中，一般是如下设计的：</p>
<ol>
<li>读写请求都由Master负责。</li>
<li>写请求写到Master上后，由Master同步到Slave上。</li>
</ol>
<p>从Master同步到Slave上，你可以使用异步，也可以使用同步，可以使用Master来push，也可以使用Slave来pull。 通常来说是Slave来周期性的pull，所以，是最终一致性。这个设计的问题是，如果Master在pull周期内垮掉了，那么会导致这个时间片内的数据丢失。如果你不想让数据丢掉，Slave只能成为Read-Only的方式等Master恢复。</p>
<p>当然，如果你可以容忍数据丢掉的话，你可以马上让Slave代替Master工作（对于只负责计算的结点来说，没有数据一致性和数据丢失的问题，Master-Slave的方式就可以解决单点问题了） 当然，Master Slave也可以是强一致性的， 比如：当我们写Master的时候，Master负责先写自己，等成功后，再写Slave，两者都成功后返回成功，整个过程是同步的，如果写Slave失败了，那么两种方法，一种是标记Slave不可用报错并继续服务（等Slave恢复后同步Master的数据，可以有多个Slave，这样少一个，还有备份，就像前面说的写三份那样），另一种是回滚自己并返回写失败。（注：一般不先写Slave，因为如果写Master自己失败后，还要回滚Slave，此时如果回滚Slave失败，就得手工订正数据了）你可以看到，如果Master-Slave需要做成强一致性有多复杂。</p>
<h2 id="Master-Master"><a href="#Master-Master" class="headerlink" title="Master-Master"></a>Master-Master</h2><p>Master-Master，又叫Multi-master，是指一个系统存在两个或多个Master，每个Master都提供read-write服务。这个模型是Master-Slave的加强版，数据间同步一般是通过Master间的异步完成，所以是最终一致性。 Master-Master的好处是，一台Master挂了，别的Master可以正常做读写服务，他和Master-Slave一样，当数据没有被复制到别的Master上时，数据会丢失。很多数据库都支持Master-Master的Replication的机制。</p>
<p>另外，如果多个Master对同一个数据进行修改的时候，这个模型的恶梦就出现了——对数据间的冲突合并，这并不是一件容易的事情。看看Dynamo的Vector Clock的设计（记录数据的版本号和修改者）就知道这个事并不那么简单，而且Dynamo对数据冲突这个事是交给用户自己搞的。就像我们的SVN源码冲突一样，对于同一行代码的冲突，只能交给开发者自己来处理。（在本文后后面会讨论一下Dynamo的Vector Clock）</p>
<h2 id="Two-Three-Phase-Commit"><a href="#Two-Three-Phase-Commit" class="headerlink" title="Two/Three Phase Commit"></a>Two/Three Phase Commit</h2><p>这个协议的缩写又叫2PC，中文叫两阶段提交。在分布式系统中，每个节点虽然可以知晓自己的操作时成功或者失败，却无法知道其他节点的操作的成功或失败。当一个事务跨越多个节点时，为了保持事务的ACID特性，需要引入一个作为协调者的组件来统一掌控所有节点(称作参与者)的操作结果并最终指示这些节点是否要把操作结果进行真正的提交(比如将更新后的数据写入磁盘等等)。 两阶段提交的算法如下：</p>
<h3 id="第一阶段："><a href="#第一阶段：" class="headerlink" title="第一阶段："></a>第一阶段：</h3><p>协调者会问所有的参与者结点，是否可以执行提交操作。</p>
<p>各个参与者开始事务执行的准备工作：如：为资源上锁，预留资源，写undo/redo log……</p>
<p>参与者响应协调者，如果事务的准备工作成功，则回应“可以提交”，否则回应“拒绝提交”。</p>
<h3 id="第二阶段："><a href="#第二阶段：" class="headerlink" title="第二阶段："></a>第二阶段：</h3><p>如果所有的参与者都回应“可以提交”，那么，协调者向所有的参与者发送“正式提交”的命令。参与者完成正式提交，并释放所有资源，然后回应“完成”，协调者收集各结点的“完成”回应后结束这个Global Transaction。<br>如果有一个参与者回应“拒绝提交”，那么，协调者向所有的参与者发送“回滚操作”，并释放所有资源，然后回应“回滚完成”，协调者收集各结点的“回滚”回应后，取消这个Global Transaction。</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/1.png" alt=""></p>
<p>我们可以看到，2PC说白了就是第一阶段做Vote，第二阶段做决定的一个算法，也可以看到2PC这个事是强一致性的算法。在前面我们讨论过Master-Slave的强一致性策略，和2PC有点相似，只不过2PC更为保守一些——先尝试再提交。<br>2PC用的是比较多的，在一些系统设计中，会串联一系列的调用，比如：A -&gt; B -&gt; C -&gt; D，每一步都会分配一些资源或改写一些数据。比如我们B2C网上购物的下单操作在后台会有一系列的流程需要做。如果我们一步一步地做，就会出现这样的问题，如果某一步做不下去了，那么前面每一次所分配的资源需要做反向操作把他们都回收掉，所以，操作起来比较复杂。现在很多处理流程（Workflow）都会借鉴2PC这个算法，使用 try -&gt; confirm的流程来确保整个流程的能够成功完成。 举个通俗的例子，西方教堂结婚的时候，都有这样的桥段：</p>
<ol>
<li>牧师分别问新郎和新娘：你是否愿意……不管生老病死……（询问阶段）</li>
<li>当新郎和新娘都回答愿意后（锁定一生的资源），牧师就会说：我宣布你们……（事务提交）</li>
</ol>
<p>这是多么经典的一个两阶段提交的事务处理。 另外，我们也可以看到其中的一些问题，<br>A）其中一个是同步阻塞操作，这个事情必然会非常大地影响性能。<br>B）另一个主要的问题是在TimeOut上，比如，</p>
<ol>
<li>如果第一阶段中，参与者没有收到询问请求，或是参与者的回应没有到达协调者。那么，需要协调者做超时处理，一旦超时，可以当作失败，也可以重试。</li>
<li>如果第二阶段中，正式提交发出后，如果有的参与者没有收到，或是参与者提交/回滚后的确认信息没有返回，一旦参与者的回应超时，要么重试，要么把那个参与者标记为问题结点剔除整个集群，这样可以保证服务结点都是数据一致性的。</li>
<li>糟糕的情况是，第二阶段中，如果参与者收不到协调者的commit/fallback指令，参与者将处于“状态未知”阶段，参与者完全不知道要怎么办，比如：如果所有的参与者完成第一阶段的回复后（可能全部yes，可能全部no，可能部分yes部分no），如果协调者在这个时候挂掉了。那么所有的结点完全不知道怎么办（问别的参与者都不行）。为了一致性，要么死等协调者，要么重发第一阶段的yes/no命令。</li>
</ol>
<p>两段提交最大的问题就是第 3 项，<strong>如果第一阶段完成后，参与者在第二阶没有收到决策，那么数据结点会进入“不知所措”的状态，这个状态会block住整个事务。</strong>也就是说，协调者Coordinator对于事务的完成非常重要，Coordinator的可用性是个关键。 </p>
<p>因些，我们引入三段提交，三段提交在Wikipedia上的描述如下，他把二段提交的第一个段break成了两段：<strong>询问，然后再锁资源。最后真正提交。</strong><br>三段提交的示意图如下：</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/2.png" alt=""></p>
<p>三段提交的核心理念是：<strong>在询问的时候并不锁定资源，除非所有人都同意了，才开始锁资源。</strong></p>
<p>理论上来说，如果第一阶段所有的结点返回成功，那么有理由相信成功提交的概率很大。这样一来，可以降低参与者Cohorts的状态未知的概率。也就是说，一旦参与者收到了PreCommit，意味他知道大家其实都同意修改了。这一点很重要。</p>
<p>下面我们来看一下3PC的状态迁移图：（注意图中的虚线，那些F,T是Failuer或Timeout，其中的：状态含义是 q – Query，a – Abort，w – Wait，p – PreCommit，c – Commit）</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/3.png" alt=""></p>
<p>从上图的状态变化图我们可以从虚线（那些F,T是Failuer或Timeout）看到——<strong>如果结点处在P状态（PreCommit）的时候发生了F/T的问题，三段提交比两段提交的好处是，三段提交可以继续直接把状态变成C状态（Commit），而两段提交则不知所措。</strong></p>
<p>其实，三段提交是一个很复杂的事情，实现起来相当难，而且也有一些问题。</p>
<p>看到这里，我相信你有很多很多的问题，你一定在思考2PC/3PC中各种各样的失败场景，<strong>你会发现Timeout是个非常难处理的事情，因为网络上的Timeout在很多时候让你无所事从，你也不知道对方是做了还是没有做。于是你好好的一个状态机就因为Timeout成了个摆设。</strong></p>
<p>一个网络服务会有三种状态：</p>
<ol>
<li>Success</li>
<li>Failure</li>
<li>Timeout</li>
</ol>
<p>第三个绝对是恶梦，尤其在你需要维护状态的时候。</p>
<h2 id="Two-Generals-Problem（两将军问题）"><a href="#Two-Generals-Problem（两将军问题）" class="headerlink" title="Two Generals Problem（两将军问题）"></a>Two Generals Problem（两将军问题）</h2><p><a href="http://en.wikipedia.org/wiki/Two_Generals&#39;_Problem" target="_blank" rel="external">Two Generals Problem</a> 两将军问题是这么一个思维性实验问题：<br>有两支军队，它们分别有一位将军领导，现在准备攻击一座修筑了防御工事的城市。这两支军队都驻扎在那座城市的附近，分占一座山头。一道山谷把两座山分隔开来，并且两位将军唯一的通信方式就是派各自的信使来往于山谷两边。不幸的是，这个山谷已经被那座城市的保卫者占领，并且存在一种可能，那就是任何被派出的信使通过山谷是会被捕。 请注意，虽然两位将军已经就攻击那座城市达成共识，但在他们各自占领山头阵地之前，并没有就进攻时间达成共识。两位将军必须让自己的军队同时进攻城市才能取得成功。因此，他们必须互相沟通，以确定一个时间来攻击，并同意就在那时攻击。如果只有一个将军进行攻击，那么这将是一个灾难性的失败。 </p>
<p>这个思维实验就包括考虑他们如何去做这件事情。下面是我们的思考：</p>
<ol>
<li>第一位将军先发送一段消息“让我们在上午9点开始进攻”。然而，一旦信使被派遣，他是否通过了山谷，第一位将军就不得而知了。任何一点的不确定性都会使得第一位将军攻击犹豫，因为如果第二位将军不能在同一时刻发动攻击，那座城市的驻军就会击退他的军队的进攻，导致他的军对被摧毁。</li>
<li>知道了这一点，第二位将军就需要发送一个确认回条：“我收到您的邮件，并会在9点的攻击。”但是，如果带着确认消息的信使被抓怎么办？所以第二位将军会犹豫自己的确认消息是否能到达。</li>
<li>于是，似乎我们还要让第一位将军再发送一条确认消息——“我收到了你的确认”。然而，如果这位信使被抓怎么办呢？</li>
<li>这样一来，是不是我们还要第二位将军发送一个“确认收到你的确认”的信息。</li>
</ol>
<p>靠，于是你会发现，这事情很快就发展成为不管发送多少个确认消息，都没有办法来保证两位将军有足够的自信自己的信使没有被敌军捕获。</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/3.jpg" alt=""></p>
<p><strong>这个问题是无解的。</strong></p>
<p>两个将军问题和它的无解证明首先由E.A.Akkoyunlu,K.Ekanadham和R.V.Huber于1975年在《一些限制与折衷的网络通信设计》一文中发表，就在这篇文章的第73页中一段描述两个黑帮之间的通信中被阐明。 1978年，在Jim Gray的《数据库操作系统注意事项》一书中（从第465页开始）被命名为两个将军悖论。作为两个将军问题的定义和无解性的证明的来源，这一参考被广泛提及。</p>
<p>这个实验意在阐明：<strong>试图通过建立在一个不可靠的连接上的交流来协调一项行动的隐患和设计上的巨大挑战。</strong></p>
<p>从工程上来说，一个解决两个将军问题的实际方法是使用一个能够承受通信信道不可靠性的方案，并不试图去消除这个不可靠性，但要将不可靠性削减到一个可以接受的程度。<br>比如，第一位将军排出了100位信使并预计他们都被捕的可能性很小。在这种情况下，不管第二位将军是否会攻击或者受到任何消息，第一位将军都会进行攻击。另外，第一位将军可以发送一个消息流，而第二位将军可以对其中的每一条消息发送一个确认消息，这样如果每条消息都被接收到，两位将军会感觉更好。<br>然而我们可以从证明中看出，他们俩都不能肯定这个攻击是可以协调的。他们没有算法可用（比如，收到4条以上的消息就攻击）能够确保防止仅有一方攻击。再者，第一位将军还可以为每条消息编号，说这是1号，2号……直到n号。这种方法能让第二位将军知道通信信道到底有多可靠，并且返回合适的数量的消息来确保最后一条消息被接收到。如果信道是可靠的话，只要一条消息就行了，其余的就帮不上什么忙了。最后一条和第一条消息丢失的概率是相等的。</p>
<p>两将军问题可以扩展成更变态的<strong>拜占庭将军问题 (Byzantine Generals Problem)</strong>，其故事背景是这样的：<br>拜占庭位于现在土耳其的伊斯坦布尔，是东罗马帝国的首都。由于当时拜占庭罗马帝国国土辽阔，为了防御目的，因此每个军队都分隔很远，将军与将军之间只能靠信差传消息。 在战争的时候，拜占庭军队内所有将军必需达成一致的共识，决定是否有赢的机会才去攻打敌人的阵营。但是，军队可能有叛徒和敌军间谍，这些叛徒将军们会扰乱或左右决策的过程。这时候，在已知有成员谋反的情况下，其余忠诚的将军在不受叛徒的影响下如何达成一致的协议，这就是拜占庭将军问题。</p>
<h2 id="Paxos算法"><a href="#Paxos算法" class="headerlink" title="Paxos算法"></a>Paxos算法</h2><p><a href="http://en.wikipedia.org/wiki/Paxos_(computer_science" target="_blank" rel="external">Wikipedia上的各种Paxos算法</a>)的描述非常详细，大家可以去围观一下。</p>
<p>Paxos 算法解决的问题是在一个可能发生上述异常的分布式系统中如何就某个值达成一致，保证不论发生以上任何异常，都不会破坏决议的一致性。<br>一个典型的场景是，在一个分布式数据库系统中，如果各节点的初始状态一致，每个节点都执行相同的操作序列，那么他们最后能得到一个一致的状态。为保证每个节点执行相同的命令序列，需要在每一条指令上执行一个「一致性算法」以保证每个节点看到的指令一致。一个通用的一致性算法可以应用在许多场景中，是分布式计算中的重要问题。从20世纪80年代起对于一致性算法的研究就没有停止过。</p>
<p><strong>Notes</strong>：Paxos算法是莱斯利·兰伯特（Leslie Lamport，就是 LaTeX 中的”La”，此人现在在微软研究院）于1990年提出的一种基于消息传递的一致性算法。由于算法难以理解起初并没有引起人们的重视，使Lamport在八年后1998年重新发表到ACM Transactions on Computer Systems上（<a href="http://research.microsoft.com/users/lamport/pubs/lamport-paxos.pdf" target="_blank" rel="external">The Part-Time Parliament</a>）。即便如此paxos算法还是没有得到重视，2001年Lamport 觉得同行无法接受他的幽默感，于是用容易接受的方法重新表述了一遍（Paxos Made Simple）。可见Lamport对Paxos算法情有独钟。近几年Paxos算法的普遍使用也证明它在分布式一致性算法中的重要地位。2006年Google的三篇论文初现“云”的端倪，其中的Chubby Lock服务使用Paxos作为Chubby Cell中的一致性算法，Paxos的人气从此一路狂飙。（Lamport 本人在 他的blog 中描写了他用9年时间发表这个算法的前前后后）</p>
<p><strong>注</strong>：Amazon的AWS中，所有的云服务都基于一个ALF（Async Lock Framework）的框架实现的，这个ALF用的就是Paxos算法。我在Amazon的时候，看内部的分享视频时，设计者在内部的Principle Talk里说他参考了ZooKeeper的方法，但他用了另一种比ZooKeeper更易读的方式实现了这个算法。</p>
<p>简单说来，Paxos的目的是让整个集群的结点对某个值的变更达成一致。Paxos算法基本上来说是个民主选举的算法——大多数的决定会成个整个集群的统一决定。任何一个点都可以提出要修改某个数据的提案，是否通过这个提案取决于这个集群中是否有超过半数的结点同意（所以Paxos算法需要集群中的结点是单数）。</p>
<p>这个算法有两个阶段（假设这个有三个结点：A，B，C）：</p>
<ul>
<li><p>第一阶段：Prepare阶段<br>A把申请修改的请求Prepare Request发给所有的结点A，B，C。注意，Paxos算法会有一个Sequence Number（你可以认为是一个提案号，这个数不断递增，而且是唯一的，也就是说A和B不可能有相同的提案号），这个提案号会和修改请求一同发出，任何结点在“Prepare阶段”时都会拒绝其值小于当前提案号的请求。所以，结点A在向所有结点申请修改请求的时候，需要带一个提案号，越新的提案，这个提案号就越是是最大的。<br>如果接收结点收到的提案号n大于其它结点发过来的提案号，这个结点会回应Yes（本结点上最新的被批准提案号），并保证不接收其它&lt;n的提案。这样一来，结点上在Prepare阶段里总是会对最新的提案做承诺。<br>优化：在上述 prepare 过程中，如果任何一个结点发现存在一个更高编号的提案，则需要通知 提案人，提醒其中断这次提案。</p>
</li>
<li><p>第二阶段：Accept阶段<br>如果提案者A收到了超过半数的结点返回的Yes，然后他就会向所有的结点发布Accept Request（同样，需要带上提案号n），如果没有超过半数的话，那就返回失败。<br>当结点们收到了Accept Request后，如果对于接收的结点来说，n是最大的了，那么，它就会修改这个值，如果发现自己有一个更大的提案号，那么，结点就会拒绝修改。</p>
</li>
</ul>
<p>我们可以看以，这似乎就是一个“两段提交”的优化。其实，2<strong>PC/3PC都是分布式一致性算法的残次版本，Google Chubby的作者Mike Burrows说过这个世界上只有一种一致性算法，那就是Paxos，其它的算法都是残次品。</strong></p>
<p>我们还可以看到：对于同一个值的在不同结点的修改提案就算是在接收方被乱序收到也是没有问题的。</p>
<p>关于一些实例，你可以看一下Wikipedia中文中的“<a href="http://zh.wikipedia.org/zh/Paxos%E7%AE%97%E6%B3%95#.E5.AE.9E.E4.BE.8B" target="_blank" rel="external">Paxos样例</a>”一节，我在这里就不再多说了。对于Paxos算法中的一些异常示例，大家可以自己推导一下。你会发现基本上来说只要保证有半数以上的结点存活，就没有什么问题。</p>
<p>多说一下，自从Lamport在1998年发表Paxos算法后，对Paxos的各种改进工作就从未停止，其中动作最大的莫过于2005年发表的<a href="http://research.microsoft.com/apps/pubs/default.aspx?id=64624" target="_blank" rel="external">Fast Paxos</a>。无论何种改进，其重点依然是在消息延迟与性能、吞吐量之间作出各种权衡。为了容易地从概念上区分二者，称前者Classic Paxos，改进后的后者为Fast Paxos。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>下图来自：Google App Engine的co-founder Ryan Barrett在2009年的google i/o上的演讲《<a href="http://snarfed.org/transactions_across_datacenters_io.html" target="_blank" rel="external">Transaction Across DataCenter</a>》（视频： <a href="http://www.youtube.com/watch?v=srOgpXECblk）" target="_blank" rel="external">http://www.youtube.com/watch?v=srOgpXECblk）</a></p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/5.jpg" alt=""></p>
<p>前面，我们说过，要想让数据有高可用性，就需要冗余数据写多份。写多份的问题会带来一致性的问题，而一致性的问题又会带来性能问题。从上图我们可以看到，我们基本上来说不可以让所有的项都绿起来，这就是著名的<strong>CAP理论：一致性，可用性，分区容忍性，你只可能要其中的两个。</strong></p>
<h1 id="NWR模型"><a href="#NWR模型" class="headerlink" title="NWR模型"></a>NWR模型</h1><p>最后我还想提一下<strong>Amazon Dynamo的NWR模型。这个NWR模型把CAP的选择权交给了用户，让用户自己的选择你的CAP中的哪两个。</strong></p>
<p>所谓NWR模型。N代表N个备份，W代表要写入至少W份才认为成功，R表示至少读取R个备份。配置的时候要求<strong>W+R &gt; N</strong>。 因为W+R &gt; N， 所以 R &gt; N-W 这个是什么意思呢？就是读取的份数一定要比总备份数减去确保写成功的倍数的差值要大。</p>
<p>也就是说，每次读取，都至少读取到一个最新的版本。从而不会读到一份旧数据。当我们需要高可写的环境的时候，我们可以配置W = 1 如果N=3 那么R = 3。 这个时候只要写任何节点成功就认为成功，但是读的时候必须从所有的节点都读出数据。如果我们要求读的高效率，我们可以配置 W=N R=1。这个时候任何一个节点读成功就认为成功，但是写的时候必须写所有三个节点成功才认为成功。</p>
<p>NWR模型的一些设置会造成脏数据的问题，因为这很明显不是像Paxos一样是一个强一致的东西，所以，可能每次的读写操作都不在同一个结点上，于是会出现一些结点上的数据并不是最新版本，但却进行了最新的操作。</p>
<p>所以，Amazon Dynamo引了数据版本的设计。也就是说，如果你读出来数据的版本是v1，当你计算完成后要回填数据后，却发现数据的版本号已经被人更新成了v2，那么服务器就会拒绝你。版本这个事就像“乐观锁”一样。</p>
<p>但是，对于分布式和NWR模型来说，版本也会有恶梦的时候——就是版本冲的问题，比如：我们设置了N=3 W=1，如果A结点上接受了一个值，版本由v1 -&gt; v2，但还没有来得及同步到结点B上（异步的，应该W=1，写一份就算成功），B结点上还是v1版本，此时，B结点接到写请求，按道理来说，他需要拒绝掉，但是他一方面并不知道别的结点已经被更新到v2，另一方面他也无法拒绝，因为W=1，所以写一分就成功了。于是，出现了严重的版本冲突。</p>
<p>Amazon的Dynamo把版本冲突这个问题巧妙地回避掉了——版本冲这个事交给用户自己来处理。</p>
<p>于是，Dynamo引入了Vector Clock（矢量钟？!）这个设计。这个设计让每个结点各自记录自己的版本信息，也就是说，对于同一个数据，需要记录两个事：1）谁更新的我，2）我的版本号是什么。</p>
<p>下面，我们来看一个操作序列：</p>
<ol>
<li>一个写请求，第一次被节点A处理了。节点A会增加一个版本信息(A，1)。我们把这个时候的数据记做D1(A，1)。 然后另外一个对同样key的请求还是被A处理了于是有D2(A，2)。这个时候，D2是可以覆盖D1的，不会有冲突产生。</li>
<li>现在我们假设D2传播到了所有节点(B和C)，B和C收到的数据不是从客户产生的，而是别人复制给他们的，所以他们不产生新的版本信息，所以现在B和C所持有的数据还是D2(A，2)。于是A，B，C上的数据及其版本号都是一样的。</li>
<li>如果我们有一个新的写请求到了B结点上，于是B结点生成数据D3(A,2; B,1)，意思是：数据D全局版本号为3，A升了两新，B升了一次。这不就是所谓的代码版本的log么？</li>
<li>如果D3没有传播到C的时候又一个请求被C处理了，于是，以C结点上的数据是D4(A,2; C,1)。</li>
<li>好，最精彩的事情来了：如果这个时候来了一个读请求，我们要记得，我们的W=1 那么R=N=3，所以R会从所有三个节点上读，此时，他会读到三个版本：<ul>
<li>A结点：D2(A,2)</li>
<li>B结点：D3(A,2;  B,1);</li>
<li>C结点：D4(A,2;  C,1)</li>
</ul>
</li>
<li>这个时候可以判断出，D2已经是旧版本（已经包含在D3/D4中），可以舍弃。</li>
<li>但是D3和D4是明显的版本冲突。于是，交给调用方自己去做版本冲突处理。就像源代码版本管理一样。</li>
</ol>
<p>很明显，上述的Dynamo的配置用的是CAP里的A和P。</p>
<p>我非常推大家都去看看这篇论文：《<a href="http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/decandia07dynamo.pdf" target="_blank" rel="external">Dynamo：Amazon’s Highly Available Key-Value Store</a>》，如果英文痛苦，你可以看看<a href="http://vdisk.weibo.com/s/AKRQZMLLc1ol" target="_blank" rel="external">译文</a>（译者不详）。</p>
<p>本文转载自：<a href="http://coolshell.cn/articles/10910.html" target="_blank" rel="external">酷 壳</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;分布式事务及应用场景&quot;&gt;&lt;a href=&quot;#分布式事务及应用场景&quot; class=&quot;headerlink&quot; title=&quot;分布式事务及应用场景&quot;&gt;&lt;/a&gt;分布式事务及应用场景&lt;/h1&gt;&lt;p&gt;当我们在生产线上用一台服务器来提供数据服务的时候，我会遇到如下的两个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一台服务器的性能不足以提供足够的能力服务于所有的网络请求。&lt;/li&gt;
&lt;li&gt;我们总是害怕我们的这台服务器停机，造成服务不可用或是数据丢失。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;于是我们不得不对我们的服务器进行扩展，加入更多的机器来分担性能上的问题，以及来解决单点故障问题。&lt;br&gt;通常，我们会通过两种手段来扩展我们的数据服务：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;数据分区&lt;/strong&gt;：就是把数据分块放在不同的服务器上（如：uid % 16，一致性哈希等）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据镜像&lt;/strong&gt;：让所有的服务器都有相同的数据，提供相当的服务。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;$y^i$&lt;/p&gt;
    
    </summary>
    
      <category term="分布式" scheme="http://www.javacn.top/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="转载" scheme="http://www.javacn.top/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="分布式" scheme="http://www.javacn.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="事务" scheme="http://www.javacn.top/tags/%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>10种排序算法</title>
    <link href="http://www.javacn.top/20170502/10_algorithm_of_sort/"/>
    <id>http://www.javacn.top/20170502/10_algorithm_of_sort/</id>
    <published>2017-05-02T02:52:16.000Z</published>
    <updated>2017-05-03T03:12:30.320Z</updated>
    
    <content type="html"><![CDATA[<p>排序算法有很多，所以在特定情景中使用哪一种算法很重要。为了选择合适的算法，可以按照建议的顺序考虑以下标准： </p>
<ol>
<li>执行时间 </li>
<li>存储空间</li>
<li>编程工作 </li>
</ol>
<p>对于数据量较小的情形，①、②差别不大，主要考虑③；而对于数据量大的，①为首要。 </p>
<p>主要排序法有： </p>
<ul>
<li>冒泡（Bubble）排序——相邻交换</li>
<li>选择排序——每次最小/大排在相应的位置</li>
<li>插入排序——将下一个插入已排好的序列中</li>
<li>壳（Shell）排序——缩小增量</li>
<li>归并排序</li>
<li>快速排序</li>
<li>堆排序</li>
<li>拓扑排序</li>
<li>锦标赛排序</li>
<li>基数排序 </li>
</ul>
<a id="more"></a>
<h1 id="冒泡（Bubble）排序"><a href="#冒泡（Bubble）排序" class="headerlink" title="冒泡（Bubble）排序"></a>冒泡（Bubble）排序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 冒泡排序</div><div class="line">     * 比较相邻的元素。如果第一个比第二个大，就交换他们两个。  </div><div class="line">     * 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。  </div><div class="line">     * 针对所有的元素重复以上的步骤，除了最后一个。</div><div class="line">     * 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。 </div><div class="line">     * <span class="doctag">@param</span> numbers 需要排序的整型数组</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] numbers)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> size = numbers.length;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size-<span class="number">1</span>; i ++)</div><div class="line">        &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ;j &lt; size-<span class="number">1</span>-i ; j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(numbers[j] &gt; numbers[j+<span class="number">1</span>])  <span class="comment">//交换两数位置</span></div><div class="line">            &#123;</div><div class="line">            temp = numbers[j];</div><div class="line">            numbers[j] = numbers[j+<span class="number">1</span>];</div><div class="line">            numbers[j+<span class="number">1</span>] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>效率 O（n²）,适用于排序小列表。</strong> </p>
<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p><strong>基本思想：</strong>在要排序的一组数中，选出最小的一个数与第一个位置的数交换；然后在剩下的数当中再找最小的与第二个位置的数交换，如此循环到倒数第二个数和最后一个数比较为止。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 选择排序算法</div><div class="line">     * 在未排序序列中找到最小元素，存放到排序序列的起始位置  </div><div class="line">     * 再从剩余未排序元素中继续寻找最小元素，然后放到排序序列末尾。 </div><div class="line">     * 以此类推，直到所有元素均排序完毕。 </div><div class="line">     * <span class="doctag">@param</span> numbers</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] numbers)</span></span></div><div class="line">    &#123;</div><div class="line">    <span class="keyword">int</span> size = numbers.length; <span class="comment">//数组长度</span></div><div class="line">    <span class="keyword">int</span> temp = <span class="number">0</span> ; <span class="comment">//中间变量</span></div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size ; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> k = i;   <span class="comment">//待确定的位置</span></div><div class="line">        <span class="comment">//选择出应该在第i个位置的数</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = size -<span class="number">1</span> ; j &gt; i ; j--)</div><div class="line">        &#123;</div><div class="line">        <span class="keyword">if</span>(numbers[j] &lt; numbers[k])</div><div class="line">        &#123;</div><div class="line">            k = j;</div><div class="line">        &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//交换两个数</span></div><div class="line">        temp = numbers[i];</div><div class="line">        numbers[i] = numbers[k];</div><div class="line">        numbers[k] = temp;</div><div class="line">    &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>效率O（n²），适用于排序小的列表。 </strong></p>
<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p><strong>基本思想：</strong>每步将一个待排序的记录，按其顺序码大小插入到前面已经排序的字序列的合适位置（从后向前找到合适位置后），直到全部插入排序完为止。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**  </span></div><div class="line">     * 插入排序</div><div class="line">     * </div><div class="line">     * 从第一个元素开始，该元素可以认为已经被排序</div><div class="line">     * 取出下一个元素，在已经排序的元素序列中从后向前扫描 </div><div class="line">     * 如果该元素（已排序）大于新元素，将该元素移到下一位置  </div><div class="line">     * 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置  </div><div class="line">     * 将新元素插入到该位置中  </div><div class="line">     * 重复步骤2  </div><div class="line">     * <span class="doctag">@param</span> numbers  待排序数组</div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] numbers)</span></span></div><div class="line">    &#123;</div><div class="line">    <span class="keyword">int</span> size = numbers.length;</div><div class="line">    <span class="keyword">int</span> temp = <span class="number">0</span> ;</div><div class="line">    <span class="keyword">int</span> j =  <span class="number">0</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size ; i++)</div><div class="line">    &#123;</div><div class="line">        temp = numbers[i];</div><div class="line">        <span class="comment">//假如temp比前面的值小，则将前面的值后移</span></div><div class="line">        <span class="keyword">for</span>(j = i ; j &gt; <span class="number">0</span> &amp;&amp; temp &lt; numbers[j-<span class="number">1</span>] ; j --)</div><div class="line">        &#123;</div><div class="line">        numbers[j] = numbers[j-<span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        numbers[j] = temp;</div><div class="line">    &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>最佳效率O（n）；最糟效率O（n²）与冒泡、选择相同，适用于排序小列表 </strong><br><strong>若列表基本有序，则插入排序比冒泡、选择更有效率。</strong> </p>
<h1 id="壳（Shell）排序——缩小增量排序"><a href="#壳（Shell）排序——缩小增量排序" class="headerlink" title="壳（Shell）排序——缩小增量排序"></a>壳（Shell）排序——缩小增量排序</h1><p><strong>基本思想：</strong>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</p>
<p><strong>操作方法：</strong></p>
<ol>
<li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；</li>
<li>按增量序列个数k，对序列进行k 趟排序；</li>
<li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li>
</ol>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/10%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/1.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**希尔排序的原理:根据需求，如果你想要结果从大到小排列，它会首先将数组进行分组，然后将较大值移到前面，较小值</span></div><div class="line"> * 移到后面，最后将整个数组进行插入排序，这样比起一开始就用插入排序减少了数据交换和移动的次数，可以说希尔排序是加强</div><div class="line"> * 版的插入排序</div><div class="line"> * 拿数组5, 2, 8, 9, 1, 3，4来说，数组长度为7，当increment为3时，数组分为两个序列</div><div class="line"> * 5，2，8和9，1，3，4，第一次排序，9和5比较，1和2比较，3和8比较，4和比其下标值小increment的数组值相比较</div><div class="line"> * 此例子是按照从大到小排列，所以大的会排在前面，第一次排序后数组为9, 2, 8, 5, 1, 3，4</div><div class="line"> * 第一次后increment的值变为3/2=1,此时对数组进行插入排序，</div><div class="line"> *实现数组从大到小排</div><div class="line"> */</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] data)</span> </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</div><div class="line">        <span class="comment">//每次将步长缩短为原来的一半</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> increment = data.length / <span class="number">2</span>; increment &gt; <span class="number">0</span>; increment /= <span class="number">2</span>)</div><div class="line">        &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = increment; i &lt; data.length; i++) </div><div class="line">        &#123;</div><div class="line">            temp = data[i];</div><div class="line">            <span class="keyword">for</span> (j = i; j &gt;= increment; j -= increment) </div><div class="line">            &#123;</div><div class="line">            <span class="keyword">if</span>(temp &gt; data[j - increment])<span class="comment">//如想从小到大排只需修改这里</span></div><div class="line">            &#123;   </div><div class="line">                data[j] = data[j - increment];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            &#125; </div><div class="line">            data[j] = temp;</div><div class="line">        &#125;</div><div class="line">    </div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>适用于排序小列表。</strong><br>效率估计 <strong>O（nlog2^n）~O（n^1.5）</strong> ，取决于增量值的最初大小。建议使用质数作为增量值，因为如果增量值是2的幂，则在下一个通道中会再次比较相同的元素。 </p>
<p>壳（Shell）排序改进了插入排序，减少了比较的次数。是不稳定的排序，因为排序过程中元素可能会前后跳跃。 </p>
<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p><strong>基本思想：</strong> 归并（Merge）排序法是将两个（或两个以上）有序表合并成一个新的有序表，即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列。</p>
<p>合并方法：</p>
<p>设r[i…n]由两个有序子表r[i…m]和r[m+1…n]组成，两个子表长度分别为n-i +1、n-m。</p>
<ol>
<li>j=m+1；k=i；i=i; //置两个子表的起始下标及辅助数组的起始下标</li>
<li>若i&gt;m 或j&gt;n，转⑷ //其中一个子表已合并完，比较选取结束</li>
<li>//选取r[i]和r[j]较小的存入辅助数组rf<br>如果r[i]&lt;r[j]，rf[k]=r[i]； i++； k++； 转⑵<br>否则，rf[k]=r[j]； j++； k++； 转⑵</li>
<li>//将尚未处理完的子表中元素存入rf<br>如果i&lt;=m，将r[i…m]存入rf[k…n] //前一子表非空<br>如果j&lt;=n ,  将r[j…n] 存入rf[k…n] //后一子表非空</li>
<li>合并结束。</li>
</ol>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/10%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/2.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 归并排序</div><div class="line">     * 简介:将两个（或两个以上）有序表合并成一个新的有序表 即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列</div><div class="line">     * 时间复杂度为O(nlogn)</div><div class="line">     * 稳定排序方式</div><div class="line">     * <span class="doctag">@param</span> nums 待排序数组</div><div class="line">     * <span class="doctag">@return</span> 输出有序数组</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> low, <span class="keyword">int</span> high) &#123;</div><div class="line">        <span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (low &lt; high) &#123;</div><div class="line">            <span class="comment">// 左边</span></div><div class="line">            sort(nums, low, mid);</div><div class="line">            <span class="comment">// 右边</span></div><div class="line">            sort(nums, mid + <span class="number">1</span>, high);</div><div class="line">            <span class="comment">// 左右归并</span></div><div class="line">            merge(nums, low, mid, high);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> nums;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将数组中low到high位置的数进行排序</div><div class="line">     * <span class="doctag">@param</span> nums 待排序数组</div><div class="line">     * <span class="doctag">@param</span> low 待排的开始位置</div><div class="line">     * <span class="doctag">@param</span> mid 待排中间位置</div><div class="line">     * <span class="doctag">@param</span> high 待排结束位置</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[high - low + <span class="number">1</span>];</div><div class="line">        <span class="keyword">int</span> i = low;<span class="comment">// 左指针</span></div><div class="line">        <span class="keyword">int</span> j = mid + <span class="number">1</span>;<span class="comment">// 右指针</span></div><div class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 把较小的数先移到新数组中</span></div><div class="line">        <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= high) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[i] &lt; nums[j]) &#123;</div><div class="line">                temp[k++] = nums[i++];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                temp[k++] = nums[j++];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 把左边剩余的数移入数组</span></div><div class="line">        <span class="keyword">while</span> (i &lt;= mid) &#123;</div><div class="line">            temp[k++] = nums[i++];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 把右边边剩余的数移入数组</span></div><div class="line">        <span class="keyword">while</span> (j &lt;= high) &#123;</div><div class="line">            temp[k++] = nums[j++];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 把新数组中的数覆盖nums数组</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k2 = <span class="number">0</span>; k2 &lt; temp.length; k2++) &#123;</div><div class="line">            nums[k2 + low] = temp[k2];</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>效率O（nlogn），归并的最佳、平均和最糟用例效率之间没有差异。</strong><br><strong>适用于排序大列表，基于分治法。 </strong></p>
<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p><strong><br>基本思想：</strong>选择一个基准元素,通常选择第一个元素或者最后一个元素,通过一趟扫描，将待排序列分成两部分,一部分比基准元素小,一部分大于等于基准元素,此时基准元素在其排好序后的正确位置,然后再用同样的方法递归地排序划分的两部分。</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/10%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/5.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">     * 归并排序</div><div class="line">     * 简介:将两个（或两个以上）有序表合并成一个新的有序表 即把待排序序列分为若干个子序列，每个子序列是有序的。然后再把有序子序列合并为整体有序序列</div><div class="line">     * 时间复杂度为O(nlogn)</div><div class="line">     * 稳定排序方式</div><div class="line">     * <span class="doctag">@param</span> nums 待排序数组</div><div class="line">     * <span class="doctag">@return</span> 输出有序数组</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> low, <span class="keyword">int</span> high) &#123;</div><div class="line">        <span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</div><div class="line">        <span class="keyword">if</span> (low &lt; high) &#123;</div><div class="line">            <span class="comment">// 左边</span></div><div class="line">            sort(nums, low, mid);</div><div class="line">            <span class="comment">// 右边</span></div><div class="line">            sort(nums, mid + <span class="number">1</span>, high);</div><div class="line">            <span class="comment">// 左右归并</span></div><div class="line">            merge(nums, low, mid, high);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> nums;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将数组中low到high位置的数进行排序</div><div class="line">     * <span class="doctag">@param</span> nums 待排序数组</div><div class="line">     * <span class="doctag">@param</span> low 待排的开始位置</div><div class="line">     * <span class="doctag">@param</span> mid 待排中间位置</div><div class="line">     * <span class="doctag">@param</span> high 待排结束位置</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[high - low + <span class="number">1</span>];</div><div class="line">        <span class="keyword">int</span> i = low;<span class="comment">// 左指针</span></div><div class="line">        <span class="keyword">int</span> j = mid + <span class="number">1</span>;<span class="comment">// 右指针</span></div><div class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 把较小的数先移到新数组中</span></div><div class="line">        <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= high) &#123;</div><div class="line">            <span class="keyword">if</span> (nums[i] &lt; nums[j]) &#123;</div><div class="line">                temp[k++] = nums[i++];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                temp[k++] = nums[j++];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 把左边剩余的数移入数组</span></div><div class="line">        <span class="keyword">while</span> (i &lt;= mid) &#123;</div><div class="line">            temp[k++] = nums[i++];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 把右边边剩余的数移入数组</span></div><div class="line">        <span class="keyword">while</span> (j &lt;= high) &#123;</div><div class="line">            temp[k++] = nums[j++];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 把新数组中的数覆盖nums数组</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k2 = <span class="number">0</span>; k2 &lt; temp.length; k2++) &#123;</div><div class="line">            nums[k2 + low] = temp[k2];</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>平均效率O（nlogn），适用于排序大列表。 </strong><br>此算法的总时间取决于枢纽值的位置；选择第一个元素作为枢纽，可能导致O（n²）的最糟用例效率。若数基本有序，效率反而最差。选项中间值作为枢纽，效率是O（nlogn）。<br><strong>基于分治法。 </strong></p>
<h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><p><strong>基本思想：</strong> 堆排序是一种树形选择排序，是对直接选择排序的有效改进。<br><strong>堆的定义下：</strong> 具有n个元素的序列 （h1,h2,…,hn),当且仅当满足（hi&gt;=h2i,hi&gt;=2i+1）或（hi&lt;=h2i,hi&lt;=2i+1） (i=1,2,…,n/2)时称之为堆。在这里只讨论满足前者条件的堆。由堆的定义可以看出，堆顶元素（即第一个元素）必为最大项（大顶堆）。完全二 叉树可以很直观地表示堆的结构。堆顶为根，其它为左子树、右子树。</p>
<p><strong>思想:</strong>初始时把要排序的数的序列看作是一棵顺序存储的二叉树，调整它们的存储序，使之成为一个 堆，这时堆的根节点的数最大。然后将根节点与堆的最后一个节点交换。然后对前面(n-1)个数重新调整使之成为堆。依此类推，直到只有两个节点的堆，并对它们作交换，最后得到有n个节点的有序序列。从算法描述来看，堆排序需要两个过程，一是建立堆，二是堆顶与堆的最后一个元素交换位置。所以堆排序有两个函数组成。一是建堆的渗透函数，二是反复调用渗透函数实现排序的函数。</p>
<p><strong>实例</strong></p>
<ul>
<li>初始序列：46,79,56,38,40,84</li>
<li>建堆：<br><img src="http://op06ugvox.bkt.clouddn.com/hexo/10%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/3.png" alt=""></li>
<li><p>交换，从堆中踢出最大数:<br><img src="http://op06ugvox.bkt.clouddn.com/hexo/10%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/4.png" alt=""></p>
</li>
<li><p>依次类推：最后堆中剩余的最后两个结点交换，踢出一个，排序完成。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] a=&#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>,<span class="number">78</span>,<span class="number">34</span>,<span class="number">12</span>,<span class="number">64</span>&#125;;</div><div class="line">        <span class="keyword">int</span> arrayLength=a.length;  </div><div class="line">        <span class="comment">//循环建堆  </span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arrayLength-<span class="number">1</span>;i++)&#123;  </div><div class="line">            <span class="comment">//建堆  </span></div><div class="line">            buildMaxHeap(a,arrayLength-<span class="number">1</span>-i);  </div><div class="line">            <span class="comment">//交换堆顶和最后一个元素  </span></div><div class="line">            swap(a,<span class="number">0</span>,arrayLength-<span class="number">1</span>-i);  </div><div class="line">            System.out.println(Arrays.toString(a));  </div><div class="line">        &#125;  </div><div class="line">    &#125;</div><div class="line">    <span class="comment">//对data数组从0到lastIndex建大顶堆</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildMaxHeap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> lastIndex)</span></span>&#123;</div><div class="line">         <span class="comment">//从lastIndex处节点（最后一个节点）的父节点开始 </span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=(lastIndex-<span class="number">1</span>)/<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</div><div class="line">            <span class="comment">//k保存正在判断的节点 </span></div><div class="line">            <span class="keyword">int</span> k=i;</div><div class="line">            <span class="comment">//如果当前k节点的子节点存在  </span></div><div class="line">            <span class="keyword">while</span>(k*<span class="number">2</span>+<span class="number">1</span>&lt;=lastIndex)&#123;</div><div class="line">                <span class="comment">//k节点的左子节点的索引 </span></div><div class="line">                <span class="keyword">int</span> biggerIndex=<span class="number">2</span>*k+<span class="number">1</span>;</div><div class="line">                <span class="comment">//如果biggerIndex小于lastIndex，即biggerIndex+1代表的k节点的右子节点存在</span></div><div class="line">                <span class="keyword">if</span>(biggerIndex&lt;lastIndex)&#123;  </div><div class="line">                    <span class="comment">//若果右子节点的值较大  </span></div><div class="line">                    <span class="keyword">if</span>(data[biggerIndex]&lt;data[biggerIndex+<span class="number">1</span>])&#123;  </div><div class="line">                        <span class="comment">//biggerIndex总是记录较大子节点的索引  </span></div><div class="line">                        biggerIndex++;  </div><div class="line">                    &#125;  </div><div class="line">                &#125;  </div><div class="line">                <span class="comment">//如果k节点的值小于其较大的子节点的值  </span></div><div class="line">                <span class="keyword">if</span>(data[k]&lt;data[biggerIndex])&#123;  </div><div class="line">                    <span class="comment">//交换他们  </span></div><div class="line">                    swap(data,k,biggerIndex);  </div><div class="line">                    <span class="comment">//将biggerIndex赋予k，开始while循环的下一次循环，重新保证k节点的值大于其左右子节点的值  </span></div><div class="line">                    k=biggerIndex;  </div><div class="line">                &#125;<span class="keyword">else</span>&#123;  </div><div class="line">                    <span class="keyword">break</span>;  </div><div class="line">                &#125;  </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//交换</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] data, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;  </div><div class="line">        <span class="keyword">int</span> tmp=data[i];  </div><div class="line">        data[i]=data[j];  </div><div class="line">        data[j]=tmp;  </div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>堆排序的时间，主要由建立初始堆和反复重建堆这两部分的时间开销构成，它们均是通过调用Heapify实现的。 </p>
<p>堆排序的最坏时间复杂度为O(nlgn)。堆排序的平均性能较接近于最坏性能。<br>由于建初始堆所需的比较次数较多，所以堆排序不适宜于记录数较少的文件。<br>堆排序是就地排序，辅助空间为O(1)，它是不稳定的排序方法。   </p>
<p>堆排序与直接插入排序的区别: </p>
<ul>
<li>直接选择排序中，为了从R[1..n]中选出关键字最小的记录，必须进行n-1次比较，然后在R[2..n]中选出关键字最小的记录，又需要做n-2次比较。事实上，后面的n-2次比较中，有许多比较可能在前面的n-1次比较中已经做过，但由于前一趟排序时未保留这些比较结果，所以后一趟排序时又重复执行了这些比较操作。 </li>
<li>堆排序可通过树形结构保存部分比较结果，可减少比较次数。 </li>
</ul>
<h1 id="拓扑排序-这个较复杂，开文另说"><a href="#拓扑排序-这个较复杂，开文另说" class="headerlink" title="拓扑排序 (这个较复杂，开文另说)"></a>拓扑排序 (这个较复杂，开文另说)</h1><p><strong>例 </strong>：学生选修课排课先后顺序 </p>
<p><strong>拓扑排序</strong>：把有向图中各顶点按照它们相互之间的优先关系排列成一个线性序列的过程。<br><strong>方法</strong>： </p>
<ul>
<li>在有向图中选一个没有前驱的顶点且输出 </li>
<li>从图中删除该顶点和所有以它为尾的弧 </li>
<li>重复上述两步，直至全部顶点均已输出（拓扑排序成功），或者当图中不存在无前驱的顶点（图中有回路）为止。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">TopologicalSort</span><span class="params">()</span><span class="comment">/*输出拓扑排序函数。若G无回路，则输出G的顶点的一个拓扑序列并返回OK，否则返回ERROR*/</span> </span>&#123;</div><div class="line">	<span class="keyword">int</span> indegree[ M];</div><div class="line">	<span class="keyword">int</span> i, k, j;</div><div class="line">	<span class="keyword">char</span> n;</div><div class="line">	<span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">	Stack thestack;</div><div class="line">	FindInDegree(G, indegree);<span class="comment">//对各顶点求入度indegree[0....num] </span></div><div class="line">	InitStack(thestack);<span class="comment">//初始化栈 </span></div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.num; i++)</div><div class="line">		Console.WriteLine(<span class="string">"结点"</span> + G.vertices[i].data + <span class="string">"的入度为"</span> + indegree[i]);</div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.num; i++) &#123;</div><div class="line">		<span class="keyword">if</span> (indegree[i] == <span class="number">0</span>)</div><div class="line">			Push(thestack.vertices[i]);</div><div class="line">	&#125;</div><div class="line">	Console.Write(<span class="string">"拓扑排序输出顺序为："</span>);</div><div class="line">	<span class="keyword">while</span> (thestack.Peek() != <span class="keyword">null</span>) &#123;</div><div class="line">		Pop(thestack.Peek());</div><div class="line">		j = locatevex(G, n);</div><div class="line">		<span class="keyword">if</span> (j == -<span class="number">2</span>) &#123;</div><div class="line">			Console.WriteLine(<span class="string">"发生错误，程序结束。"</span>);</div><div class="line">			exit();</div><div class="line">		&#125;</div><div class="line">		Console.Write(G.vertices[j].data);</div><div class="line">		count++;</div><div class="line">		<span class="keyword">for</span> (p = G.vertices[j].firstarc; p != NULL; p = p.nextarc) &#123;</div><div class="line">			k = p.adjvex;</div><div class="line">			<span class="keyword">if</span> (!(--indegree[k]))</div><div class="line">				Push(G.vertices[k]);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">if</span> (count &lt; G.num)</div><div class="line">		Cosole.WriteLine(<span class="string">"该图有环，出现错误，无法排序。"</span>);</div><div class="line">	<span class="keyword">else</span></div><div class="line">		Console.WriteLine(<span class="string">"排序成功。"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>算法的时间复杂度O（n+e）。</strong></p>
<h1 id="锦标赛排序"><a href="#锦标赛排序" class="headerlink" title="锦标赛排序"></a>锦标赛排序</h1><p><strong>例子</strong>：假如有N 人报名参加联赛，服务器记录下报名人数，并对这些人的战斗后的结果进行排序，决出前16强或者8强。</p>
<ol>
<li>建树：这里说的建树是建立一颗完全二叉树。当参加排序的数组不足2的N次幂，将其补足。直到满足建立一个完全二叉树</li>
<li>当某结点的比较对手的参选标志为“不再参选”，该结点自动升入双亲结点，此动作不计入排序码比较次数。每次比较出来的第一名都标记为不参赛。</li>
<li><p>最终结果是返回到原来的数组之中</p>
</li>
<li><p>堆排序。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 联赛系统分组</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> Administrator</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Competition</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Player改为玩家ID存储</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> Player[] playerArray;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Competition</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">int</span> playerNum = World.getIns().getCompetition().size();</div><div class="line">		Player[] playerArray = (Player[]) World.getIns().getCompetition()</div><div class="line">				.toArray();</div><div class="line">		TournamentSort(playerArray,playerNum);</div><div class="line">		</div><div class="line">		<span class="comment">//比赛后结果排序按照数组顺序，放入playerArray中</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 创建一颗树</div><div class="line">	 * <span class="doctag">@param</span> a</div><div class="line">	 * <span class="doctag">@param</span> n</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">TournamentSort</span><span class="params">(Player[] player, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">		TournamentPlayer[] tree;</div><div class="line"></div><div class="line">		<span class="keyword">int</span> bottomRowSize = nearestPowerOfTwo(n);<span class="comment">// 计算满足&gt;=n的2的最小次幂的数:</span></div><div class="line">		<span class="keyword">int</span> TreeSize = <span class="number">2</span> * bottomRowSize - <span class="number">1</span>;</div><div class="line">		<span class="keyword">int</span> loadindex = bottomRowSize - <span class="number">1</span>; <span class="comment">// 外结点开始位置：从根节点开始往下数</span></div><div class="line"></div><div class="line">		tree = <span class="keyword">new</span> TournamentPlayer[TreeSize];</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; TreeSize; i++) &#123;</div><div class="line">			tree[i] = <span class="keyword">new</span> TournamentPlayer();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">int</span> j = <span class="number">0</span>; <span class="comment">// 在数组player中取数据指针</span></div><div class="line"></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = loadindex; i &lt; TreeSize; i++) &#123; <span class="comment">// 复制数组数据到树的外结点中</span></div><div class="line">			tree[i].setIndex(i); <span class="comment">// 下标</span></div><div class="line">			<span class="keyword">if</span> (j &lt; n) &#123;</div><div class="line">				tree[i].setActive(<span class="number">1</span>);</div><div class="line">				tree[i].setData(player[j++]);</div><div class="line">			&#125; <span class="comment">// 复制数据</span></div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				tree[i].setActive(<span class="number">0</span>); <span class="comment">// 后面的结点为空的外结点</span></div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="comment">// System.out.println(tree[i].getIndex()+" "+ tree[i].getData());</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">int</span> i = loadindex; <span class="comment">// 进行初始比较寻找最小的项</span></div><div class="line"></div><div class="line">		<span class="keyword">while</span> (i != <span class="number">0</span>) &#123;</div><div class="line">			j = i;</div><div class="line">			<span class="keyword">while</span> (j &lt; <span class="number">2</span> * i) &#123; <span class="comment">// 处理各对比赛者</span></div><div class="line">				Player playerRight = tree[j].getData();</div><div class="line">				Player playerLeft = tree[j + <span class="number">1</span>].getData();</div><div class="line">				<span class="comment">// @ TODO 计算战斗，返回左边赢</span></div><div class="line">				<span class="keyword">boolean</span> isLeftWin = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">				<span class="keyword">if</span> (tree[j + <span class="number">1</span>].getActive() == <span class="number">0</span> || isLeftWin == <span class="keyword">true</span>)</div><div class="line">					tree[(j - <span class="number">1</span>) / <span class="number">2</span>] = tree[j]; <span class="comment">// 胜者送入双亲</span></div><div class="line">				<span class="keyword">else</span></div><div class="line">					tree[(j - <span class="number">1</span>) / <span class="number">2</span>] = tree[j + <span class="number">1</span>];</div><div class="line">				<span class="comment">// System.out.println(tree[(j - 1) / 2].getIndex()+" "+ tree[(j</span></div><div class="line">				<span class="comment">// - 1) / 2].getData());</span></div><div class="line"></div><div class="line">				j += <span class="number">2</span>; <span class="comment">// 下一对参加比较的项</span></div><div class="line">			&#125;</div><div class="line">			i = (i - <span class="number">1</span>) / <span class="number">2</span>; <span class="comment">// i退到双亲, 直到i=0为止</span></div><div class="line">			<span class="comment">// System.out.println(tree[(j - 1) / 2].getIndex() + " "</span></div><div class="line">			<span class="comment">// + tree[(j - 1) / 2].getData());</span></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123; <span class="comment">// 处理其它n-1元素</span></div><div class="line">			player[i] = tree[<span class="number">0</span>].getData(); <span class="comment">// 当前最小元素送数组a</span></div><div class="line">			System.out.println(player[i]);</div><div class="line"></div><div class="line">			tree[tree[<span class="number">0</span>].getIndex()].setActive(<span class="number">0</span>); <span class="comment">// 该元素相应外结点不再比赛</span></div><div class="line"></div><div class="line">			UpdateTree(tree, tree[<span class="number">0</span>].getIndex()); <span class="comment">// 从该处向上修改</span></div><div class="line"></div><div class="line">		&#125;</div><div class="line">		player[n - <span class="number">1</span>] = tree[<span class="number">0</span>].getData();</div><div class="line"></div><div class="line">		System.out.println(player[n - <span class="number">1</span>]);</div><div class="line">		<span class="comment">// return tree;</span></div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 每次比较出胜者之后，更新得到下一次比较的胜者</div><div class="line">	 * i是表中当前最小元素的下标, 即胜者。从它开始向上调整。</div><div class="line">	 * <span class="doctag">@param</span> tree</div><div class="line">	 * <span class="doctag">@param</span> i</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">UpdateTree</span><span class="params">(TournamentPlayer[] tree, <span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</div><div class="line">			tree[(i - <span class="number">1</span>) / <span class="number">2</span>] = tree[i - <span class="number">1</span>]; <span class="comment">// i为偶数, 对手为左结点</span></div><div class="line">		<span class="keyword">else</span></div><div class="line">			tree[(i - <span class="number">1</span>) / <span class="number">2</span>] = tree[i + <span class="number">1</span>]; <span class="comment">// i为奇数, 对手为右结点</span></div><div class="line">		<span class="comment">// 最小元素输出之后, 它的对手上升到父结点位置</span></div><div class="line">		i = (i - <span class="number">1</span>) / <span class="number">2</span>;</div><div class="line">		<span class="keyword">int</span> j = <span class="number">0</span>;<span class="comment">// i上升到双亲结点位置</span></div><div class="line">		<span class="keyword">while</span> (i != <span class="number">0</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</div><div class="line">				j = i - <span class="number">1</span>; <span class="comment">// 确定i的对手是左结点还是右结点</span></div><div class="line">			<span class="keyword">else</span></div><div class="line">				j = i + <span class="number">1</span>;</div><div class="line">			<span class="keyword">if</span> (tree[i].getActive() == <span class="number">0</span> || tree[j].getActive() == <span class="number">0</span>) &#123;<span class="comment">// 比赛对手中间有一个为空</span></div><div class="line">				<span class="keyword">if</span> (tree[i].getActive() != <span class="number">0</span>)</div><div class="line">					tree[(i - <span class="number">1</span>) / <span class="number">2</span>] = tree[i];</div><div class="line">				<span class="keyword">else</span></div><div class="line">					tree[(i - <span class="number">1</span>) / <span class="number">2</span>] = tree[j];</div><div class="line">			&#125;<span class="comment">// 非空者上升到双亲结点</span></div><div class="line">			<span class="keyword">else</span> <span class="comment">// 比赛对手都不为空</span></div><div class="line">			&#123;</div><div class="line">				Player playerRight = tree[i].getData();</div><div class="line">				Player playerLeft = tree[j].getData();</div><div class="line">				<span class="comment">// @ TODO 计算战斗，返回左边赢</span></div><div class="line">				<span class="keyword">boolean</span> isLeftWin = <span class="keyword">true</span>;</div><div class="line"></div><div class="line">				<span class="keyword">if</span> (isLeftWin)</div><div class="line">					tree[(i - <span class="number">1</span>) / <span class="number">2</span>] = tree[i];</div><div class="line">				<span class="keyword">else</span></div><div class="line">					tree[(i - <span class="number">1</span>) / <span class="number">2</span>] = tree[j]; <span class="comment">// 胜者上升到双亲结点</span></div><div class="line">				i = (i - <span class="number">1</span>) / <span class="number">2</span>; <span class="comment">// i上升到双亲结点</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 得到最接近且大于</div><div class="line">	 * number的2的N的方</div><div class="line">	 * <span class="doctag">@param</span> number</div><div class="line">	 * <span class="doctag">@return</span></div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nearestPowerOfTwo</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</div><div class="line">		--number;</div><div class="line">		number |= number &gt;&gt; <span class="number">16</span>;</div><div class="line">		number |= number &gt;&gt; <span class="number">8</span>;</div><div class="line">		number |= number &gt;&gt; <span class="number">4</span>;</div><div class="line">		number |= number &gt;&gt; <span class="number">2</span>;</div><div class="line">		number |= number &gt;&gt; <span class="number">1</span>;</div><div class="line">		++number;</div><div class="line">		<span class="keyword">return</span> number;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Player[] relust =  <span class="keyword">new</span> Competition().getPlayerArray();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> Player[] getPlayerArray() &#123;</div><div class="line">		<span class="keyword">return</span> playerArray;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPlayerArray</span><span class="params">(Player[] playerArray)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.playerArray = playerArray;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h1><p><strong>基本思想：</strong>将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后,数列就变成一个有序序列。</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/10%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/6.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 基数排序</div><div class="line"> * 平均O(d(n+r)),最好O(d(n+r)),最坏O(d(n+r));空间复杂度O(n+r);稳定;较复杂</div><div class="line"> * d为位数,r为分配后链表的个数</div><div class="line"> * <span class="doctag">@author</span> zeng</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RadixSort</span> </span>&#123;</div><div class="line"> </div><div class="line">    <span class="comment">//pos=1表示个位，pos=2表示十位</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNumInPos</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> pos)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> tmp = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos - <span class="number">1</span>; i++) &#123;</div><div class="line">            tmp *= <span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> (num / tmp) % <span class="number">10</span>;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">//求得最大位数d</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMaxWeishu</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> max = a[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (a[i] &gt; max)</div><div class="line">                max = a[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> tmp = <span class="number">1</span>, d = <span class="number">1</span>;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            tmp *= <span class="number">10</span>;</div><div class="line">            <span class="keyword">if</span> (max / tmp != <span class="number">0</span>) &#123;</div><div class="line">                d++;</div><div class="line">            &#125; <span class="keyword">else</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> d;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">radixSort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> d)</span> </span>&#123;</div><div class="line"> </div><div class="line">        <span class="keyword">int</span>[][] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>][a.length + <span class="number">1</span>];</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">            array[i][<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">// array[i][0]记录第i行数据的个数</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> pos = <span class="number">1</span>; pos &lt;= d; pos++) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;<span class="comment">// 分配过程</span></div><div class="line">                <span class="keyword">int</span> row = getNumInPos(a[i], pos);</div><div class="line">                <span class="keyword">int</span> col = ++array[row][<span class="number">0</span>];</div><div class="line">                array[row][col] = a[i];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>, i = <span class="number">0</span>; row &lt; <span class="number">10</span>; row++) &#123;<span class="comment">// 收集过程</span></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">1</span>; col &lt;= array[row][<span class="number">0</span>]; col++) &#123;</div><div class="line">                    a[i++] = array[row][col];</div><div class="line">                &#125;</div><div class="line">                array[row][<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">// 复位，下一个pos时还需使用</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span>[] a = &#123; <span class="number">49</span>, <span class="number">38</span>, <span class="number">65</span>, <span class="number">197</span>, <span class="number">76</span>, <span class="number">213</span>, <span class="number">27</span>, <span class="number">50</span> &#125;;</div><div class="line">        radixSort(a, getMaxWeishu(a));</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : a)</div><div class="line">            System.out.print(i + <span class="string">" "</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>平均O(d(n+r)),最好O(d(n+r)),最坏O(d(n+r));空间复杂度O(n+r);稳定;较复杂</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;排序算法有很多，所以在特定情景中使用哪一种算法很重要。为了选择合适的算法，可以按照建议的顺序考虑以下标准： &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;执行时间 &lt;/li&gt;
&lt;li&gt;存储空间&lt;/li&gt;
&lt;li&gt;编程工作 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于数据量较小的情形，①、②差别不大，主要考虑③；而对于数据量大的，①为首要。 &lt;/p&gt;
&lt;p&gt;主要排序法有： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;冒泡（Bubble）排序——相邻交换&lt;/li&gt;
&lt;li&gt;选择排序——每次最小/大排在相应的位置&lt;/li&gt;
&lt;li&gt;插入排序——将下一个插入已排好的序列中&lt;/li&gt;
&lt;li&gt;壳（Shell）排序——缩小增量&lt;/li&gt;
&lt;li&gt;归并排序&lt;/li&gt;
&lt;li&gt;快速排序&lt;/li&gt;
&lt;li&gt;堆排序&lt;/li&gt;
&lt;li&gt;拓扑排序&lt;/li&gt;
&lt;li&gt;锦标赛排序&lt;/li&gt;
&lt;li&gt;基数排序 &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.javacn.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.javacn.top/tags/java/"/>
    
      <category term="算法" scheme="http://www.javacn.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="http://www.javacn.top/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java8 Lambda表达式</title>
    <link href="http://www.javacn.top/20170502/java8_lambda/"/>
    <id>http://www.javacn.top/20170502/java8_lambda/</id>
    <published>2017-05-02T01:27:33.000Z</published>
    <updated>2017-05-03T03:05:10.741Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是λ表达式"><a href="#什么是λ表达式" class="headerlink" title="什么是λ表达式"></a>什么是λ表达式</h1><p>λ表达式本质上是一个匿名方法。让我们来看下面这个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>转成λ表达式后是这个样子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; x + y;</div></pre></td></tr></table></figure></p>
<p>参数类型也可以省略，Java编译器会根据上下文推断出来：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(x, y) -&gt; x + y; <span class="comment">//返回两数之和</span></div></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(x, y) -&gt; &#123; <span class="keyword">return</span> x + y; &#125; <span class="comment">//显式指明返回值</span></div></pre></td></tr></table></figure></p>
<p>可见λ表达式有三部分组成：</p>
<ul>
<li>参数列表;</li>
<li>箭头（-&gt;）;</li>
<li>以及一个表达式或语句块。</li>
</ul>
<a id="more"></a>
<p>下面这个例子里的λ表达式没有参数，也没有返回值（相当于一个方法接受0个参数，返回void，其实就是Runnable里run方法的一个实现）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">() -&gt; &#123; System.out.println(<span class="string">"Hello Lambda!"</span>); &#125;</div></pre></td></tr></table></figure></p>
<p>如果只有一个参数且可以被Java推断出类型，那么参数列表的括号也可以省略：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">c -&gt; &#123; <span class="keyword">return</span> c.size(); &#125;</div></pre></td></tr></table></figure></p>
<h1 id="λ表达式的类型（它是Object吗？）"><a href="#λ表达式的类型（它是Object吗？）" class="headerlink" title="λ表达式的类型（它是Object吗？）"></a>λ表达式的类型（它是Object吗？）</h1><p>λ表达式可以被当做是一个Object（注意措辞）。λ表达式的类型，叫做“<strong>目标类型</strong>（target type）”。λ表达式的目标类型是“<strong>函数接口</strong>（functional interface）”，这是Java8新引入的概念。它的定义是<strong>：一个接口，如果只有一个显式声明的抽象方法，那么它就是一个函数接口。一般用@FunctionalInterface标注出来（也可以不标）。</strong><br>举例如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123; <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>; &#125;</div><div class="line">   </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt; </span>&#123; <span class="function">V <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>; &#125;</div><div class="line">   </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ActionListener</span> </span>&#123; <span class="function"><span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span></span>; &#125;</div><div class="line">   </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span>&lt;<span class="title">T</span>&gt; </span>&#123; <span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(T o1, T o2)</span></span>; <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>; &#125;</div></pre></td></tr></table></figure></p>
<p>注意最后这个Comparator接口。它里面声明了两个方法，貌似不符合函数接口的定义，但它的确是函数接口。这是因为equals方法是Object的，所有的接口都会声明Object的public方法——虽然大多是隐式的。所以，Comparator显式的声明了equals不影响它依然是个函数接口。<br>你可以用一个λ表达式为一个函数接口赋值：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Runnable r1 = () -&gt; &#123;System.out.println(<span class="string">"Hello Lambda!"</span>);&#125;;</div></pre></td></tr></table></figure></p>
<p>然后再赋值给一个Object：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    Object obj = r1;</div><div class="line">```   </div><div class="line">但却不能这样干：</div><div class="line">```java</div><div class="line">    Object obj = () -&gt; &#123;System.out.println(<span class="string">"Hello Lambda!"</span>);&#125;; <span class="comment">// ERROR! Object is not a functional interface!</span></div></pre></td></tr></table></figure></p>
<p>必须显式的转型成一个函数接口才可以：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Object o = (Runnable) () -&gt; &#123; System.out.println(<span class="string">"hi"</span>); &#125;; <span class="comment">// correct</span></div></pre></td></tr></table></figure></p>
<p>一个λ表达式只有在转型成一个函数接口后才能被当做Object使用。所以下面这句也不能编译：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.out.println( () -&gt; &#123;&#125; ); <span class="comment">//错误! 目标类型不明</span></div></pre></td></tr></table></figure></p>
<p>必须先转型:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">System.out.println( (Runnable)() -&gt; &#123;&#125; ); <span class="comment">// 正确</span></div></pre></td></tr></table></figure></p>
<p>假设你自己写了一个函数接口，长的跟Runnable一模一样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyRunnable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>那么<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Runnable r1 =    () -&gt; &#123;System.out.println(<span class="string">"Hello Lambda!"</span>);&#125;;</div><div class="line">MyRunnable2 r2 = () -&gt; &#123;System.out.println(<span class="string">"Hello Lambda!"</span>);&#125;;</div></pre></td></tr></table></figure></p>
<p>都是正确的写法。这说明一个λ表达式可以有多个目标类型（函数接口），只要函数匹配成功即可。<br>但需注意一个λ表达式必须至少有一个目标类型。<br>JDK预定义了很多函数接口以避免用户重复定义。最典型的是Function：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123; </div><div class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个接口代表一个函数，接受一个T类型的参数，并返回一个R类型的返回值。<br>另一个预定义函数接口叫做Consumer，跟Function的唯一不同是它没有返回值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FunctionalInterface</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>还有一个Predicate，用来判断某项条件是否满足。经常用来进行筛滤操作：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">    @FunctionalInterface</div><div class="line">    public interface Predicate&lt;T&gt; &#123;</div><div class="line">        boolean test(T t);</div><div class="line">    &#125;</div><div class="line">``` </div><div class="line">综上所述，一个λ表达式其实就是定义了一个匿名方法，只不过这个方法必须符合至少一个函数接口。</div><div class="line">       </div><div class="line"># λ表达式的使用</div><div class="line">## λ表达式用在何处</div><div class="line">λ表达式主要用于替换以前广泛使用的内部匿名类，各种回调，比如事件响应器、传入Thread类的Runnable等。看下面的例子：</div><div class="line">```java</div><div class="line">    Thread oldSchool = new Thread( new Runnable () &#123;</div><div class="line">        @Override</div><div class="line">        public void run() &#123;</div><div class="line">            System.out.println("This is from an anonymous class.");</div><div class="line">        &#125;</div><div class="line">    &#125; );</div><div class="line">   </div><div class="line">    Thread gaoDuanDaQiShangDangCi = new Thread( () -&gt; &#123;</div><div class="line">        System.out.println("This is from an anonymous method (lambda exp).");</div><div class="line">    &#125; );</div></pre></td></tr></table></figure></p>
<p>注意第二个线程里的λ表达式，你并不需要显式地把它转成一个Runnable，因为Java能根据上下文自动推断出来：一个Thread的构造函数接受一个Runnable参数，而传入的λ表达式正好符合其run()函数，所以Java编译器推断它为Runnable。</p>
<p>从形式上看，λ表达式只是为你节省了几行代码。但将λ表达式引入Java的动机并不仅仅为此。Java8有一个短期目标和一个长期目标。</p>
<ul>
<li>短期目标是：配合“集合类批处理操作”的内部迭代和并行处理（下面将要讲到）；</li>
<li>长期目标是将Java向函数式编程语言这个方向引导（并不是要完全变成一门函数式编程语言，只是让它有更多的函数式编程语言的特性），也正是由于这个原因，Oracle并没有简单地使用内部类去实现λ表达式，而是使用了一种更动态、更灵活、易于将来扩展和改变的策略（invokedynamic）。</li>
</ul>
<h2 id="λ表达式与集合类批处理操作（或者叫块操作）"><a href="#λ表达式与集合类批处理操作（或者叫块操作）" class="headerlink" title="λ表达式与集合类批处理操作（或者叫块操作）"></a>λ表达式与集合类批处理操作（或者叫块操作）</h2><p>上文提到了集合类的批处理操作。这是Java8的另一个重要特性，它与λ表达式的配合使用乃是Java8的最主要特性。集合类的批处理操作API的目的是实现集合类的“内部迭代”，并期望充分利用现代多核CPU进行并行计算。</p>
<p>Java8之前集合类的迭代（Iteration）都是外部的，即客户代码。而内部迭代意味着改由Java类库来进行迭代，而不是客户代码。例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(Object o: list) &#123; <span class="comment">// 外部迭代</span></div><div class="line">    System.out.println(o);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以写成：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list.forEach(o -&gt; &#123;System.out.println(o);&#125;); <span class="comment">//forEach函数实现内部迭代</span></div></pre></td></tr></table></figure></p>
<p>集合类（包括List）现在都有一个forEach方法，对元素进行迭代（遍历），所以我们不需要再写for循环了。forEach方法接受一个函数接口Consumer做参数，所以可以使用λ表达式。</p>
<p>这种内部迭代方法广泛存在于各种语言，如C++的STL算法库、python、ruby、scala等。</p>
<p>Java8为集合类引入了另一个重要概念：流（stream）。一个流通常以一个集合类实例为其数据源，然后在其上定义各种操作。流的API设计使用了管道（pipelines）模式。对流的一次操作会返回另一个流。如同IO的API或者StringBuffer的append方法那样，从而多个不同的操作可以在一个语句里串起来。看下面的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;Shape&gt; shapes = ...</div><div class="line">shapes.stream()</div><div class="line">  .filter(s -&gt; s.getColor() == BLUE)</div><div class="line">  .forEach(s -&gt; s.setColor(RED));</div></pre></td></tr></table></figure></p>
<p>首先调用stream方法，以集合类对象shapes里面的元素为数据源，生成一个流。然后在这个流上调用filter方法，挑出蓝色的，返回另一个流。最后调用forEach方法将这些蓝色的物体喷成红色。（forEach方法不再返回流，而是一个终端方法，类似于StringBuffer在调用若干append之后的那个toString）<br>filter方法的参数是Predicate类型，forEach方法的参数是Consumer类型，它们都是函数接口，所以可以使用λ表达式。<br>还有一个方法叫parallelStream()，顾名思义它和stream()一样，只不过指明要并行处理，以期充分利用现代CPU的多核特性。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">shapes.parallelStream(); <span class="comment">// 或shapes.stream().parallel()</span></div></pre></td></tr></table></figure></p>
<p>来看更多的例子。下面是典型的大数据处理方法，Filter-Map-Reduce：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//给出一个String类型的数组，找出其中所有不重复的素数</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">distinctPrimary</span><span class="params">(String... numbers)</span> </span>&#123;</div><div class="line">    List&lt;String&gt; l = Arrays.asList(numbers);</div><div class="line">    List&lt;Integer&gt; r = l.stream()</div><div class="line">            .map(e -&gt; <span class="keyword">new</span> Integer(e))</div><div class="line">            .filter(e -&gt; Primes.isPrime(e))</div><div class="line">            .distinct()</div><div class="line">            .collect(Collectors.toList());</div><div class="line">    System.out.println(<span class="string">"distinctPrimary result is: "</span> + r);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>第一步：传入一系列String（假设都是合法的数字），转成一个List，然后调用stream()方法生成流。</li>
<li>第二步：调用流的map方法把每个元素由String转成Integer，得到一个新的流。map方法接受一个Function类型的参数，上面介绍了，Function是个函数接口，所以这里用λ表达式。</li>
<li>第三步：调用流的filter方法，过滤那些不是素数的数字，并得到一个新流。filter方法接受一个Predicate类型的参数，上面介绍了，Predicate是个函数接口，所以这里用λ表达式。</li>
<li>第四步：调用流的distinct方法，去掉重复，并得到一个新流。这本质上是另一个filter操作。</li>
<li>第五步：用collect方法将最终结果收集到一个List里面去。collect方法接受一个Collector类型的参数，这个参数指明如何收集最终结果。在这个例子中，结果简单地收集到一个List中。我们也可以用Collectors.toMap(e-&gt;e, e-&gt;e)把结果收集到一个Map中，它的意思是：把结果收到一个Map，用这些素数自身既作为键又作为值。toMap方法接受两个Function类型的参数，分别用以生成键和值，Function是个函数接口，所以这里都用λ表达式。</li>
</ul>
<p>你可能会觉得在这个例子里，List l被迭代了好多次，map，filter，distinct都分别是一次循环，效率会不好。实际并非如此。这些返回另一个Stream的方法都是“懒（lazy）”的，而最后返回最终结果的collect方法则是“急（eager）”的。在遇到eager方法之前，lazy的方法不会执行。</p>
<p>当遇到eager方法时，前面的lazy方法才会被依次执行。而且是管道贯通式执行。这意味着每一个元素依次通过这些管道。例如有个元素“3”，首先它被map成整数型3；然后通过filter，发现是素数，被保留下来；又通过distinct，如果已经有一个3了，那么就直接丢弃，如果还没有则保留。这样，3个操作其实只经过了一次循环。</p>
<p>除collect外其它的eager操作还有forEach，toArray，reduce等。</p>
<p>下面来看一下也许是最常用的收集器方法，groupingBy：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//给出一个String类型的数组，找出其中各个素数，并统计其出现次数</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">primaryOccurrence</span><span class="params">(String... numbers)</span> </span>&#123;</div><div class="line">    List&lt;String&gt; l = Arrays.asList(numbers);</div><div class="line">    Map&lt;Integer, Integer&gt; r = l.stream()</div><div class="line">        .map(e -&gt; <span class="keyword">new</span> Integer(e))</div><div class="line">        .filter(e -&gt; Primes.isPrime(e))</div><div class="line">        .collect( Collectors.groupingBy(p-&gt;p, Collectors.summingInt(p-&gt;<span class="number">1</span>)) );</div><div class="line">    System.out.println(<span class="string">"primaryOccurrence result is: "</span> + r);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意这一行：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Collectors.groupingBy(p-&gt;p, Collectors.summingInt(p-&gt;<span class="number">1</span>))</div></pre></td></tr></table></figure></p>
<p>它的意思是：把结果收集到一个Map中，用统计到的各个素数自身作为键，其出现次数作为值。</p>
<p>下面是一个reduce的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//给出一个String类型的数组，求其中所有不重复素数的和</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">distinctPrimarySum</span><span class="params">(String... numbers)</span> </span>&#123;</div><div class="line">    List&lt;String&gt; l = Arrays.asList(numbers);</div><div class="line">    <span class="keyword">int</span> sum = l.stream()</div><div class="line">        .map(e -&gt; <span class="keyword">new</span> Integer(e))</div><div class="line">        .filter(e -&gt; Primes.isPrime(e))</div><div class="line">        .distinct()</div><div class="line">        .reduce(<span class="number">0</span>, (x,y) -&gt; x+y); <span class="comment">// equivalent to .sum()</span></div><div class="line">    System.out.println(<span class="string">"distinctPrimarySum result is: "</span> + sum);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>reduce方法用来产生单一的一个最终结果。</p>
<p>流有很多预定义的reduce操作，如sum()，max()，min()等。<br>再举个现实世界里的栗子比如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 统计年龄在25-35岁的男女人数、比例</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">boysAndGirls</span><span class="params">(List&lt;Person&gt; persons)</span> </span>&#123;</div><div class="line">    Map&lt;Integer, Integer&gt; result = persons.parallelStream().filter(p -&gt; p.getAge()&gt;=<span class="number">25</span> &amp;&amp; p.getAge()&lt;=<span class="number">35</span>).</div><div class="line">        collect(</div><div class="line">            Collectors.groupingBy(p-&gt;p.getSex(), Collectors.summingInt(p-&gt;<span class="number">1</span>))</div><div class="line">    );</div><div class="line">    System.out.print(<span class="string">"boysAndGirls result is "</span> + result);</div><div class="line">    System.out.println(<span class="string">", ratio (male : female) is "</span> + (<span class="keyword">float</span>)result.get(Person.MALE)/result.get(Person.FEMALE));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="λ表达式的更多用法"><a href="#λ表达式的更多用法" class="headerlink" title="λ表达式的更多用法"></a>λ表达式的更多用法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 嵌套的λ表达式</span></div><div class="line">Callable&lt;Runnable&gt; c1 = () -&gt; () -&gt; &#123; System.out.println(<span class="string">"Nested lambda"</span>); &#125;;</div><div class="line">c1.call().run();</div><div class="line"><span class="comment">// 用在条件表达式中</span></div><div class="line">Callable&lt;Integer&gt; c2 = <span class="keyword">true</span> ? (() -&gt; <span class="number">42</span>) : (() -&gt; <span class="number">24</span>);</div><div class="line">System.out.println(c2.call());</div><div class="line"><span class="comment">// 定义一个递归函数</span></div><div class="line"><span class="keyword">private</span> UnaryOperator&lt;Integer&gt; factorial = i -&gt; &#123; <span class="keyword">return</span> i == <span class="number">0</span> ? <span class="number">1</span> : i * factorial.apply( i - <span class="number">1</span> ); &#125;;</div><div class="line">...</div><div class="line">System.out.println(factorial.apply(<span class="number">3</span>));</div></pre></td></tr></table></figure>
<p>在Java中，随声明随调用的方式是不行的，比如下面这样，声明了一个λ表达式<code>(x, y) -&gt; x + y</code>，同时企图通过传入实参<code>(2, 3)</code>来调用它：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> five = ( (x, y) -&gt; x + y ) (<span class="number">2</span>, <span class="number">3</span>); <span class="comment">// ERROR! try to call a lambda in-place</span></div></pre></td></tr></table></figure></p>
<p>这在C++中是可以的，但Java中不行。Java的λ表达式只能用作赋值、传参、返回值等。</p>
<h1 id="其它相关概念"><a href="#其它相关概念" class="headerlink" title="其它相关概念"></a>其它相关概念</h1><h2 id="捕获（Capture）"><a href="#捕获（Capture）" class="headerlink" title="捕获（Capture）"></a>捕获（Capture）</h2><p>捕获的概念在于解决在λ表达式中我们可以使用哪些外部变量（即除了它自己的参数和内部定义的本地变量）的问题。</p>
<p>答案是：与内部类非常相似，但有不同点。不同点在于内部类总是持有一个其外部类对象的引用。而λ表达式呢，除非在它内部用到了其外部类（包围类）对象的方法或者成员，否则它就不持有这个对象的引用。</p>
<p>在Java8以前，如果要在内部类访问外部对象的一个本地变量，那么这个变量必须声明为final才行。在Java8中，这种限制被去掉了，代之以一个新的概念，“effectively final”。</p>
<p>它的意思是你可以声明为final，也可以不声明final但是按照final来用，也就是一次赋值永不改变。换句话说，保证它加上final前缀后不会出编译错误。</p>
<p>在Java8中，内部类和λ表达式都可以访问effectively final的本地变量。λ表达式的例子如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">...   </div><div class="line"><span class="keyword">int</span> tmp1 = <span class="number">1</span>; <span class="comment">//包围类的成员变量</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">int</span> tmp2 = <span class="number">2</span>; <span class="comment">//包围类的静态成员变量</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCapture</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> tmp3 = <span class="number">3</span>; <span class="comment">//没有声明为final，但是effectively final的本地变量</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> tmp4 = <span class="number">4</span>; <span class="comment">//声明为final的本地变量</span></div><div class="line">    <span class="keyword">int</span> tmp5 = <span class="number">5</span>; <span class="comment">//普通本地变量</span></div><div class="line">   </div><div class="line">    Function&lt;Integer, Integer&gt; f1 = i -&gt; i + tmp1;</div><div class="line">    Function&lt;Integer, Integer&gt; f2 = i -&gt; i + tmp2;</div><div class="line">    Function&lt;Integer, Integer&gt; f3 = i -&gt; i + tmp3;</div><div class="line">    Function&lt;Integer, Integer&gt; f4 = i -&gt; i + tmp4;</div><div class="line">    Function&lt;Integer, Integer&gt; f5 = i -&gt; &#123;</div><div class="line">        tmp5  += i; <span class="comment">// 编译错！对tmp5赋值导致它不是effectively final的</span></div><div class="line">        <span class="keyword">return</span> tmp5;</div><div class="line">    &#125;;</div><div class="line">    ...</div><div class="line">    tmp5 = <span class="number">9</span>; <span class="comment">// 编译错！对tmp5赋值导致它不是effectively final的</span></div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>Java要求本地变量final或者effectively final的原因是多线程并发问题。内部类、λ表达式都有可能在不同的线程中执行，允许多个线程同时修改一个本地变量不符合Java的设计理念。</p>
<h2 id="方法引用（Method-reference）"><a href="#方法引用（Method-reference）" class="headerlink" title="方法引用（Method reference）"></a>方法引用（Method reference）</h2><p>任何一个λ表达式都可以代表某个函数接口的唯一方法的匿名描述符。我们也可以使用某个类的某个具体方法来代表这个描述符，叫做方法引用。例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Integer::parseInt <span class="comment">//静态方法引用</span></div><div class="line">System.out::print <span class="comment">//实例方法引用</span></div><div class="line">Person::<span class="keyword">new</span>       <span class="comment">//构造器引用</span></div></pre></td></tr></table></figure></p>
<p>下面是一组例子，教你使用方法引用代替λ表达式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//c1 与 c2 是一样的（静态方法引用）</span></div><div class="line">Comparator&lt;Integer&gt; c2 = (x, y) -&gt; Integer.compare(x, y);</div><div class="line">Comparator&lt;Integer&gt; c1 = Integer::compare;</div><div class="line">   </div><div class="line"><span class="comment">//下面两句是一样的（实例方法引用1）</span></div><div class="line">persons.forEach(e -&gt; System.out.println(e));</div><div class="line">persons.forEach(System.out::println);</div><div class="line">   </div><div class="line"><span class="comment">//下面两句是一样的（实例方法引用2）</span></div><div class="line">persons.forEach(person -&gt; person.eat());</div><div class="line">persons.forEach(Person::eat);</div><div class="line">   </div><div class="line"><span class="comment">//下面两句是一样的（构造器引用）</span></div><div class="line">strList.stream().map(s -&gt; <span class="keyword">new</span> Integer(s));</div><div class="line">strList.stream().map(Integer::<span class="keyword">new</span>);</div></pre></td></tr></table></figure></p>
<p>使用方法引用，你的程序会变得更短些。现在distinctPrimarySum方法可以改写如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">distinctPrimarySum</span><span class="params">(String... numbers)</span> </span>&#123;</div><div class="line">    List&lt;String&gt; l = Arrays.asList(numbers);</div><div class="line">    <span class="keyword">int</span> sum = l.stream().map(Integer::<span class="keyword">new</span>).filter(Primes::isPrime).distinct().sum();</div><div class="line">    System.out.println(<span class="string">"distinctPrimarySum result is: "</span> + sum);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>还有一些其它的方法引用:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">super</span>::toString <span class="comment">//引用某个对象的父类方法</span></div><div class="line">String[]::<span class="keyword">new</span> <span class="comment">//引用一个数组的构造器</span></div></pre></td></tr></table></figure></p>
<h2 id="默认方法（Default-method）"><a href="#默认方法（Default-method）" class="headerlink" title="默认方法（Default method）"></a>默认方法（Default method）</h2><p>Java8中，接口声明里可以有方法实现了，叫做默认方法。在此之前，接口里的方法全部是抽象方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterf</span> </span>&#123;</div><div class="line">   </div><div class="line">    <span class="function">String <span class="title">m1</span><span class="params">()</span></span>;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">default</span> String <span class="title">m2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Hello default method!"</span>;</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这实际上混淆了接口和抽象类，但一个类仍然可以实现多个接口，而只能继承一个抽象类。</p>
<p>这么做的原因是：由于Collection库需要为批处理操作添加新的方法，如forEach()，stream()等，但是不能修改现有的Collection接口——如果那样做的话所有的实现类都要进行修改，包括很多客户自制的实现类。所以只好使用这种妥协的办法。</p>
<p>如此一来，我们就面临一种类似多继承的问题。如果类Sub继承了两个接口，Base1和Base2，而这两个接口恰好具有完全相同的两个默认方法，那么就会产生冲突。这时Sub类就必须通过重载来显式指明自己要使用哪一个接口的实现（或者提供自己的实现）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">implements</span> <span class="title">Base1</span>, <span class="title">Base2</span> </span>&#123;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</div><div class="line">        Base1.<span class="keyword">super</span>.hello(); <span class="comment">//使用Base1的实现</span></div><div class="line">    &#125;</div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>除了默认方法，Java8的接口也可以有静态方法的实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterf</span> </span>&#123;</div><div class="line">   </div><div class="line">    <span class="function">String <span class="title">m1</span><span class="params">()</span></span>;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">default</span> String <span class="title">m2</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Hello default method!"</span>;</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">m3</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Hello static method in Interface!"</span>;</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="生成器函数（Generator-function）"><a href="#生成器函数（Generator-function）" class="headerlink" title="生成器函数（Generator function）"></a>生成器函数（Generator function）</h2><p>有时候一个流的数据源不一定是一个已存在的集合对象，也可能是个“生成器函数”。一个生成器函数会产生一系列元素，供给一个流。Stream.generate(Supplier<t> s)就是一个生成器函数。其中参数Supplier是一个函数接口，里面有唯一的抽象方法 <t> get()。</t></t></p>
<p>下面这个例子生成并打印5个随机数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Stream.generate(Math::random).limit(<span class="number">5</span>).forEach(System.out::println);</div></pre></td></tr></table></figure></p>
<p>注意这个limit(5)，如果没有这个调用，那么这条语句会永远地执行下去。也就是说这个生成器是无穷的。这种调用叫做终结操作，或者短路（short-circuiting）操作。</p>
<p>参考资料：<br><a href="http://openjdk.java.net/projects/lambda/" target="_blank" rel="external">http://openjdk.java.net/projects/lambda/</a><br><a href="http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html" target="_blank" rel="external">http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是λ表达式&quot;&gt;&lt;a href=&quot;#什么是λ表达式&quot; class=&quot;headerlink&quot; title=&quot;什么是λ表达式&quot;&gt;&lt;/a&gt;什么是λ表达式&lt;/h1&gt;&lt;p&gt;λ表达式本质上是一个匿名方法。让我们来看下面这个例子：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;转成λ表达式后是这个样子：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y) -&amp;gt; x + y;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;参数类型也可以省略，Java编译器会根据上下文推断出来：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;(x, y) -&amp;gt; x + y; &lt;span class=&quot;comment&quot;&gt;//返回两数之和&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;或者&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;(x, y) -&amp;gt; &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x + y; &amp;#125; &lt;span class=&quot;comment&quot;&gt;//显式指明返回值&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可见λ表达式有三部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参数列表;&lt;/li&gt;
&lt;li&gt;箭头（-&amp;gt;）;&lt;/li&gt;
&lt;li&gt;以及一个表达式或语句块。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.javacn.top/categories/java/"/>
    
    
      <category term="java" scheme="http://www.javacn.top/tags/java/"/>
    
      <category term="Lambda" scheme="http://www.javacn.top/tags/Lambda/"/>
    
      <category term="jdk8" scheme="http://www.javacn.top/tags/jdk8/"/>
    
  </entry>
  
  <entry>
    <title>实际项目中的常见算法</title>
    <link href="http://www.javacn.top/20170427/algorithms_for_project/"/>
    <id>http://www.javacn.top/20170427/algorithms_for_project/</id>
    <published>2017-04-27T06:14:04.000Z</published>
    <updated>2017-05-03T03:13:45.674Z</updated>
    
    <content type="html"><![CDATA[<p>Emanuele Viola在Stackexchange上提了这样的一个问题，他希望有人能够列举一些目前软件、硬件中正在使用的算法的实际案例来证明算法的重要性，对于大家可能给到的回答，他还提出了几点要求：</p>
<ol>
<li><p>使用这些算法的软件或者硬件应该是被广泛应用的;</p>
</li>
<li><p>例子需要具体，并给出确切的系统、算法的引用地址;</p>
</li>
<li><p>在经典的本科生或者博士的课程中应该教过这些算法或者数据结构;</p>
</li>
</ol>
<p>Vijay D的回复获得了最佳答案，他的具体回复内容如下：</p>
<h1 id="Linux内核中的基本数据结构和算法"><a href="#Linux内核中的基本数据结构和算法" class="headerlink" title="Linux内核中的基本数据结构和算法"></a>Linux内核中的基本数据结构和算法</h1><ol>
<li><p>链表、双向链表和无锁链表</p>
</li>
<li><p>B+ 树，代码中的注释将会告诉你一些教科书中不能学到的内容：</p>
<p> 这是一个简单的B+树实现，我写它的目的是作为练习，并以此了解B+树的工作原理。结果该实现发挥了它的实用价值。<br> …<br> 一个不经常在教科书中提及的技巧：最小值应该放在右侧，而不是左侧。一个节点内所有被使用的槽位应该在左侧，没有使用的节点应该为NUL，大部分的操作只遍历一次所有的槽位，在第一个NUL处终止。</p>
</li>
<li><p>带权重的有序列表用于互斥锁、驱动等;</p>
</li>
<li><p>红黑树用于调度、虚拟内存管理、跟踪文件描述符和目录条目等;</p>
<a id="more"></a></li>
<li><p>区间树</p>
</li>
<li><p>Radix树，用于内存管理、NFS相关查找和网络相关的功能;<br> radix树的一个常见的用法是保存页面结构体的指针;</p>
</li>
<li><p>优先级堆，文字上的描述，主要是在教科书中实现，用于control group系统;<br> 包含指针的只允许简单插入的静态大小优先级堆，基于CLR（算法导论）第七章</p>
</li>
<li><p>哈希函数，引用Knuth和他的一篇论文：</p>
<blockquote>
<p>Knuth建议选择与机器字长所能表达的最大整数约成黄金比例的素数来做乘法散列，Chuck Lever 证实了这个技术的有效性;<br> <a href="http://www.citi.umich.edu/techreports/reports/citi-tr-00-1.pdf" target="_blank" rel="external">http://www.citi.umich.edu/techreports/reports/citi-tr-00-1.pdf</a><br> 这些选择的素数是位稀疏的，也就是说对他们的操作可以使用位移和加法来替换机器中很慢的乘法操作;</p>
</blockquote>
</li>
<li><p>有些代码，比如这个驱动，他们是自己实现的哈希函数</p>
</li>
<li><p>哈希表，用于实现索引节点、文件系统完整性检查等;</p>
</li>
<li><p>位数组，用于处理flags、中断等，在Knuth第四卷中有对其特性的描述;</p>
</li>
<li><p>Semaphores 和 spin locks</p>
</li>
<li><p>二叉树搜索用于中断处理、登记缓存查找等;</p>
</li>
<li><p>使用B-树进行二叉树查找;</p>
</li>
<li><p>深度优先搜索和他的变体被应用于目录配置;</p>
<blockquote>
<p>在命名空间树中执行一个修改过的深度优先算法，开始（和终止于）start_handle所确定的节点。当与参数匹配的节点被发现以后，回调函数将会被调用。如果回调函数返回一个非空的值，搜索将会立即终止，这个值将会回传给调用函数;</p>
</blockquote>
</li>
<li><p>广度优先搜索用于在运行时检查锁的正确性;</p>
</li>
<li><p>链表上的合并排序用于垃圾回收、文件系统管理等;</p>
</li>
<li><p>在某个驱动程序的库函数里，冒泡排序居然也被实现了</p>
</li>
<li><p>Knuth-Morris-Pratt 字符串匹配;</p>
<blockquote>
<p>Knuth、Morris和 Pratt [1]实现了一个线性时间复杂度字符串匹配算法。该算法完全规避了对转换函数DELTA的显式计算。其匹配时间为O(n)（其中n是文本长度），只使用一个辅助函数PI[1…m]（其中m是模式的长度），模式的预处理时间是O(m)。PI这个数组允许DELTA函数在需要时能迅速运行。大体上，对任意状态q=0,1,…,m和任意SIGMA中的字符”a”，PI[“q”]保存了独立于”a”的信息，并用于计算DELTA(“q”,”a”)。由于PI这个数组只包含m个条目，而DELTA包含O(m|SIGMA|)个条目，我们通过计算PI进而在预处理时间保存|SIGMA|的系数，而非计算DELTA。<br>[1] Cormen, Leiserson, Rivest, Stein Introdcution to Algorithms, 2nd Edition, MIT Press<br>[2] See finite automation theory</p>
</blockquote>
</li>
<li><p>Boyer-Moore模式匹配，如下是引用和对其他算法的使用建议;</p>
<blockquote>
<p>Boyer-Moore字符串匹配算法:<br>[1] A Fast String Searching Algorithm, R.S. Boyer and Moore. Communications of the Association for Computing Machinery, 20(10), 1977, pp. 762-772.<a href="http://www.cs.utexas.edu/users/moore/publications/fstrpos.pdf" target="_blank" rel="external">http://www.cs.utexas.edu/users/moore/publications/fstrpos.pdf</a><br>[2] Handbook of Exact String Matching Algorithms, Thierry Lecroq, 2004 <a href="http://www-igm.univ-mlv.fr/~lecroq/string/string.pdf" target="_blank" rel="external">http://www-igm.univ-mlv.fr/~lecroq/string/string.pdf</a><br>注意：由于Boyer-Moore（BM）自右向左做匹配，有一种可能性是一个匹配分布在不同的块中，这种情况下是不能找到任何匹配的。<br>如果你想确保这样的事情不会发生，使用Knuth-Pratt-Morris（KMP）算法来替代。也就是说，根据你的设置选择合适的字符串查找算法。<br>如果你使用文本搜索架构来过滤、网络入侵检测（NIDS）或者任何安全为目的，那么选择KMP。如果你关乎性能，比如你在分类数据包，并应用服务质量（QoS）策略，并且你不介意可能需要在分布在多个片段中匹配，然后就选择BM。</p>
</blockquote>
</li>
</ol>
<h1 id="Chromium-浏览器中的数据结构和算法"><a href="#Chromium-浏览器中的数据结构和算法" class="headerlink" title="Chromium 浏览器中的数据结构和算法"></a>Chromium 浏览器中的数据结构和算法</h1><ol>
<li><p>伸展树</p>
<blockquote>
<p>此树会被分配策略参数化，这个策略负责在C的自由存储空间和区域中分配列表，参见zone.h</p>
</blockquote>
</li>
<li><p>Demo中使用了Voronoi图</p>
</li>
<li><p>基于Bresenham算法的标签管理</p>
<blockquote>
<p>同时，代码中还包含了一些第三方的算法和数据结构，例如：</p>
<ul>
<li>二叉树</li>
<li>红黑树</li>
<li>AVL树</li>
</ul>
</blockquote>
</li>
<li><p>用于压缩的Rabin-Karp字符串匹配</p>
</li>
<li><p>计算自动机的后缀</p>
</li>
<li><p>苹果实现的布隆过滤器</p>
</li>
<li><p>布氏算法</p>
</li>
</ol>
<h1 id="编程语言类库"><a href="#编程语言类库" class="headerlink" title="编程语言类库"></a>编程语言类库</h1><ol>
<li><p>C++ STL，包含的有列表、堆、栈、向量、排序、搜索和堆操作算法</p>
</li>
<li><p>Java API 非常广泛，包含的太多</p>
</li>
<li><p>Boost C++ 类库，包含了诸如Boyer-Moore和Knuth-Morris-Pratt字符串匹配算法等;</p>
</li>
</ol>
<h1 id="分配和调度算法"><a href="#分配和调度算法" class="headerlink" title="分配和调度算法"></a>分配和调度算法</h1><ol>
<li><p>最近最少使用算法有多种实现方式，在Linux内核中是基于列表实现的;</p>
</li>
<li><p>其他可能需要了解的是先入先出、最不常用和轮询;</p>
</li>
<li><p>VAX、VMS系统中大量使用FIFO的变体;</p>
</li>
<li><p>Richard Carr的时钟算法被用于Linux中页面帧替换;</p>
</li>
<li><p>Intel i860处理器中使用了随机替换策略;</p>
</li>
<li><p>自适应缓存替换被用于一些IBM的存储控制中，由于专利原因在PostgreSQL只有简单的应用;</p>
</li>
<li><p>Knuth在TAOCP第一卷中提到的伙伴内存分配算法被用于Linux内核中，FreeBSD和Facebook都在使用jemalloc并发分配器;</p>
</li>
</ol>
<h1 id="unix系统中的核心组件"><a href="#unix系统中的核心组件" class="headerlink" title="unix系统中的核心组件"></a>unix系统中的核心组件</h1><ol>
<li><p>grep和awk都实现了使用Thompson-McNaughton-Yamada构建算法实现从正则表达式中创建NFA</p>
</li>
<li><p>tsort实现了拓扑排序</p>
</li>
<li><p>fgrep实现了Aho-Corasick 字符串匹配算法;</p>
</li>
<li><p>GNU grep，据作者Mike Haertel所说，实现了Boyer-Moore算法;</p>
</li>
<li><p>Unix中的crypt(1)实现了哑谜机（Enigma Machine）中的加密算法的变种;</p>
</li>
<li><p>Doug Mcllroy基于和James合作的原型实现的Unix diff，比用来计算Levenshtein距离的标准动态规划算法更好，Linux版本被用来计算最短编辑距离;</p>
</li>
</ol>
<h1 id="加密算法"><a href="#加密算法" class="headerlink" title="加密算法"></a>加密算法</h1><ol>
<li><p>Merkle树，尤其是Tiger Tree Hash的变种，用于点对点的程序，例如GTK Gnutella 和LimeWire;</p>
</li>
<li><p>MD5用于为软件包提供校验码，还用于*nix系统（Linux实现）中的完整性校验，同时他还支持Windows和OS X系统;</p>
</li>
<li><p>OpenSSL实现了需要加密算法，诸如AES，Blowfish，DES，SHA-1，SHA-2，RSA，DES等;</p>
</li>
</ol>
<h1 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h1><ol>
<li><p>yacc和bison实现了LALR解析器</p>
</li>
<li><p>支配算法用于基于SSA形式的最优化编译器;</p>
</li>
<li><p>lex和flex将正则表达式编译为NFA;</p>
</li>
</ol>
<h1 id="压缩和图片处理"><a href="#压缩和图片处理" class="headerlink" title="压缩和图片处理"></a>压缩和图片处理</h1><ol>
<li><p>为GIF图片格式而出现的Lempel-Zivsraf算法在图片处理程序中经常被应用，从一个简单的*nix组件转化为一个复杂的程序;</p>
</li>
<li><p>运行长度编码被用于生成PCX文件（用于Paintbrush这个程序中），压缩BMP文件和TIFF文件;</p>
</li>
<li><p>小波压缩（Wavelet压缩）是JPEG 2000的基础，所以所有生成JPEG 2000文件的数码相机都是实现了这个算法;</p>
</li>
<li><p>Reed-Solomon纠错用于Linux内核、CD驱动、条形码读取，并且结合卷积从航行团队进行图片传输;</p>
</li>
</ol>
<h1 id="冲突驱动条款学习算法（Conflict-Driven-Clause-Learning）"><a href="#冲突驱动条款学习算法（Conflict-Driven-Clause-Learning）" class="headerlink" title="冲突驱动条款学习算法（Conflict Driven Clause Learning）"></a>冲突驱动条款学习算法（Conflict Driven Clause Learning）</h1><p>自2000年以来，在工业标准中的SAT（布尔满足性问题）求解器的运行时间每年都在成倍减少。这一发展的一个非常重要的原因是冲突驱动条款学习算法（Conflict Driven Clause Learning）的使用，它结合了Davis Logemann和Loveland的约束编程和人工智能研究技术的原始论文中关于布尔约束传播的算法。具体来说，工业建模中SAT被认为是一个简单的问题（见讨论）。对我来说，这是近代最伟大的成功故事之一，因为它结合了先进的算法、巧妙的设计思路、实验反馈，并以一致的共同努力来解决这个问题。Malik和Zhang的CACM论文是一个很好的阅读材料。许多大学都在教授这个算法，但通常是在逻辑或形式化方法的课程中。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Emanuele Viola在Stackexchange上提了这样的一个问题，他希望有人能够列举一些目前软件、硬件中正在使用的算法的实际案例来证明算法的重要性，对于大家可能给到的回答，他还提出了几点要求：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用这些算法的软件或者硬件应该是被广泛应用的;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;例子需要具体，并给出确切的系统、算法的引用地址;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在经典的本科生或者博士的课程中应该教过这些算法或者数据结构;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Vijay D的回复获得了最佳答案，他的具体回复内容如下：&lt;/p&gt;
&lt;h1 id=&quot;Linux内核中的基本数据结构和算法&quot;&gt;&lt;a href=&quot;#Linux内核中的基本数据结构和算法&quot; class=&quot;headerlink&quot; title=&quot;Linux内核中的基本数据结构和算法&quot;&gt;&lt;/a&gt;Linux内核中的基本数据结构和算法&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;链表、双向链表和无锁链表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;B+ 树，代码中的注释将会告诉你一些教科书中不能学到的内容：&lt;/p&gt;
&lt;p&gt; 这是一个简单的B+树实现，我写它的目的是作为练习，并以此了解B+树的工作原理。结果该实现发挥了它的实用价值。&lt;br&gt; …&lt;br&gt; 一个不经常在教科书中提及的技巧：最小值应该放在右侧，而不是左侧。一个节点内所有被使用的槽位应该在左侧，没有使用的节点应该为NUL，大部分的操作只遍历一次所有的槽位，在第一个NUL处终止。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;带权重的有序列表用于互斥锁、驱动等;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;红黑树用于调度、虚拟内存管理、跟踪文件描述符和目录条目等;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://www.javacn.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://www.javacn.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>多版本并发控制(MVCC)在分布式系统中的应用</title>
    <link href="http://www.javacn.top/20170427/concurrence_control_mvcc/"/>
    <id>http://www.javacn.top/20170427/concurrence_control_mvcc/</id>
    <published>2017-04-27T04:53:32.000Z</published>
    <updated>2017-05-03T03:16:19.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>最近项目中遇到了一个分布式系统的并发控制问题。该问题可以抽象为：某分布式系统由一个数据中心D和若干业务处理中心L1，L2 … Ln组成；D本质上是一个key-value存储，它对外提供基于HTTP协议的CRUD操作接口。L的业务逻辑可以抽象为下面3个步骤：</p>
<ol>
<li>read: 根据keySet {k1, … kn}从D获取keyValueSet {k1:v1, … kn:vn}</li>
<li>do: 根据keyValueSet进行业务处理，得到需要更新的数据集keyValueSet’ {k1′:v1′, … km’:vm’} (注：读取的keySet和更新的keySet’可能不同)</li>
<li>update: 把keyValueSet’更新到D （注：D保证在一次调用更新多个key的原子性）</li>
<li>在没有事务支持的情况下，多个L进行并发处理可能会导致数据一致性问题。比如，考虑L1和L2的如下执行顺序：</li>
</ol>
<ul>
<li>L1从D读取key:123对应的值100</li>
<li>L2从D读取key:123对应的100</li>
<li>L1将key:123更新为100 + 1</li>
<li>L2将key:123更新为100 + 2</li>
</ul>
<p>如果L1和L2串行执行，key:123对应的值将为103，但上面并发执行中L1的执行效果完全被L2所覆盖，实际key:123所对应的值变成了102。</p>
<a id="more"></a>
<h1 id="解决方案1：基于锁的事务"><a href="#解决方案1：基于锁的事务" class="headerlink" title="解决方案1：基于锁的事务"></a>解决方案1：基于锁的事务</h1><p>为了让L的处理具有可串行化特性(Serializability)，一种最直接的解决方案就是考虑为D加上基于锁的简单事务。让L在进行业务处理前先锁定D，完成以后释放锁。另外，为了防止持有锁的L由于某种原因长时间未提交事务，D还需要具有超时机制，当L尝试提交一个已超时的事务时会得到一个错误响应。</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6-MVCC-%E5%9C%A8%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/1.png" alt=""></p>
<p>本方案的优点是实现简单，缺点是锁定了整个数据集，粒度太大；时间上包含了L的整个处理时间，跨度太长。虽然我们可以考虑把锁定粒度降低到数据项级别，按key进行锁定，但这又会带来其他的问题。由于更新的keySet’可能是事先不确定的，所以可能无法在开始事务时锁定所有的key；如果分阶段来锁定需要的key，又可能出现死锁(Deadlock)问题。另外，按key锁定在有锁争用的情况下并不能解决锁定时间太长的问题。所以，按key锁定仍然存在重要的不足之处。</p>
<h1 id="解决方案2：多版本并发控制"><a href="#解决方案2：多版本并发控制" class="headerlink" title="解决方案2：多版本并发控制"></a>解决方案2：多版本并发控制</h1><p>为了实现可串行化，同时避免锁机制存在的各种问题，我们可以采用基于多版本并发控制（Multiversion concurrency control，MVCC）思想的无锁事务机制。人们一般把基于锁的并发控制机制称成为悲观机制，而把MVCC机制称为乐观机制。这是因为锁机制是一种预防性的，读会阻塞写，写也会阻塞读，当锁定粒度较大，时间较长时并发性能就不会太好；而MVCC是一种后验性的，读不阻塞写，写也不阻塞读，等到提交的时候才检验是否有冲突，由于没有锁，所以读写不会相互阻塞，从而大大提升了并发性能。我们可以借用源代码版本控制来理解MVCC，每个人都可以自由地阅读和修改本地的代码，相互之间不会阻塞，只在提交的时候版本控制器会检查冲突，并提示merge。目前，Oracle、PostgreSQL和MySQL都已支持基于MVCC的并发机制，但具体实现各有不同。</p>
<p>MVCC的一种简单实现是基于CAS（Compare-and-swap）思想的有条件更新（Conditional Update）。普通的update参数只包含了一个keyValueSet’，Conditional Update在此基础上加上了一组更新条件conditionSet { … data[keyx]=valuex, … }，即只有在D满足更新条件的情况下才将数据更新为keyValueSet’；否则，返回错误信息。这样，L就形成了如下图所示的Try/Conditional Update/(Try again)的处理模式：</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6-MVCC-%E5%9C%A8%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/2.png" alt=""></p>
<p>虽然对单个L来讲不能保证每次都成功更新，但从整个系统来看，总是有任务能够顺利进行。这种方案利用Conditional Update避免了大粒度和长时间的锁定，当各个业务之间资源争用不大的情况下，并发性能很好。不过，由于Conditional Update需要更多的参数，如果condition中value的长度很长，那么每次网络传送的数据量就会比较大，从而导致性能下降。特别是当需要更新的keyValueSet’很小，而condition很大时，就显得非常不经济。</p>
<p>为了避免condition太大所带来的性能问题，可以为每条数据项增加一个int型的版本号字段，由D维护该版本号，每次数据有更新就增加版本号；L在进行Conditional Update时，通过版本号取代具体的值。</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6-MVCC-%E5%9C%A8%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/3.png" alt=""></p>
<p>另一个问题是上面的解决方案假设了D是可以支持Conditional Update的；那么，如果D是一个不支持Conditional Update的第三方的key-value存储怎么办呢？这时，我们可以在L和D之间增加一个P作为代理，所有的CRUD操作都必须经过P，让P来进行条件检查，而实际的数据操作放在D。这种方式实现了条件检查和数据操作的分离，但同时降低了性能，需要在P中增加cache，提升性能。由于P是D的唯一客户端；所以，P的cache管理是非常简单的，不必像多客户端情形担心缓存的失效。不过，实际上，据我所知redis和Amazon SimpleDB都已经有了Conditional Update的支持。</p>
<h1 id="悲观锁和MVCC对比"><a href="#悲观锁和MVCC对比" class="headerlink" title="悲观锁和MVCC对比"></a>悲观锁和MVCC对比</h1><p>上面介绍了悲观锁和MVCC的基本原理，但是对于它们分别适用于什么场合，不同的场合下两种机制优劣具体表现在什么地方还不是很清楚。这里我就对一些典型的应用场景进行简单的分析。需要注意的是下面的分析不针对分布式，悲观锁和MVCC两种机制在分布式系统、单数据库系统、甚至到内存变量各个层次都存在。</p>
<h2 id="场景1：对读的响应速度要求高"><a href="#场景1：对读的响应速度要求高" class="headerlink" title="场景1：对读的响应速度要求高"></a>场景1：对读的响应速度要求高</h2><p>有一类系统更新特别频繁，并且对读的响应速度要求很高，如股票交易系统。在悲观锁机制下，写会阻塞读，那么当有写操作时，读操作的响应速度就会受到影响；而MVCC不存在读写锁，读操作是不受任何阻塞的，所以读的响应速度会更快更稳定。</p>
<h2 id="场景2：读远多于写"><a href="#场景2：读远多于写" class="headerlink" title="场景2：读远多于写"></a>场景2：读远多于写</h2><p>对于许多系统来讲，读操作的比例往往远大于写操作，特别是某些海量并发读的系统。在悲观锁机制下，当有写操作占用锁，就会有大量的读操作被阻塞，影响并发性能；而MVCC可以保持比较高且稳定的读并发能力。</p>
<h2 id="场景3：写操作冲突频繁"><a href="#场景3：写操作冲突频繁" class="headerlink" title="场景3：写操作冲突频繁"></a>场景3：写操作冲突频繁</h2><p>如果系统中写操作的比例很高，且冲突频繁，这时就需要仔细评估。假设两个有冲突的业务L1和L2，它们在单独执行是分别耗时t1，t2。在悲观锁机制下，它们的总时间大约等于串行执行的时间：</p>
<p><code>T = t1 + t2</code></p>
<p>而在MVCC下，假设L1在L2之前更新，L2需要retry一次，它们的总时间大约等于L2执行两次的时间（这里假设L2的两次执行耗时相等，更好的情况是，如果第1次能缓存下部分有效结果，第二次执行L2耗时是可能减小的）：</p>
<p><code>T’ = 2 * t2</code></p>
<p>这时关键是要评估retry的代价，如果retry的代价很低，比如，对某个计数器递增，又或者第二次执行可以比第一次快很多，这时采用MVCC机制就比较适合。反之，如果retry的代价很大，比如，报表统计运算需要算几小时甚至一天那就应该采用锁机制避免retry。</p>
<p>从上面的分析，我们可以简单的得出这样的结论：对读的响应速度和并发性要求比较高的场景适合MVCC；而retry代价越大的场景越适合悲观锁机制。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文介绍了一种基于多版本并发控制（MVCC）思想的Conditional Update解决分布式系统并发控制问题的方法。和基于悲观锁的方法相比，该方法避免了大粒度和长时间的锁定，能更好地适应对读的响应速度和并发性要求高的场景。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://en.wikipedia.org/wiki/Serializability" target="_blank" rel="external">Wikipedia – Serializability</a><br><a href="http://en.wikipedia.org/wiki/Compare-and-swap" target="_blank" rel="external">Wikipedia – Compare-and-swap</a><br><a href="http://en.wikipedia.org/wiki/Multiversion_concurrency_control" target="_blank" rel="external">Wikipedia – Multiversion concurrency control</a><br><a href="http://blogs.msdn.com/b/oldnewthing/archive/2011/04/12/10152296.aspx" target="_blank" rel="external">Lock-free algorithms: The try/commit/(try again) pattern</a><br><a href="http://aws.amazon.com/simpledb/faqs/#Does_Amazon_SimpleDB_support_transactions" target="_blank" rel="external">Amazon SimpleDB FAQs – Does Amazon SimpleDB support transactions?</a><br><a href="http://redis.io/topics/transactions" target="_blank" rel="external">redis – Transactions</a><br><a href="http://simpledbm.googlecode.com/files/mvcc-survey-1.0.pdf" target="_blank" rel="external">A Quick Survey of MultiVersion Concurrency Algorithms</a><br><a href="http://www.cnblogs.com/jobs/archive/2007/11/13/957446.html" target="_blank" rel="external">非阻塞算法思想在关系数据库应用程序开发中的使用</a></p>
<p>本文转载自：<a href="http://coolshell.cn/articles/6790.html" target="_blank" rel="external">http://coolshell.cn/articles/6790.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;p&gt;最近项目中遇到了一个分布式系统的并发控制问题。该问题可以抽象为：某分布式系统由一个数据中心D和若干业务处理中心L1，L2 … Ln组成；D本质上是一个key-value存储，它对外提供基于HTTP协议的CRUD操作接口。L的业务逻辑可以抽象为下面3个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;read: 根据keySet {k1, … kn}从D获取keyValueSet {k1:v1, … kn:vn}&lt;/li&gt;
&lt;li&gt;do: 根据keyValueSet进行业务处理，得到需要更新的数据集keyValueSet’ {k1′:v1′, … km’:vm’} (注：读取的keySet和更新的keySet’可能不同)&lt;/li&gt;
&lt;li&gt;update: 把keyValueSet’更新到D （注：D保证在一次调用更新多个key的原子性）&lt;/li&gt;
&lt;li&gt;在没有事务支持的情况下，多个L进行并发处理可能会导致数据一致性问题。比如，考虑L1和L2的如下执行顺序：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;L1从D读取key:123对应的值100&lt;/li&gt;
&lt;li&gt;L2从D读取key:123对应的100&lt;/li&gt;
&lt;li&gt;L1将key:123更新为100 + 1&lt;/li&gt;
&lt;li&gt;L2将key:123更新为100 + 2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果L1和L2串行执行，key:123对应的值将为103，但上面并发执行中L1的执行效果完全被L2所覆盖，实际key:123所对应的值变成了102。&lt;/p&gt;
    
    </summary>
    
      <category term="分布式" scheme="http://www.javacn.top/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="转载" scheme="http://www.javacn.top/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="算法" scheme="http://www.javacn.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="MVCC" scheme="http://www.javacn.top/tags/MVCC/"/>
    
      <category term="并发" scheme="http://www.javacn.top/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>分布式系统常用思想和技术总结</title>
    <link href="http://www.javacn.top/20170427/think_in_distributed_tec/"/>
    <id>http://www.javacn.top/20170427/think_in_distributed_tec/</id>
    <published>2017-04-27T03:40:48.000Z</published>
    <updated>2017-05-03T03:17:39.537Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分布式系统的难点"><a href="#分布式系统的难点" class="headerlink" title="分布式系统的难点"></a>分布式系统的难点</h1><p>分布式系统比起单机系统存在哪些难点呢？</p>
<h2 id="网络因素"><a href="#网络因素" class="headerlink" title="网络因素"></a>网络因素</h2><p>由于服务和数据分布在不同的机器上，每次交互都需要跨机器运行，这带来如下几个问题：</p>
<ul>
<li>网络延迟：性能、超时</li>
</ul>
<p>同机房的网络IO还是比较块的，但是跨机房，尤其是跨IDC，网络IO就成为不可忽视的性能瓶颈了。并且，延迟不是带宽，带宽可以随便增加，千兆网卡换成万兆，只是成本的问题，但延迟是物理限制，基本不可能降低。</p>
<p>这带来的问题就是系统整体性能的降低，会带来一系列的问题，比如资源的锁住，所以系统调用一般都要设置一个超时时间进行自我保护，但是过度的延迟就会带来系统的RPC调用超时，引发一个令人头疼的问题：分布式系统调用的三态结果：成功、失败、超时。不要小看这个第三态，这几乎是所有分布式系统复杂性的根源。</p>
<a id="more"></a>
<p>针对这个问题有一些相应的解决方案：异步化，失败重试。 而对于跨IDC数据分布带来的巨大网络因素影响，则一般会采用数据同步，代理专线等处理方式。</p>
<ul>
<li>网络故障：丢包、乱序、抖动。</li>
</ul>
<p>这个可以通过将服务建立在可靠的传输协议上来解决，比如TCP协议。不过带来的是更多的网络交互。因此是性能和流量的一个trade off。这个在移动互联网中更需要考虑。</p>
<h2 id="鱼与熊掌不可兼得——CAP定律"><a href="#鱼与熊掌不可兼得——CAP定律" class="headerlink" title="鱼与熊掌不可兼得——CAP定律"></a>鱼与熊掌不可兼得——CAP定律</h2><p>CAP理论是由Eric Brewer提出的分布式系统中最为重要的理论之一：</p>
<ol>
<li>Consistency：[强]一致性，事务保障，ACID模型。</li>
<li>Availiablity：[高]可用性，冗余以避免单点，至少做到柔性可用（服务降级）。</li>
<li>Partition tolerance：[高]可扩展性（分区容忍性）：一般要求系统能够自动按需扩展，比如HBase。</li>
</ol>
<p>CAP原理告诉我们，这三个因素最多只能满足两个，不可能三者兼顾。对于分布式系统来说，分区容错是基本要求，所以必然要放弃一致性。对于大型网站来说，分区容错和可用性的要求更高，所以一般都会选择适当放弃一致性。对应CAP理论，NoSQL追求的是AP，而传统数据库追求的是CA，这也可以解释为什么传统数据库的扩展能力有限的原因。</p>
<p>在CAP三者中，“<strong><em>可扩展性</em></strong>”是分布式系统的特有性质。<em>分布式系统的设计初衷就是利用集群多机的能力处理单机无法解决的问题</em>。当需要扩展系统性能时，<em>一种做法是优化系统的性能或者升级硬件(scale up)，一种做法就是“简单”的增加机器来扩展系统的规模(scale out)</em>。好的分布式系统总在追求”<strong><em>线性扩展性</em></strong>”，即<strong>性能可以随集群数量增长而线性增长</strong>。</p>
<p>可用性和可扩展性一般是相关联的，可扩展行好的系统，其可用性一般会比较高，因为有多个服务(数据)节点，不是整体的单点。所以<strong>分布式系统的所有问题，基本都是在一致性与可用性和可扩展性这两者之间的一个协调和平衡</strong>。对于没有状态的系统，不存在一致性问题，根据CAP原理，它们的可用性和分区容忍性都是很高，简单的添加机器就可以实现线性扩展。而对于有状态的系统，则需要根据业务需求和特性在CAP三者中牺牲其中的一者。一般来说，交易系统类的业务对一致性的要求比较高，一般会采用ACID模型来保证数据的强一致性，所以其可用性和扩展性就比较差。而其他大多数业务系统一般不需要保证强一致性，只要最终一致就可以了，它们一般采用BASE模型，用最终一致性的思想来设计分布式系统，从而使得系统可以达到很高的可用性和扩展性。</p>
<p>CAP定律其实也是衡量分布式系统的重要指标，另一个重要的指标是性能。</p>
<h2 id="一致性模型"><a href="#一致性模型" class="headerlink" title="一致性模型"></a>一致性模型</h2><p>主要有三种：</p>
<ul>
<li>Strong Consistency（强一致性）：新的数据一旦写入，在任意副本任意时刻都能读到新值。比如：文件系统，RDBMS，Azure Table都是强一致性的。</li>
<li>Week Consistency（弱一致性）：不同副本上的值有新有旧，需要应用方做更多的工作获取最新值。比如Dynamo。</li>
<li>Evantual Consistency（最终一致性）：一旦更新成功，各副本的数据最终将达到一致。</li>
</ul>
<p>从这三种一致型的模型上来说，我们可以看到，Weak和Eventually一般来说是异步冗余的，而Strong一般来说是同步冗余的(多写)，异步的通常意味着更好的性能，但也意味着更复杂的状态控制。同步意味着简单，但也意味着性能下降。</p>
<p>以及其他变体：</p>
<ul>
<li>Causal Consistency（因果一致性）：如果Process A通知Process B它已经更新了数据，那么Process B的后续读取操作则读取A写入的最新值，而与A没有因果关系的C则可以最终一致性。</li>
<li>Read-your-writes Consistency（读你所写一致性）：如果Process A写入了最新的值，那么 Process A的后续操作都会读取到最新值。但是其它用户可能要过一会才可以看到。</li>
<li>Session Consistency（会话一致性）：一次会话内一旦读到某个值，不会读到更旧的值。<br>Monotonic Read Consistency（单调一致性）：一个用户一旦读到某个值，不会读到比这个值更旧的值，其他用户不一定。<br>等等。</li>
</ul>
<p>其中最重要的变体是第二条：<strong>Read-your-Writes Consistency</strong>。特别适用于数据的更新同步，用户的修改马上对自己可见，但是其他用户可以看到他老的版本。Facebook的数据同步就是采用这种原则。</p>
<h1 id="分布式系统常用技术和应用场景"><a href="#分布式系统常用技术和应用场景" class="headerlink" title="分布式系统常用技术和应用场景"></a>分布式系统常用技术和应用场景</h1><ul>
<li>consistent hashing [with virtual node]：一致性哈希，数据分布</li>
<li>vector clock：时钟向量，多版本数据修改</li>
<li>Quorum W+R&gt;N [with vector clock]：抽屉原理，数据一致性的另一种解决方案。时钟向量，多版本数据修改。</li>
<li>Merkle tree [with anti-entropy]：数据复制</li>
<li>MVCC：copy-on-write与snapshot</li>
<li>2PC/3PC：分布式事务</li>
<li>Paxos：强一致性协议</li>
<li>Symmetry and Decentralization：对称性和去中心化。对称性(symmetry)简化了系统的配置和维护。去中心化是对对称性的延伸，可以避免master单点，同时方便集群scale out。</li>
<li>Map-Reduce：分而治之；移动数据不如移动计算。将计算尽量调度到与存储节点在同一台物理机器上的计算节点上进行，这称之为本地化计算。本地化计算是计算调度的一种重要优化。</li>
<li>Gossip协议：节点管理</li>
<li>Lease机制：</li>
</ul>
<h2 id="consistent-hashing：一致性哈希，解决数据均衡分布问题"><a href="#consistent-hashing：一致性哈希，解决数据均衡分布问题" class="headerlink" title="consistent hashing：一致性哈希，解决数据均衡分布问题"></a>consistent hashing：一致性哈希，解决数据均衡分布问题</h2><h3 id="普通hash"><a href="#普通hash" class="headerlink" title="普通hash()"></a>普通hash()</h3><p>我们通常使用的hash算法是hash() mod n，但是如果发生某个节点失效时，无法快速切换到其他节点。为了解决单点故障的问题，我们为每个节点都增加一个备用节点，当某个节点失效时，就自动切换到备用节点上，类似于数据库的master和slave。但是依然无法解决增加或删除节点后，需要做hash重分布的问题，也就是无法动态增删节点。这时就引入了一致性hash的概念 ，将所有的节点分布到一个hash环上，每个请求都落在这个hash环上的某个位置，只需要按照顺时针方向找到的第一个节点，就是自己需要的服务节点。当某个节点发生故障时，只需要在环上找到下一个可用节点即可。<br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8%E6%80%9D%E6%83%B3%E5%92%8C%E6%8A%80%E6%9C%AF%E6%80%BB%E7%BB%93/1.jpg" alt=""></p>
<p>一致性hash算法最常用于分布式cache中，比如注意的memcached。Dynamo也用其作为数据分布算法，并且对一致性算法进行了改进，提出了基于虚拟节点的改进算法，其核心思路是引入虚拟节点，每个虚拟节点都有一个对应的物理节点，而每个物理节点可以对应若干个虚拟节点。</p>
<p>关于一致性hash的更多内容，可以参考笔者另一篇博文：<a href="http://blog.arganzheng.me/posts/thinking-in-distributed-systems.html" target="_blank" rel="external">Memcached的分布式算法学习</a>。</p>
<p>这篇文章也可以看看：<a href="http://timyang.net/architecture/consistent-hashing-practice/" target="_blank" rel="external">某分布式应用实践一致性哈希的一些问题</a></p>
<h3 id="virtual-node"><a href="#virtual-node" class="headerlink" title="virtual node"></a>virtual node</h3><p>前面说过，有的Consistent Hashing的实现方法采用了虚拟节点的思想。使用一般的hash函数的话，服务器的映射地点的分布非常不均匀。因此，使用虚拟节点的思想，为每个物理节点（服务器）在continuum上分配100～200个点。这样就能抑制分布不均匀，最大限度地减小服务器增减时的缓存重新分布。</p>
<h2 id="Quorum-W-R-gt-N：抽屉原理，数据一致性的另一种解决方案"><a href="#Quorum-W-R-gt-N：抽屉原理，数据一致性的另一种解决方案" class="headerlink" title="Quorum W+R&gt;N：抽屉原理，数据一致性的另一种解决方案"></a>Quorum W+R&gt;N：抽屉原理，数据一致性的另一种解决方案</h2><ul>
<li>N: 复制的节点数，即一份数据被保存的份数。 </li>
<li>R: 成功读操作的最小节点数，即每次读取成功需要的份数。 </li>
<li>W: 成功写操作的最小节点数 ，即每次写成功需要的份数。</li>
</ul>
<p>所以 W+R&gt;N的意思是：<strong>对于有N份拷贝的分布式系统，写到W(W&lt;=N)份成功算写成功，读R(R&lt;=N)份数据算读成功。</strong></p>
<p>这三个因素决定了可用性，一致性和分区容错性。W+R&gt;N可以保证数据的一致性(C)，W越大数据一致性越高。这个NWR模型把CAP的选择权交给了用户，让用户自己在功能，性能和成本效益之间进行权衡。</p>
<p>对于一个分布式系统来说，N通常都大于3，也就说同一份数据需要保存在三个以上不同的节点上，以防止单点故障。W是成功写操作的最小节点数，这里的写成功可以理解为“同步”写，比如N=3，W=1，那么只要写成功一个节点就可以了，另外的两份数据是通过异步的方式复制的。R是成功读操作的最小节点数，读操作为什么要读多份数据呢？在分布式系统中，数据在不同的节点上可能存在着不一致的情况，我们可以选择读取多个节点上的不同版本，来达到增强一致性的目的。</p>
<p>NWR模型的一些设置会造成脏数据和版本冲突问题，所以一般要引入vector clock算法来解决这个问题。</p>
<p>需要保证系统中有max(N-W+1,N-R+1)个节点可用。</p>
<p>关于NWR模型，建议阅读 <a href="http://coolshell.cn/articles/10910.html" target="_blank" rel="external">分布式系统的事务处理</a>，写的很通俗易懂。</p>
<h2 id="vector-clock：时钟向量，多版本数据修改"><a href="#vector-clock：时钟向量，多版本数据修改" class="headerlink" title="vector clock：时钟向量，多版本数据修改"></a>vector clock：时钟向量，多版本数据修改</h2><p>参见 <a href="http://coolshell.cn/articles/10910.html" target="_blank" rel="external">分布式系统的事务处理</a>，写的很通俗易懂。</p>
<h2 id="lease机制"><a href="#lease机制" class="headerlink" title="lease机制"></a>lease机制</h2><p>chubby、zookeeper 获得lease（租约）的节点得到系统的承诺：在有效期内数据/节点角色等是有效的，不会变化的。</p>
<p>lease机制的特点：</p>
<ul>
<li>lease颁发过程只需要网络可以单向通信，同一个lease可以被颁发者不断重复向接受方发送。即使颁发者偶尔发送lease失败，颁发者也可以简单的通过重发的办法解决。</li>
<li>机器宕机对lease机制的影响不大。如果颁发者宕机，则宕机的颁发者通常无法改变之前的承诺，不会影响lease的正确性。在颁发者机恢复后，如果颁发者恢复出了之前的lease 信息，颁发者可以继续遵守lease的承诺。如果颁发者无法恢复lease信息，则只需等待一个最大的lease超时时间就可以使得所有的lease都失效，从而不破坏lease机制。</li>
<li>lease机制依赖于有效期，这就要求颁发者和接收者的时钟是同步的。<ul>
<li>如果颁发者的时钟比接收者的时钟慢，则当接收者认为lease已经过期的时候，颁发者依旧认为lease有效。接收者可以用在lease到期前申请新的lease的方式解决这个问题。</li>
<li>如果颁发者的时钟比接收者的时钟快，则当颁发者认为lease已经过期的时候，可能将lease颁发给其他节点，造成承诺失效，影响系统的正确性。对于这种时钟不同步，实践中的通常做法是将颁发者的有效期设置得比接收者的略大，只需大过时钟误差就可以避免对lease的有效性的影响。</li>
</ul>
</li>
</ul>
<p>工程中，常选择的lease时长是10秒级别，这是一个经过验证的经验值，实践中可以作为参考并综合选择合适的时长。</p>
<h3 id="双主问题（脑裂问题）"><a href="#双主问题（脑裂问题）" class="headerlink" title="双主问题（脑裂问题）"></a>双主问题（脑裂问题）</h3><p>lease机制可以解决网络分区问题造成的“双主”问题，即所谓的“脑裂”现象。配置中心为一个节点发放lease，表示该节点可以作为primary节点工作。当配置中心发现primary有问题时，只需要等到前一个primary的lease过期，就可以安全地颁发新的lease给新的primary节点，而不会出现“双主”问题。 在实际系统中，若用一个中心节点作为配置中心发送lease也有很大的风险。实际系统总是使用多个中心节点互为副本，成为一个小的集群，该小集群具有高可用性，对外提供颁发lease的功能。chubby和zookeeper都是基于这样的设计。</p>
<p>chubby一般有五台机器组成一个集群，可以部署成两地三机房。chubby内部的五台机器需要通过Paxos协议选取一个chubby master机器，其它机器是chubby slave，同一时刻只有一个chubby master。chubby相关的数据，比如锁信息，客户端的session信息等都需要同步到整个集群，采用半同步的做法，超过一半的机器成功就可以回复客户端。最后可以确保只有一个和原有的chubby master保持完全同步的chubby slave被选取为新的chubby master。</p>
<h2 id="Gossip协议"><a href="#Gossip协议" class="headerlink" title="Gossip协议"></a>Gossip协议</h2><p>Gossip用于P2P系统中自治节点获悉对集群认识（如集群的节点状态，负载情况等）。 系统中的节点定期互相八卦，很快八卦就在整个系统传开了。 A、B两个节点八卦的方式主要是：A告诉B知道哪些人的什么八卦；B告诉A这些八卦里B知道哪些更新了；B更新A告诉他的八卦…… 说是自治系统，其实节点中还有一些种子节点。种子节点的作用主要是在有新节点加入系统时体现。新节点加入系统中，先与种子节点八卦，新节点获得系统信息，种子节点知道系统中多了新节点。其他节点定期与种子节点八卦的时候就知道有新节点加入了。 各个节点互相八卦的过程中，如果发现某个节点的状态很长时间都没更新，就认为该节点已经宕机了。</p>
<p>Dynamo使用了Gossip协议来做会员和故障检测。</p>
<h2 id="2PC、3PC、Paxos协议-分布式事务的解决方案"><a href="#2PC、3PC、Paxos协议-分布式事务的解决方案" class="headerlink" title="2PC、3PC、Paxos协议: 分布式事务的解决方案"></a>2PC、3PC、Paxos协议: 分布式事务的解决方案</h2><p>分布式事务很难做，所以除非必要，一般来说都是采用最终一致性来规避分布式事务。</p>
<p>目前底层NoSQL存储系统实现分布式事务的只有Google的系统，它在Bigtable之上用Java语言开发了一个系统 <a href="http://research.google.com/pubs/pub36971.html" target="_blank" rel="external">Megastore</a>，实现了两阶段锁，并通过Chubby来避免两阶段锁协调者宕机带来的问题。Megastore实现目前只有简单介绍，还没有相关论文。</p>
<h2 id="2PC"><a href="#2PC" class="headerlink" title="2PC"></a>2PC</h2><p>实现简单，但是效率低，所有参与者需要block，throughput低；无容错，一个节点失败整个事务失败。如果第一阶段完成后，参与者在第二阶没有收到决策，那么数据结点会进入“不知所措”的状态，这个状态会block住整个事务。</p>
<h3 id="3PC"><a href="#3PC" class="headerlink" title="3PC"></a>3PC</h3><p>改进版的2PC，把2PC的第一个段break成了两段: 询问，然后再锁资源，最后真正提交。3PC的核心理念是：在询问的时候并不锁定资源，除非所有人都同意了，才开始锁资源。</p>
<p>3PC比2PC的好处是，如果结点处在P状态（PreCommit）的时候发生了Fail/Timeout的问题，3PC可以继续直接把状态变成C状态（Commit），而2PC则不知所措。</p>
<p>不过3PC实现比较困难，而且无法处理网络分离问题。如果preCommit消息发送后两个机房断开，这时候coordinator所在的机房会abort，剩余的participant会commit。</p>
<h3 id="Paxos"><a href="#Paxos" class="headerlink" title="Paxos"></a>Paxos</h3><p>Paxos的目的是让整个集群的结点对某个值的变更达成一致。Paxos算法是一种基于消息传递的一致性算法。Paxos算法基本上来说是个民主选举的算法——大多数的决定会成个整个集群的统一决定。</p>
<p>任何一个点都可以提出要修改某个数据的提案，是否通过这个提案取决于这个集群中是否有超过半数的结点同意（所以Paxos算法需要集群中的结点是单数）。这个是Paxos相对于2PC和3PC最大的区别，在2f+1个节点的集群中，允许有f个节点不可用。</p>
<p>Paxos的分布式民主选举方式，除了保证数据变更的一致性之外，还常用于单点切换，比如Master选举。</p>
<p>Paxos协议的特点就是难，both 理解 and 实现 :(</p>
<p>关于2PC，3PC和Paxos，强烈推荐阅读 <a href="http://coolshell.cn/articles/10910.html" target="_blank" rel="external">分布式系统的事务处理</a>。</p>
<p>目前大部分支付系统其实还是在2PC的基础上进行自我改进的。一般是引入一个差错处理器，进行差错协调（回滚或者失败处理）。</p>
<h2 id="MVCC：多版本并发控制"><a href="#MVCC：多版本并发控制" class="headerlink" title="MVCC：多版本并发控制"></a>MVCC：多版本并发控制</h2><p>这个是很多RDMS存储引擎实现高并发修改的一个重要实现机制。具体可以参考：</p>
<p><a href="http://coolshell.cn/articles/6790.html" target="_blank" rel="external">多版本并发控制(MVCC)在分布式系统中的应用</a><br><a href="http://vdisk.weibo.com/s/JXBPJ" target="_blank" rel="external">MVCC (Oracle, Innodb, Postgres).pdf</a></p>
<h2 id="Map-Reduce思想"><a href="#Map-Reduce思想" class="headerlink" title="Map-Reduce思想"></a>Map-Reduce思想</h2><ol>
<li>分而治之</li>
<li>移动数据不如移动计算<br>如果计算节点和存储节点位于不同的物理机器则计算的数据需要通过网络传输，此种方式的开销很大。另一种思路是，将计算尽量调度到与存储节点在同一台物理机器上的计算节点上进行，这称之为本地化计算。本地化计算是计算调度的一种重要优化。</li>
</ol>
<h1 id="经典论文和分布式系统学习"><a href="#经典论文和分布式系统学习" class="headerlink" title="经典论文和分布式系统学习"></a>经典论文和分布式系统学习</h1><h2 id="Dynamo"><a href="#Dynamo" class="headerlink" title="Dynamo"></a>Dynamo</h2><h2 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h2><h2 id="LSM-Tree"><a href="#LSM-Tree" class="headerlink" title="LSM Tree"></a>LSM Tree</h2><p>LSM（Log Structured Merge Trees）是B+ Tree一种改进：</p>
<ul>
<li>牺牲了部分读性能，用来大幅提高写性能</li>
<li>思路：拆分树<ul>
<li>首先写WAL，然后记录数据到入到内存中，构建一颗有序子树(memstore)</li>
<li>随着子树越来越大，内存的子树会flush到磁盘上(storefile)</li>
<li>读取数据：必须遍历所有的有序子树（不知数据在哪棵子树）</li>
<li>Compact：后台线程对磁盘中的子树进行归并，变成大树（子树多了读得慢）</li>
</ul>
</li>
</ul>
<p>事实上，lucene的索引机制也类似Hbase的LSM树。也是写的时候分别写在单独的segment，后台进行segement合并。</p>
<h1 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h1><p><a href="http://www.hellodb.net/2010/04/nosql.html" target="_blank" rel="external">NoSQL漫谈</a><br><a href="http://timyang.net/distributed/multi-idc-consensus/" target="_blank" rel="external">多IDC的数据分布设计(一)</a><br><a href="http://coolshell.cn/articles/10910.html" target="_blank" rel="external">分布式系统的事务处理</a><br><a href="http://qing.blog.sina.com.cn/1765738567/693f08473300067j.html" target="_blank" rel="external">海量存储系列之四-单机事务处理</a><br>本人的一些技术方面的分享集合<br><a href="http://www.slideshare.net/schubertzhang/learning-from-google-megastore-part1-12149098" target="_blank" rel="external">Learning from google megastore (Part-1)</a><br>本文出自：<a href="http://kyle.xlau.org/" target="_blank" rel="external">http://kyle.xlau.org/</a>, 原文地址：<a href="http://arganzheng.me/posts/thinking-in-distributed-systems.html" target="_blank" rel="external">http://arganzheng.me/posts/thinking-in-distributed-systems.html</a>, 感谢原作者分享。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;分布式系统的难点&quot;&gt;&lt;a href=&quot;#分布式系统的难点&quot; class=&quot;headerlink&quot; title=&quot;分布式系统的难点&quot;&gt;&lt;/a&gt;分布式系统的难点&lt;/h1&gt;&lt;p&gt;分布式系统比起单机系统存在哪些难点呢？&lt;/p&gt;
&lt;h2 id=&quot;网络因素&quot;&gt;&lt;a href=&quot;#网络因素&quot; class=&quot;headerlink&quot; title=&quot;网络因素&quot;&gt;&lt;/a&gt;网络因素&lt;/h2&gt;&lt;p&gt;由于服务和数据分布在不同的机器上，每次交互都需要跨机器运行，这带来如下几个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络延迟：性能、超时&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同机房的网络IO还是比较块的，但是跨机房，尤其是跨IDC，网络IO就成为不可忽视的性能瓶颈了。并且，延迟不是带宽，带宽可以随便增加，千兆网卡换成万兆，只是成本的问题，但延迟是物理限制，基本不可能降低。&lt;/p&gt;
&lt;p&gt;这带来的问题就是系统整体性能的降低，会带来一系列的问题，比如资源的锁住，所以系统调用一般都要设置一个超时时间进行自我保护，但是过度的延迟就会带来系统的RPC调用超时，引发一个令人头疼的问题：分布式系统调用的三态结果：成功、失败、超时。不要小看这个第三态，这几乎是所有分布式系统复杂性的根源。&lt;/p&gt;
    
    </summary>
    
      <category term="分布式" scheme="http://www.javacn.top/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="转载" scheme="http://www.javacn.top/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="算法" scheme="http://www.javacn.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="分布式" scheme="http://www.javacn.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>实际项目中分布式ID生成算法</title>
    <link href="http://www.javacn.top/20170427/algorithms_for_distributed_id/"/>
    <id>http://www.javacn.top/20170427/algorithms_for_distributed_id/</id>
    <published>2017-04-27T01:25:38.000Z</published>
    <updated>2017-05-03T03:15:19.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求缘起"><a href="#需求缘起" class="headerlink" title="需求缘起"></a>需求缘起</h1><p>几乎所有的业务系统，都有生成一个记录标识的需求，例如：</p>
<ol>
<li>消息标识：message-id</li>
<li>订单标识：order-id</li>
<li>帖子标识：tiezi-id</li>
</ol>
<p>这个记录标识往往就是数据库中的唯一主键，数据库上会建立聚集索引(cluster index)，即在物理存储上以这个字段排序。</p>
<p>这个记录标识上的查询，往往又有分页或者排序的业务需求，例如：</p>
<ol>
<li>拉取最新的一页消息：<code>select message-id order by time limit 100</code></li>
<li>拉取最新的一页订单：<code>select order-id order by time limit 100</code></li>
<li>拉取最新的一页帖子：<code>select tiezi-id order by time limit 100</code></li>
</ol>
<p>所以往往要有一个time字段，并且在time字段上建立普通索引(non-cluster index)。</p>
<p>我们都知道普通索引存储的是实际记录的指针，其访问效率会比聚集索引慢，如果记录标识在生成时能够基本按照时间有序，则可以省去这个time字段的索引查询：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> message-<span class="keyword">id</span> (<span class="keyword">order</span> <span class="keyword">by</span> message-<span class="keyword">id</span>) <span class="keyword">limit</span> <span class="number">100</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>再次强调，能这么做的前提是，<em>message-id的生成基本是趋势时间递增的</em>。<br>这就引出了记录标识生成(也就是上文提到的三个XXX-id)的两大核心需求：</p>
<ol>
<li><strong>全局唯一</strong></li>
<li><strong>趋势有序</strong><br>这也是本文要讨论的核心问题：<strong>如何高效生成趋势有序的全局唯一ID。</strong></li>
</ol>
<h1 id="常见方法、不足与优化"><a href="#常见方法、不足与优化" class="headerlink" title="常见方法、不足与优化"></a>常见方法、不足与优化</h1><h2 id="常见方法一：使用数据库的-auto-increment-来生成全局唯一递增ID"><a href="#常见方法一：使用数据库的-auto-increment-来生成全局唯一递增ID" class="headerlink" title="常见方法一：使用数据库的 auto_increment 来生成全局唯一递增ID"></a>常见方法一：使用数据库的 auto_increment 来生成全局唯一递增ID</h2><p><strong>优点</strong>：</p>
<ol>
<li>简单，使用数据库已有的功能</li>
<li>能够保证唯一性</li>
<li>能够保证递增性</li>
<li>步长固定</li>
</ol>
<p><strong>缺点</strong>：</p>
<ol>
<li>可用性难以保证：数据库常见架构是一主多从+读写分离，生成自增ID是写请求，主库挂了就玩不转了</li>
<li>扩展性差，性能有上限：因为写入是单点，数据库主库的写性能决定ID的生成性能上限，并且难以扩展</li>
</ol>
<p><strong>改进方法</strong>：</p>
<ol>
<li>增加主库，避免写入单点</li>
<li>数据水平切分，保证各主库生成的ID不重复</li>
</ol>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%AE%9E%E9%99%85%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%88%86%E5%B8%83%E5%BC%8FID%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95/1.png" alt=""></p>
<p>如上图所述，由1个写库变成3个写库，每个写库设置不同的auto_increment初始值，以及相同的增长步长，以保证每个数据库生成的ID是不同的（上图中库0生成0,3,6,9…，库1生成1,4,7,10，库2生成2,5,8,11…）</p>
<p>改进后的架构保证了<strong>可用性</strong>，但<strong>缺点</strong>是：</p>
<ol>
<li>丧失了ID生成的“绝对递增性”：先访问库0生成0,3，再访问库1生成1，可能导致在非常短的时间内，ID生成不是绝对递增的(这个问题不大，我们的目标是趋势递增，不是绝对递增)</li>
<li>数据库的写压力依然很大，每次生成ID都要访问数据库</li>
</ol>
<p>为了解决上述两个问题，引出了第二个常见的方案</p>
<h2 id="常见方法二：单点批量ID生成服务"><a href="#常见方法二：单点批量ID生成服务" class="headerlink" title="常见方法二：单点批量ID生成服务"></a>常见方法二：单点批量ID生成服务</h2><p>分布式系统之所以难，很重要的原因之一是“<em><strong>没有一个全局时钟，难以保证绝对的时序</strong></em>”，要想保证绝对的时序，还是只能使用单点服务，用本地时钟保证“<em>绝对时序</em>”。数据库写压力大，是因为每次生成ID都访问了数据库，可以使用批量的方式降低数据库写压力。</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%AE%9E%E9%99%85%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%88%86%E5%B8%83%E5%BC%8FID%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95/2.png" alt=""></p>
<p>如上图所述，数据库使用双master保证可用性，数据库中只存储当前ID的最大值，例如0。ID生成服务假设每次批量拉取6个ID，服务访问数据库，将当前ID的最大值修改为5，这样应用访问ID生成服务索要ID，ID生成服务不需要每次访问数据库，就能依次派发0,1,2,3,4,5这些ID了，当ID发完后，再将ID的最大值修改为11，就能再次派发6,7,8,9,10,11这些ID了，于是数据库的压力就降低到原来的1/6了。</p>
<p><strong>优点</strong>：</p>
<ol>
<li>保证了ID生成的绝对递增有序</li>
<li>大大的降低了数据库的压力，ID生成可以做到每秒生成几万几十万个</li>
</ol>
<p><strong>缺点</strong>：</p>
<ol>
<li>服务仍然是单点</li>
<li>如果服务挂了，服务重启起来之后，继续生成ID可能会不连续，中间出现空洞（服务内存是保存着0,1,2,3,4,5，数据库中max-id是5，分配到3时，服务重启了，下次会从6开始分配，4和5就成了空洞，不过这个问题也不大）</li>
<li>虽然每秒可以生成几万几十万个ID，但毕竟还是有性能上限，无法进行水平扩展</li>
</ol>
<p><strong>改进方法</strong>：<br>单点服务的常用高可用优化方案是“<strong><em>备用服务</em></strong>”，也叫“<strong><em>影子服务</em></strong>”，所以我们能用以下方法优化上述缺点（1）：</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%AE%9E%E9%99%85%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%88%86%E5%B8%83%E5%BC%8FID%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95/3.png" alt=""></p>
<p>如上图，对外提供的服务是主服务，有一个影子服务时刻处于备用状态，当主服务挂了的时候影子服务顶上。这个切换的过程对调用方是透明的，可以自动完成，常用的技术是vip+keepalived，具体就不在这里展开。</p>
<h2 id="常见方法三：uuid"><a href="#常见方法三：uuid" class="headerlink" title="常见方法三：uuid"></a>常见方法三：uuid</h2><p>上述方案来生成ID，虽然性能大增，但由于是单点系统，总还是存在性能上限的。同时，上述两种方案，不管是数据库还是服务来生成ID，业务方Application都需要进行一次远程调用，比较耗时。有没有一种本地生成ID的方法，即高性能，又时延低呢？</p>
<p><strong><em>uuid是一种常见的方案：string ID =GenUUID();</em></strong></p>
<p><strong>优点</strong>：</p>
<ol>
<li>本地生成ID，不需要进行远程调用，时延低</li>
<li>扩展性好，基本可以认为没有性能上限</li>
</ol>
<p><strong>缺点</strong>：</p>
<ol>
<li>无法保证趋势递增</li>
<li>uuid过长，往往用字符串表示，作为主键建立索引查询效率低，常见优化方案为“转化为两个uint64整数存储”或者“折半存储”（折半后不能保证唯一性）</li>
</ol>
<h2 id="常见方法四：取当前毫秒数"><a href="#常见方法四：取当前毫秒数" class="headerlink" title="常见方法四：取当前毫秒数"></a>常见方法四：取当前毫秒数</h2><p>uuid是一个本地算法，生成性能高，但无法保证趋势递增，且作为字符串ID检索效率低，有没有一种能保证递增的本地算法呢？</p>
<p><strong><em>取当前毫秒数是一种常见方案：uint64 ID = GenTimeMS();</em></strong></p>
<p><strong>优点</strong>：</p>
<ol>
<li>本地生成ID，不需要进行远程调用，时延低</li>
<li>生成的ID趋势递增</li>
<li>生成的ID是整数，建立索引后查询效率高</li>
</ol>
<p><strong>缺点</strong>：</p>
<ol>
<li>如果并发量超过1000，会生成重复的ID</li>
</ol>
<p>我去，这个缺点要了命了，不能保证ID的唯一性。当然，使用微秒可以降低冲突概率，但每秒最多只能生成1000000个ID，再多的话就一定会冲突了，所以使用微秒并不从根本上解决问题。</p>
<h2 id="常见方法五：类snowflake算法"><a href="#常见方法五：类snowflake算法" class="headerlink" title="常见方法五：类snowflake算法"></a>常见方法五：类snowflake算法</h2><p><strong><em>snowflake</em></strong>是twitter开源的分布式ID生成算法，其核心思想是：<em>一个long型的ID，使用其中41bit作为毫秒数，10bit作为机器编号，12bit作为毫秒内序列号。这个算法单机每秒内理论上最多可以生成1000</em>(2^12)，也就是400W的ID，完全能满足业务的需求。*</p>
<p>借鉴snowflake的思想，结合各公司的业务逻辑和并发量，可以实现自己的分布式ID生成算法。</p>
<p>举例，假设某公司ID生成器服务的需求如下：</p>
<ol>
<li>单机高峰并发量小于1W，预计未来5年单机高峰并发量小于10W</li>
<li>有2个机房，预计未来5年机房数量小于4个</li>
<li>每个机房机器数小于100台</li>
<li>目前有5个业务线有ID生成需求，预计未来业务线数量小于10个</li>
<li>…</li>
</ol>
<p>分析过程如下：</p>
<ol>
<li>高位取从2016年1月1日到现在的毫秒数（假设系统ID生成器服务在这个时间之后上线），假设系统至少运行10年，那至少需要10年<em>365天</em>24小时<em>3600秒</em>1000毫秒=320*10^9，差不多预留39bit给毫秒数</li>
<li>每秒的单机高峰并发量小于10W，即平均每毫秒的单机高峰并发量小于100，差不多预留7bit给每毫秒内序列号</li>
<li>5年内机房数小于4个，预留2bit给机房标识</li>
<li>每个机房小于100台机器，预留7bit给每个机房内的服务器标识</li>
<li>业务线小于10个，预留4bit给业务线标识</li>
</ol>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%AE%9E%E9%99%85%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%88%86%E5%B8%83%E5%BC%8FID%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95/4.png" alt=""></p>
<p>这样设计的64bit标识，<strong>优点</strong>是：</p>
<ol>
<li>每个业务线、每个机房、每个机器生成的ID都是不同的</li>
<li>同一个机器，每个毫秒内生成的ID都是不同的</li>
<li>同一个机器，同一个毫秒内，以序列号区区分保证生成的ID是不同的</li>
<li>将毫秒数放在最高位，保证生成的ID是趋势递增的</li>
</ol>
<p><strong>缺点</strong>：</p>
<ol>
<li>由于“没有一个全局时钟”，每台服务器分配的ID是绝对递增的，但从全局看，生成的ID只是趋势递增的(有些服务器的时间早，有些服务器的时间晚)</li>
<li>最后一个容易忽略的问题：<br>生成的ID，例如<code>message-id</code> , <code>order-id</code>,  <code>tiezi-id</code>，在数据量大时往往需要<strong><em>分库分表</em></strong>，这些ID经常作为取模分库分表的依据，为了分库分表后数据均匀，ID生成往往有“<strong><em>取模随机性</em></strong>”的需求，所以我们<strong><em>通常把每秒内的序列号放在ID的最末位，保证生成的ID是随机的</em></strong>。<br>又如果，我们在跨毫秒时，序列号总是归0，会使得序列号为0的ID比较多，导致生成的ID取模后不均匀。解决方法是，<strong><em>序列号不是每次都归0，而是归一个0到9的随机数</em></strong>，这个地方。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;需求缘起&quot;&gt;&lt;a href=&quot;#需求缘起&quot; class=&quot;headerlink&quot; title=&quot;需求缘起&quot;&gt;&lt;/a&gt;需求缘起&lt;/h1&gt;&lt;p&gt;几乎所有的业务系统，都有生成一个记录标识的需求，例如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;消息标识：message-id&lt;/li&gt;
&lt;li&gt;订单标识：order-id&lt;/li&gt;
&lt;li&gt;帖子标识：tiezi-id&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个记录标识往往就是数据库中的唯一主键，数据库上会建立聚集索引(cluster index)，即在物理存储上以这个字段排序。&lt;/p&gt;
&lt;p&gt;这个记录标识上的查询，往往又有分页或者排序的业务需求，例如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;拉取最新的一页消息：&lt;code&gt;select message-id order by time limit 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;拉取最新的一页订单：&lt;code&gt;select order-id order by time limit 100&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;拉取最新的一页帖子：&lt;code&gt;select tiezi-id order by time limit 100&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以往往要有一个time字段，并且在time字段上建立普通索引(non-cluster index)。&lt;/p&gt;
&lt;p&gt;我们都知道普通索引存储的是实际记录的指针，其访问效率会比聚集索引慢，如果记录标识在生成时能够基本按照时间有序，则可以省去这个time字段的索引查询：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; message-&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; message-&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;limit&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="分布式" scheme="http://www.javacn.top/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="转载" scheme="http://www.javacn.top/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="算法" scheme="http://www.javacn.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="分布式" scheme="http://www.javacn.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>实际项目中数据结构—队列的应用</title>
    <link href="http://www.javacn.top/20170427/data_structure_queue/"/>
    <id>http://www.javacn.top/20170427/data_structure_queue/</id>
    <published>2017-04-27T01:07:13.000Z</published>
    <updated>2017-05-03T03:14:52.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="队列："><a href="#队列：" class="headerlink" title="队列："></a>队列：</h1><p><strong>一种数据结构，有非阻塞对列和阻塞对列</strong>  </p>
<p><strong>特点</strong>：先进先出 </p>
<p><strong>两种典型操作</strong>：队尾添加、队头删除</p>
<p><strong>非阻塞对列</strong>：当对列满或空时进行插入或者读取删除操作，抛出异常或者返回false,不对当前线程阻塞，没有同步或者唤醒策略。</p>
<p><strong>阻塞对列</strong>：当队列是空的时，从队列中获取元素的操作将会被阻塞，或者当队列是满时，往队列里添加元素的操作会被阻塞。</p>
<a id="more"></a>
<h1 id="阻塞队列使用："><a href="#阻塞队列使用：" class="headerlink" title="阻塞队列使用："></a>阻塞队列使用：</h1><p><strong>多线程协调，合作</strong></p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%AE%9E%E9%99%85%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E2%80%94%E9%98%9F%E5%88%97%E7%9A%84%E5%BA%94%E7%94%A8/20161025100509354.png" alt="image"></p>
<p>线程1往阻塞队列中添加元素，而线程2从阻塞队列中移除元素。  </p>
<h1 id="java中阻塞队列种类："><a href="#java中阻塞队列种类：" class="headerlink" title="java中阻塞队列种类："></a>java中阻塞队列种类：</h1><p><code>LinkedBlockingQueue</code>：由链表结构组成的有界阻塞队列，此队列按FIFO（先进先出）排序元素。此队列的默认和最大长度为Integer.MAX_VALUE。</p>
<p><code>LinkedTransferQueue</code>：由链表结构组成的无界阻塞队列。</p>
<p><code>LinkedBlockingDeque</code>：由链表结构组成的双向阻塞队列。</p>
<p><code>ArrayBlockingQueue</code>：由数组结构组成的有界阻塞队列。此队列按FIFO（先进先出）原则对元素进行排序。构造时需要指定容量，并可以选择是否需要公平性。如果公平参数被设置true，等待时间最长的线程会优先得到处理，会使你在性能上付出代价。</p>
<p><code>PriorityBlockingQueue</code>：支持优先级排序的无界阻塞队列，而不是先进先出队列。元素按优先级顺序被移除，该队列也没有上限，put时是不会受阻的，对列为空，take时就会阻塞。进入该队列中的元素要具有比较能力。默认情况下元素采取自然顺序排列，也可以通过比较器comparator来指定元素的排序规则。元素按照升序排列。</p>
<p><code>DelayQueue</code>：是一个存放Delayed元素的无界阻塞队列，只有在延迟期满时才能从中提取元素。该队列的头部是延迟期满后保存时间最长的Delayed元素。如果延迟都还没有期满，则队列没有头部，并且poll将返回null。当一个元素的<code>getDelay(TimeUnit.NANOSECONDS)</code>方法返回一个小于或等于零的值时，则出现期满，poll就以移除这个元素了。此队列不允许使用 null 元素。</p>
<p>DelayQueue运用在以下应用场景：</p>
<ul>
<li><strong>缓存系统的设计</strong>：可以用DelayQueue保存缓存元素的有效期，使用一个线程循环查询DelayQueue，一旦能从DelayQueue中获取元素时，表示缓存有效期到了。</li>
<li><strong>定时任务调度</strong>：使用DelayQueue保存当天将会执行的任务和执行时间，一旦从DelayQueue中获取到任务就开始执行，从比如TimerQueue就是使用DelayQueue实现的。</li>
</ul>
<p><code>SynchronousQueue</code>：不存储元素的阻塞队列。每一个put操作必须等待一个take操作，否则不能继续添加元素。SynchronousQueue可以看成是一个传球手，负责把生产者线程处理的数据直接传递给消费者线程。队列本身并不存储任何元素，非常适合于传递性场景,比如在一个线程中使用的数据，传递给另外一个线程使用，SynchronousQueue的吞吐量高于LinkedBlockingQueue和ArrayBlockingQueue。</p>
<h1 id="阻塞队列控制线程操作实例"><a href="#阻塞队列控制线程操作实例" class="headerlink" title="阻塞队列控制线程操作实例"></a>阻塞队列控制线程操作实例</h1><p>多线程操作共同的队列时不需要额外的同步，队列会自动平衡负载，即那边（生产与消费两边）处理快了就会被阻塞掉，从而减少两边的处理速度差距。不需要再单独考虑同步和线程间通信的问题。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> queueSize = <span class="number">10</span>;</div><div class="line">    <span class="keyword">private</span> ArrayBlockingQueue&lt;Integer&gt; queue = <span class="keyword">new</span> ArrayBlockingQueue&lt;Integer&gt;(queueSize);</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Test test = <span class="keyword">new</span> Test();</div><div class="line">        Producer producer = test.new Producer();</div><div class="line">        Consumer consumer = test.new Consumer();</div><div class="line">        producer.start();</div><div class="line">        consumer.start();</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            consume();</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    queue.take();</div><div class="line">                    System.out.println(<span class="string">"从队列取走一个元素，队列剩余"</span>+queue.size()+<span class="string">"个元素"</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            produce();</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">produce</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    queue.put(<span class="number">1</span>);</div><div class="line">                    System.out.println(<span class="string">"向队列取中插入一个元素，队列剩余空间："</span>+(queueSize-queue.size()));</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在并发编程中，一般推荐使用阻塞队列，这样实现可以尽量地避免程序出现意外的错误。<br>阻塞队列使用最经典的场景就是socket客户端数据的读取和解析，读取数据的线程不断将数据放入队列，然后解析线程不断从队列取数据解析。还有其他类似的场景，只要符合生产者-消费者模型的都可以使用阻塞队列。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;队列：&quot;&gt;&lt;a href=&quot;#队列：&quot; class=&quot;headerlink&quot; title=&quot;队列：&quot;&gt;&lt;/a&gt;队列：&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;一种数据结构，有非阻塞对列和阻塞对列&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;特点&lt;/strong&gt;：先进先出 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;两种典型操作&lt;/strong&gt;：队尾添加、队头删除&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;非阻塞对列&lt;/strong&gt;：当对列满或空时进行插入或者读取删除操作，抛出异常或者返回false,不对当前线程阻塞，没有同步或者唤醒策略。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;阻塞对列&lt;/strong&gt;：当队列是空的时，从队列中获取元素的操作将会被阻塞，或者当队列是满时，往队列里添加元素的操作会被阻塞。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构与算法" scheme="http://www.javacn.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="转载" scheme="http://www.javacn.top/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="队列" scheme="http://www.javacn.top/tags/%E9%98%9F%E5%88%97/"/>
    
      <category term="数据结构" scheme="http://www.javacn.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>小身材，大味道——Leopold FC660M铝板红轴机械键盘简评</title>
    <link href="http://www.javacn.top/20170425/leopold_fc660m_cons/"/>
    <id>http://www.javacn.top/20170425/leopold_fc660m_cons/</id>
    <published>2017-04-25T10:27:50.000Z</published>
    <updated>2017-05-03T03:13:00.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>标题借用一下某副食品广告的宣传语。用过手中这块Leopold的FC660M新款铝板红轴机械键盘后，除了“小身材，大味道”，实在是找不出更为贴切的用词来形容它了：<strong>紧凑的键位，却能尝出远超一般紧凑键盘的味道。</strong></p>
<p>Leopold这个品牌，以及代理FC660M等型号产品的志海和团队楼主不多做介绍，前人之述备矣，估计多数玩家对此比楼主更加熟悉。FC660M属于系列中比较流行，有一定保有量的一个型号，除了产品自身的品质，在外壳、键帽、轴型等方面的刻意求工和可DIY性都是量产键盘中非常少见的，也是为FC660M加分的砝码。</p>
<p>这次的新品，实际上是Leopold升级的一批彩色铝板FC660M，旨在用彩铝板进一步提升细节上的感觉，同时在保持机械质感的基础上尽可能让键盘变得更轻便。外壳颜色有蓝色、纯白和香槟金等，据称铝板颜色与外壳一致。轴型增加了Cherry MX红轴。楼主手中这块为样品，不能保证与市售产品完全一致，文字将以介绍为主，当中会夹杂一些主观的评价，请各位各取所需，顺便欢迎互喷。</p>
<p>早期的FC660M是有蓝黑色封套的，后来全部更换为无图案的牛皮瓦楞纸包装盒，用的纸板材质很硬，盒子折线棱角非常凌厉，整体倒是多了几分复古的美感。其实这种风格上的简化是受不少人欢迎的，因为封套这玩意大多是见光死，而且对于以后的收纳取用来说就是个累赘。<br><a id="more"></a><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/1.jpg" alt=""></p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/2.jpg" alt=""></p>
<p>盒盖右上角印了LEOPOLD International的字样，之前的热升华标贴不见了，说明键帽大概是更改了刻印工艺。盒子左侧贴了规格参数，包括轴型、键数键距、尺寸重量等一系列信息，具体看图吧，自认为拍的很清楚，就不详细列举了。接口USB/PS2均可，特别标注了“采用PS2专用转换头”——但是据楼主了解，FC660M就从来没给配过USB-PS2转接口，这着实让人有点没脾气。此外，支持的系统中有Win8，但是依然没有苹果的Mac OS，貌似能支持Mac OS的机械键盘确实很少，楼(jiao)主(ni)为(men)此(you)感(qian)到(ren)略(mai)遗(Mac)憾(ha)啊(ha)。</p>
<p>盒子下缘还贴有一张型号、名称的标签。可以看到型号为FC660MR/PPW3，至于每一项代表什么意思，逐个对照下面的中文能基本弄明白，其中PP这两项楼主专门问过有关部门，得到的答案是粉色代号。对此楼主猜测可能是考虑到实际配色的效果，对色系进行了调整，总之不要在意这些细节就对了。<br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/3.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/4.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/5.jpg" alt=""></p>
<p>打开颇具逼格的双排扣(什么鬼)，内部附件包含键盘、键盘线、拔键器和印刷品。实际上拔键器是在包装盒外面的，盒子内部空间由一块纸板分隔成两个区域，分别放置键盘和键盘线，已经没有多余的地方来容纳这个凹凸有致的拔键器了，就当是额外附送的吧，心理感觉还能更棒一些。</p>
<p>键盘外面包裹的塑料袋上有警示语，这主要是针对袋子写的，大意是别让熊孩子们靠近这个袋子，不小心被塑料薄膜封住嘴巴鼻子可不是闹着玩的——好吧，这个不点赞恐怕有点不道德。总体来讲，附件虽然略显简单，但是给人感觉很“干净”，会产生一种莫名的好感。</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/6.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/7.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/8.jpg" alt=""></p>
<h1 id="键盘本体"><a href="#键盘本体" class="headerlink" title="键盘本体"></a>键盘本体</h1><p>键盘本体。配列显然是FC660M的主要亮点，也是一些玩家会爱上它的重要原因。一共有66键，与常规的60%键盘(61键)相比，增加了四个方向键、两个功能键，去掉了一个1.25×键位。方向键独立，采用嵌入的方式与主键区连接在一起，同时将常规的Win键改成了1×规格；将RShift改成了2.25×规格(与LShift相同)。倒置RCtrl与Fn键位——这大概是为了保留Fn键常规的位置以迎合人们使用组合键的习惯——当然喜欢用RCtrl的兄弟们就会比较杯具了。Ins与Del键使用独立键位，这是FC660M的一个标志性设计，也为不少用户所称道。不过楼主平时很少用到这两个键，对该设计的好感仅仅是因为它对整个键盘的点缀作用，有这么一点特立独行的味道，在一定程度上增加了逼格。</p>
<p>白色键帽、香槟金色外壳(略带一些淡粉的感觉，或许是P代号的由来)，整体感觉清新而淡雅。</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/9.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/10.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/11.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/12.jpg" alt="">  </p>
<p>底盘使用了Leopold常用的防滑垫排布，撑脚上也有胶套，实测防滑能力很厚道。中间是贴纸铭牌。</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/13.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/14.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/15.jpg" alt=""> </p>
<p>底盘左侧有一个四位DIP开关，具体作用如下：</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/16.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/17.jpg" alt=""></p>
<p>FC660M的键帽接近原厂高度，比常规的OEM键帽矮一些，但是纵向的阶梯感仍很突出。支起撑脚后键帽整体表面与水平面形成一个约12°的完美夹角。</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/18.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/19.jpg" alt=""></p>
<p>常规的窄边框设计。外壳是ABS材质，喷漆的效果酷似铝材的阳极氧化工艺。键盘线接口使用的依然是较传统的MiniUSB，位置在外壳上缘的右侧，四周做了内陷，可惜口大了点，无法对键盘线的USB头起到固定作用，仅仅属于美观设计。</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/20.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/21.jpg" alt=""></p>
<p>键帽的白色很正，但又没有白得过分刺眼，略显柔和的感觉。刻印方式确认是激光蚀刻，不过触摸表面几乎感觉不到字符的凸起，工艺水平很高。与早期版本不同，组合键的侧刻同样使用了激光蚀刻，使之整体看起来更统一、协调。</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/22.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/23.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/24.jpg" alt=""></p>
<p>加厚的PBT键帽，手感非常扎实，十字菊花做了倒角处理，易于安装。Caps和Ins两个键灯窗也很精致。唯一可惜的地方在于这一版本的白色空格键改回了三菊花——尽管这对FC660M本身并不影响什么。</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/25.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/26.jpg" alt=""></p>
<p>键盘线是常规的胶线，镀金USB口、抗屏蔽磁环、理线带等一应俱全，接口上还套了保护罩，连MiniUSB口上都有，俨然是高配线材的赶脚，美中不足是线有点硬。</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/27.jpg" alt=""></p>
<p>Leopold原装的拔键器，做工非常精致，柄上有阴刻的Leopold标识，手柄长度较短，便于收纳携带。(楼主有不少Filco的拔键器，手柄都偏长，放袋子里就不太方便)</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/28.jpg" alt=""></p>
<p>拔掉键帽看轴，那是一片红彤彤的光景，让人忍不住要唱一首《好日子》(有完没完了)。楼主刚入门的时候，还没有OEM红轴键盘可选，后来逐渐烂大街，红轴党们也是铺天盖地，而现在樱桃只对部分品牌供轴了，似乎又紧俏了起来，真是风水轮流转(你个头啊)。</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/29.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/30.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/31.jpg" alt=""></p>
<p>全键盘正装轴，仅有的两个带灯键位采用的是234方形LED，基本上大神们都很推崇这种灯珠，不管是体积还是发光效果用作按键背光确实要更合适些。至于轴体正装这事，背光党们其实也用不着觉得蛋疼——因为板子不留灯位这一点早已经让你们蛋碎了，身为反背光党楼主感觉毫无压力。而说回来，这更多的是产品风格和方向问题吧，楼主觉得只要不是那种离了灯就没法活的人，应该还是能接受牺牲掉一点炫酷来换取一些纯粹的质感的。</p>
<p>大键位采用的是卫星轴，手感调节尚可，按起来虽然不能说爽脆，但是没什么特别肉的感觉，并且继承了卫星轴大键下盘扎实的特点，个人还是比较喜爱这种手感的。空格键的伪轴位置与其它键盘有或多或少的区别，这给替换第三方空格带来了一定的困难，好在志海和本身就是做键帽的大户，这方面基本上是一条龙服务。</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/32.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/33.jpg" alt=""></p>
<h1 id="拆解"><a href="#拆解" class="headerlink" title="拆解"></a>拆解</h1><p>进入拆解篇。全键盘只使用了一颗螺丝，位置在DIP开关旁OK贴下方。卸掉螺丝，再撬开上下边的八个卡榫就行了。值得注意的一点是：下缘两边的那两个卡榫特别难撬，要用点力气；上缘MiniUSB口附近的那个卡榫别大力艹，避免弄断镂空位置的细边。</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/34.jpg" alt=""></p>
<p>铝板采用了阳极氧化的工艺，这也是亮点之一。颜色目测并不是纯正的香槟金，而是银色同时似乎看着又有点淡粉色在里面，就这一问题楼主也咨询过有关部门，得到的解释是阳极的香槟金色系颜色很重，真实效果不太耐看，因此换成了浅粉色(不知道是楼主色差还是粉色确实很微弱，总体颜色感觉接近银白)。</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/35.jpg" alt="">  </p>
<p>铝板上下边钣金处理成向上弯曲，正好嵌入到上壳内部以起到额外的支撑作用；四角全部切去了一小部分，用于容纳上壳内部的加强筋结构；铝板四条边均压住底盘边缘，按键力道全部由铝板和底盘承受，避免了PCB额外受力。底板上有两个限位＋支撑柱，同时与底盘三面都连接有加强筋，力学设计虽不复杂，但支撑一块铝板已是非常周到。</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/36.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/37.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/38.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/39.jpg" alt=""></p>
<p>湖蓝色喷油、玻纤基板、双面电路PCB。背面布线较为简洁，留有大面积的覆铜。电路标注得很详细，包括键位、元件指示。支持日版配列，并且标示在了对应的空余轴位上。原装使用的是三脚轴，但留有安装五角轴的孔。除了方向键，其余键位都没有预留灯位。方向键同样是轴体正装，或许可以用测刻透光键帽来展示这一缕仅存的骚气。</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/40.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/41.jpg" alt=""></p>
<p>焊点如图。每个键位都有贴片无冲二极管，不过并未模拟USB口下的全键无冲，实测使用USB连接的话，只支持任意六键无冲。好在几乎没有人会拿紧凑键盘玩双人模拟器游戏，原生六键无冲一般情况下也足够了。PCB下缘中间的位置有镂空刻印的LEOPOLD裸铜字样，基本属于Leopold键盘的一个标志性做法。</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/42.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/43.jpg" alt=""></p>
<p>FC660M采用了合泰8位MCU、6MHz晶振。MiniUSB接口直接焊在了板子上，与底盘出口的契合精度还是很高的，不过对比了底板的结构后发现保护措施不是很到位。铝板上还带有多处定位点，可以卡住PCB，这也是Leopold键盘上比较多见的特色，固定措施总是不嫌多嘛。铝板和PCB的厚度还算可观，都略厚于一元硬币。</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/44.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/45.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/46.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/47.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/48.jpg" alt=""></p>
<h1 id="使用-amp-测试"><a href="#使用-amp-测试" class="headerlink" title="使用&amp;测试"></a>使用&amp;测试</h1><p>冲突测试： U口任意六键无冲。</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/49.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/50.jpg" alt=""></p>
<p>P口全键无冲。</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/51.jpg" alt=""></p>
<p>手感测试：简单说一下樱桃红轴，总行程：4.0-0.4mm；触发行程：2±0.6mm；初始压力：30cN min.；触发压力：45±15cN；触底压力能达到60cN左右。属于轻量级的樱桃轴，线性无段落，打字很轻盈，但是部分游戏党可能会觉得下手难知轻重，影响操作的稳定性——这个自然是因人而异。</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/52.jpg" alt=""></p>
<p>除了樱桃轴、大键位伪轴的调节对手感的影响，铝板和底盘的力学结构也有不少的提升作用：按键下压力首先传递到铝板上，然后通过四周边缘及中间的支撑柱扩散至底盘，可以说整个过程中力的反馈是很均匀的；其次铝板相对于钢板质感更偏轻柔，搭配樱桃红轴这种比较轻盈的轴体，手感可以说刚柔并济，起码给人的心理暗示就非常微妙。</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/53.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/54.jpg" alt=""><br><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/55.jpg" alt=""></p>
<p>功能测试：除了DPI开关对部分键位的调节作用，FC660M的各类组合键也附带了相当实用的功能。如Esc键可分别与Shift、Fn键组合打出~和<code>字符，亦可通过Fn＋Q直接将Esc切换为常规的“</code>键”；Fn＋任一数字键则是对应数字序号的F区功能键；Fn＋RCrtl可组合成常规104键盘上的属性键等等… 详细的按键功能表如图。</p>
<p><img src="http://op06ugvox.bkt.clouddn.com/hexo/%E5%B0%8F%E8%BA%AB%E6%9D%90%EF%BC%8C%E5%A4%A7%E5%91%B3%E9%81%93%E2%80%94%E2%80%94Leopold-FC660M%E9%93%9D%E6%9D%BF%E7%BA%A2%E8%BD%B4%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E7%AE%80%E8%AF%84/56.jpg" alt="">  </p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><ol>
<li>配列、组合键及个别键位的设计非常合理、便捷；</li>
<li>键盘整体做工、用料、结构设计、工程审美都属于较高水平；</li>
<li>彩色铝板的采用，使得键盘更加轻便，作为带“板”的紧凑机械键盘，已具有相当优势的便携性；</li>
<li>加厚PBT白色键帽手感比较扎实，蚀刻字符凸起感很弱，工艺不错。</li>
</ol>
<h2 id="不足："><a href="#不足：" class="headerlink" title="不足："></a>不足：</h2><ol>
<li>作为一把萌萌哒的紧凑键盘，操作系统支持不够全面还是有点遗憾的；</li>
<li>MiniUSB口内部没有强化支撑，外部也没有对键盘线设计固定措施；</li>
<li>轴板未预留灯位，虽然无关键盘本身，楼主也并非背光党，但对于大多数玩家来说，不得不承认确实少了一份乐趣。</li>
</ol>
<p>Leopold的键盘一般强调做工、特色和功能性，而性价比一直都不能算是它的强项。彩铝板FC660M目前仍未进入市售环节，价格暂时不得而知，但是一般情况下阳极氧化铝板总比钢板贵一些，所以楼主猜测同样的轴型价格应该是高于钢板款的。首发渠道据有关部门称，此次可能会选择囧东或者天喵。</p>
<p>小五原创(in外设ID：fio )，转载请注明</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;标题借用一下某副食品广告的宣传语。用过手中这块Leopold的FC660M新款铝板红轴机械键盘后，除了“小身材，大味道”，实在是找不出更为贴切的用词来形容它了：&lt;strong&gt;紧凑的键位，却能尝出远超一般紧凑键盘的味道。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Leopold这个品牌，以及代理FC660M等型号产品的志海和团队楼主不多做介绍，前人之述备矣，估计多数玩家对此比楼主更加熟悉。FC660M属于系列中比较流行，有一定保有量的一个型号，除了产品自身的品质，在外壳、键帽、轴型等方面的刻意求工和可DIY性都是量产键盘中非常少见的，也是为FC660M加分的砝码。&lt;/p&gt;
&lt;p&gt;这次的新品，实际上是Leopold升级的一批彩色铝板FC660M，旨在用彩铝板进一步提升细节上的感觉，同时在保持机械质感的基础上尽可能让键盘变得更轻便。外壳颜色有蓝色、纯白和香槟金等，据称铝板颜色与外壳一致。轴型增加了Cherry MX红轴。楼主手中这块为样品，不能保证与市售产品完全一致，文字将以介绍为主，当中会夹杂一些主观的评价，请各位各取所需，顺便欢迎互喷。&lt;/p&gt;
&lt;p&gt;早期的FC660M是有蓝黑色封套的，后来全部更换为无图案的牛皮瓦楞纸包装盒，用的纸板材质很硬，盒子折线棱角非常凌厉，整体倒是多了几分复古的美感。其实这种风格上的简化是受不少人欢迎的，因为封套这玩意大多是见光死，而且对于以后的收纳取用来说就是个累赘。&lt;br&gt;
    
    </summary>
    
      <category term="硬件" scheme="http://www.javacn.top/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
      <category term="转载" scheme="http://www.javacn.top/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="机械键盘" scheme="http://www.javacn.top/tags/%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98/"/>
    
      <category term="红轴" scheme="http://www.javacn.top/tags/%E7%BA%A2%E8%BD%B4/"/>
    
      <category term="leopold" scheme="http://www.javacn.top/tags/leopold/"/>
    
      <category term="fc660m" scheme="http://www.javacn.top/tags/fc660m/"/>
    
  </entry>
  
  <entry>
    <title>Java正则速成秘籍（三）之见招拆招篇</title>
    <link href="http://www.javacn.top/20170421/regular_java_3/"/>
    <id>http://www.javacn.top/20170421/regular_java_3/</id>
    <published>2017-04-21T10:47:07.000Z</published>
    <updated>2017-05-03T03:06:08.312Z</updated>
    
    <content type="html"><![CDATA[<h1 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h1><p><strong>正则表达式是什么？有什么用？</strong><br>正则表达式(Regular Expression)是一种文本规则，可以用来校验、查找、替换与规则匹配的文本。<br><strong>又爱又恨的正则</strong><br>正则表达式是一个强大的文本匹配工具，但是它的规则实在很繁琐，而且理解起来也颇为蛋疼，容易让人望而生畏。<br><strong>如何学习正则</strong><br>刚接触正则时，我看了一堆正则的语义说明，但是仍然不明所以。后来，我多接触一些正则的应用实例，渐渐有了感觉，再结合语义说明，终有领悟。我觉得正则表达式和武侠修练武功差不多，应该先练招式，再练心法。如果一开始就直接看正则的规则，保证你会懵逼。<br>当你熟悉基本招式（正则基本使用案例）后，也该修炼修炼心法（正则语法）了。真正的高手不能只靠死记硬背那么几招把式。就像张三丰教张无忌太极拳一样，领悟心法，融会贯通，少侠你就可以无招胜有招，成为传说中的绝世高手。</p>
<p><strong>以上闲话可归纳为一句：学习正则应该从实例去理解规则。</strong></p>
<a id="more"></a>
<p>打开秘籍：欲练神功，必先自宫！没有蛋，也就不会蛋疼了。<br><strong>Java正则速成秘籍分三篇：</strong>  </p>
<ul>
<li><a href="../Java正则速成秘籍（一）之招式篇">Java正则速成秘籍（一）之招式篇</a><br>展示Java对于正则表达式的支持。</li>
<li><a href="../Java正则速成秘籍（二）之心法篇">Java正则速成秘籍（二）之心法篇</a><br>介绍正则表达式的语法规则。</li>
<li><a href="#">Java正则速成秘籍（三）之见招拆招篇</a><br>从实战出发，介绍正则的常用案例。</li>
</ul>
<p>本文是Java正则速成秘籍的最后一篇——见招拆招篇。<br>在 <a href="../Java正则速成秘籍（一）之招式篇">Java正则速成秘籍（一）之招式篇</a> 和 <a href="../Java正则速成秘籍（二）之心法篇">Java正则速成秘籍（二）之心法篇</a>，我们学习了Java支持正则功能的API以及正则表达式的语法。<br>本文则主要展示正则表达式在现实场景的应用。文中不会再提及正则的语法以及Java正则相关的API，如有疑问，可以参考前面两篇文章。  </p>
<h1 id="正则应用"><a href="#正则应用" class="headerlink" title="正则应用"></a>正则应用</h1><p>虽然本系列洋洋洒洒的大谈特谈正则表达式。但是我还是要在这里建议，如果一个正则表达式没有经过充分测试，还是要谨慎使用。<br>正则是把双刃剑，它可以为你节省大量的代码行。但是由于它不易阅读，维护起来可是头疼的哦（你需要一个字符一个字符的去理解）。  </p>
<h2 id="最实用的正则"><a href="#最实用的正则" class="headerlink" title="最实用的正则"></a>最实用的正则</h2><h3 id="校验中文"><a href="#校验中文" class="headerlink" title="校验中文"></a>校验中文</h3><p><strong>描述</strong>：校验字符串中只能有中文字符（不包括中文标点符号）。中文字符的Unicode编码范围是<code>\u4e00</code> 到 <code>\u9fa5</code>。<br>如有兴趣，可以参考百度百科-Unicode 。</p>
<p><code>^[\u4e00-\u9fa5]+$</code><br><strong>匹配</strong>： 春眠不觉晓<br><strong>不匹配</strong>：春眠不觉晓，</p>
<h3 id="校验身份证号码"><a href="#校验身份证号码" class="headerlink" title="校验身份证号码"></a>校验身份证号码</h3><p><strong>描述</strong>：身份证为15位或18位。15位是第一代身份证。从1999年10月1日起，全国实行公民身份证号码制度，居民身份证编号由原15位升至18位。  </p>
<p><strong><em>15位身份证</em></strong></p>
<p><strong>描述</strong>：由15位数字组成。排列顺序从左至右依次为：六位数字地区码；六位数字出生日期；三位顺序号，其中15位男为单数，女为双数。</p>
<p><strong><em>18位身份证</em></strong><br><strong>描述</strong>：由十七位数字本体码和一位数字校验码组成。排列顺序从左至右依次为：六位数字地区码；八位数字出生日期；三位数字顺序码和一位数字校验码（也可能是X）。</p>
<p>身份证号含义详情请见：<a href="http://baike.baidu.com/link?url=5mYlYNE0RsSe2D4tydajtiaR8hAm4pPZ0FHSPuQ05N4f6H-i7qPuw7sY5KfNuiOVJWVWZvU4gf3IY-vIcKdP1CU4Fv-9pKmFQB50qGv_hZT2dkGbkd9--8_saY7omV80vEw9ixVeEwda37fHswfmtyU4QSiBG5s3K5K-JnYr1dqNlPu0f3t008UcLh5-wyID" target="_blank" rel="external">百度百科-居民身份证号码</a></p>
<p><strong><em>地区码（6位）</em></strong><br><code>(1[1-5]|2[1-3]|3[1-7]|4[1-3]|5[0-4]|6[1-5])\d{4}</code><br><strong><em>出生日期（8位）</em></strong><br><strong>注</strong>：下面的是18位身份证的有效出生日期，如果是15位身份证，只要将第一个\d{4}改为\d{2}即可。<br><code>((\d{4}((0[13578]|1[02])(0[1-9]|[12]\d|3[01])|(0[13456789]|1[012])(0[1-9]|[12]\d|30)|02(0[1-9]|1\d|2[0-8])))|([02468][048]|[13579][26])0229)</code></p>
<p><strong><em>15位有效身份证</em></strong></p>
<p>^((1[1-5]|2[1-3]|3[1-7]|4[1-3]|5[0-4]|6[1-5])\d{4})((\d{2}((0[13578]|1[02])(0[1-9]|[12]\d|3[01])|(0[13456789]|1[012])(0[1-9]|[12]\d|30)|02(0[1-9]|1\d|2[0-8])))|([02468][048]|[13579][26])0229)(\d{3})$<br><strong>匹配</strong>：110001700101031<br><strong>不匹配</strong>：110001701501031</p>
<p><strong><em>18位有效身份证</em></strong></p>
<p><code>^((1[1-5]|2[1-3]|3[1-7]|4[1-3]|5[0-4]|6[1-5])\d{4})((\d{4}((0[13578]|1[02])(0[1-9]|[12]\d|3[01])|(0[13456789]|1[012])(0[1-9]|[12]\d|30)|02(0[1-9]|1\d|2[0-8])))|([02468][048]|[13579][26])0229)(\d{3}(\d|X))$</code><br><strong>匹配</strong>：110001199001010310 | 11000019900101015X<br><strong>不匹配</strong>：990000199001010310 | 110001199013010310</p>
<h3 id="校验有效用户名、密码"><a href="#校验有效用户名、密码" class="headerlink" title="校验有效用户名、密码"></a>校验有效用户名、密码</h3><p><strong>描述</strong>：长度为6-18个字符，允许输入字母、数字、下划线，首字符必须为字母。<br><code>^[a-zA-Z]\w{5,17}$</code><br><strong>匹配</strong>：he_llo@worl.d.com | hel.l-o@wor-ld.museum | h1ello@123.com<br><strong>不匹配</strong>：hello@worl_d.com | he&amp;llo@world.co1 | .hello@wor#.co.uk</p>
<h3 id="校验邮箱"><a href="#校验邮箱" class="headerlink" title="校验邮箱"></a>校验邮箱</h3><p><strong>描述</strong>：不允许使用IP作为域名，如 : <code>hello@154.145.68.12</code><br>@符号前的邮箱用户和.符号前的域名(domain)必须满足以下条件：</p>
<ul>
<li>字符只能是英文字母、数字、下划线_、.、- ；</li>
<li>首字符必须为字母或数字；</li>
<li><code>_</code>、<code>.</code>、<code>-</code> 不能连续出现。</li>
<li>域名的根域只能为字母，且至少为两个字符。</li>
</ul>
<p><code>^[A-Za-z0-9](([_\.\-]?[a-zA-Z0-9]+)*)@([A-Za-z0-9]+)(([\.\-]?[a-zA-Z0-9]+)*)\.([A-Za-z]{2,})$</code><br><strong>匹配</strong>：he_llo@worl.d.com | hel.l-o@wor-ld.museum | h1ello@123.com<br><strong>不匹配</strong>：hello@worl_d.com | he&amp;llo@world.co1 | .hello@wor#.co.uk</p>
<h3 id="校验URL"><a href="#校验URL" class="headerlink" title="校验URL"></a>校验URL</h3><p><strong>描述</strong>：校验URL。支持http、https、ftp、ftps。<br><code>^(ht|f)(tp|tps)\://[a-zA-Z0-9\-\.]+\.([a-zA-Z]{2,3})?(/\S*)?$</code><br><strong>匹配</strong>：<a href="http://google.com/help/me" target="_blank" rel="external">http://google.com/help/me</a> | <a href="http://www.google.com/help/me/" target="_blank" rel="external">http://www.google.com/help/me/</a> | <a href="https://www.google.com/help.asp" target="_blank" rel="external">https://www.google.com/help.asp</a> | ftp://www.google.com | ftps://google.org<br><strong>不匹配</strong>：<a href="http://un/www.google.com/index.asp" target="_blank" rel="external">http://un/www.google.com/index.asp</a></p>
<h3 id="校验时间"><a href="#校验时间" class="headerlink" title="校验时间"></a>校验时间</h3><p><strong>描述</strong>：校验时间。时、分、秒必须是有效数字，如果数值不是两位数，十位需要补零。<br><code>^([0-1][0-9]|[2][0-3]):([0-5][0-9])$</code><br><strong>匹配</strong>：00:00:00 | 23:59:59 | 17:06:30<br><strong>不匹配</strong>：17:6:30 | 24:16:30</p>
<h3 id="校验日期"><a href="#校验日期" class="headerlink" title="校验日期"></a>校验日期</h3><p><strong>描述</strong>：校验日期。日期满足以下条件：</p>
<ul>
<li>格式yyyy-MM-dd或yyyy-M-d</li>
<li>连字符可以没有或是<code>-</code>、<code>/</code>、<code>.</code>之一</li>
<li>闰年的二月可以有29日；而平年不可以。</li>
<li>一、三、五、七、八、十、十二月为31日。四、六、九、十一月为30日。</li>
</ul>
<p><code>^(?:(?!0000)[0-9]{4}([-/.]?)(?:(?:0?[1-9]|1[0-2])\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\1(?:29|30)|(?:0?[13578]|1[02])\1(?:31))|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)([-/.]?)0?2\2(?:29))$</code><br><strong>匹配</strong>：2016/1/1 | 2016/01/01 | 20160101 | 2016-01-01 | 2016.01.01 | 2000-02-29<br><strong>不匹配</strong>：2001-02-29 | 2016/12/32 | 2016/6/31 | 2016/13/1 | 2016/0/1</p>
<h3 id="校验中国手机号码"><a href="#校验中国手机号码" class="headerlink" title="校验中国手机号码"></a>校验中国手机号码</h3><p><strong>描述</strong>：中国手机号码正确格式：11位数字。<br><em>移动有16个号段</em>：134、135、136、137、138、139、147、150、151、152、157、158、159、182、187、188。其中147、157、188是3G号段，其他都是2G号段。<br><em>联通有7种号段</em>：130、131、132、155、156、185、186。其中186是3G（WCDMA）号段，其余为2G号段。<br><em>电信有4个号段</em>：133、153、180、189。其中189是3G号段（CDMA2000），133号段主要用作无线网卡号。<br><strong>总结</strong>：13开头手机号0-9；15开头手机号0-3、5-9；18开头手机号0、2、5-9。<br>此外，中国在国际上的区号为86，所以手机号开头有+86、86也是合法的。<br>以上信息来源于 <a href="http://baike.baidu.com/link?url=Bia2K_f8rGcakOlP4d9m_-DNSgXU5-0NDP0pPavS0ZbhRHQcUFUTbMERjdO4u7cvkpTJaIDeUXq_EXWnMqXMdSuMQDX3NAbZXAlZYl_V18KATWF7y1EFzUyJ62rf3bAN" target="_blank" rel="external">百度百科-手机号</a>  </p>
<p><code>^((\+)?86\s*)?((13[0-9])|(15([0-3]|[5-9]))|(18[0,2,5-9]))\d{8}$</code><br><strong>匹配</strong>：+86 18012345678 | 86 18012345678 | 15812345678<br><strong>不匹配</strong>：15412345678 | 12912345678 | 180123456789</p>
<h3 id="校验中国固话号码"><a href="#校验中国固话号码" class="headerlink" title="校验中国固话号码"></a>校验中国固话号码</h3><p><strong>描述</strong>：固话号码，必须加区号（以0开头）。<br><em>3位有效区号</em>：010、020~029，固话位数为8位。<br><em>4位有效区号</em>：03xx开头到09xx，固话位数为7。<br>如果想了解更详细的信息，请参考 <a href="http://baike.baidu.com/link?url=sX8JoxK1ja5uM5pDYvQe27_QsyqAZ_78DLSeEvwjqtG_uXqU6p5Oh7CPbImNbnwu1ClOmD8udgDIswZfYzQIw0z3BYZO3eTplvVDzieuowTYqt7yHGDAqyT7o4vvGhg4" target="_blank" rel="external">百度百科-电话区号</a> 。</p>
<p><code>^(010|02[0-9])(\s|-)\d{8}|(0[3-9]\d{2})(\s|-)\d{7}$</code><br><strong>匹配</strong>：010-12345678 | 010 12345678 | 0512-1234567 | 0512 1234567<br><strong>不匹配</strong>：1234567 | 12345678</p>
<h3 id="校验IPv4地址"><a href="#校验IPv4地址" class="headerlink" title="校验IPv4地址"></a>校验IPv4地址</h3><p><strong>描述</strong>：IP地址是一个32位的二进制数，通常被分割为4个“8位二进制数”（也就是4个字节）。IP地址通常用“点分十进制”表示成（a.b.c.d）的形式，其中，a,b,c,d都是0~255之间的十进制整数。</p>
<p><code>^([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])\.([01]?\d\d?|2[0-4]\d|25[0-5])$</code><br><strong>匹配</strong>：0.0.0.0 | 255.255.255.255 | 127.0.0.1<br><strong>不匹配</strong>：10.10.10 | 10.10.10.256</p>
<h3 id="校验IPv6地址"><a href="#校验IPv6地址" class="headerlink" title="校验IPv6地址"></a>校验IPv6地址</h3><p><strong>描述</strong>：IPv6的128位地址通常写成8组，每组为四个十六进制数的形式。<br>IPv6地址可以表示为以下形式：</p>
<ul>
<li>IPv6 地址</li>
<li>零压缩 IPv6 地址(section 2.2 of rfc5952)</li>
<li>带有本地链接区域索引的 IPv6 地址 (section 11 of rfc4007)</li>
<li>嵌入IPv4的 IPv6 地址(section 2 of rfc6052</li>
<li>映射IPv4的 IPv6 地址 (section 2.1 of rfc2765)</li>
<li>翻译IPv4的 IPv6 地址 (section 2.1 of rfc2765)<br>显然，IPv6地址的表示方式很复杂。你也可以参考<a href="http://baike.baidu.com/link?url=D3nmh0q_G_ZVmxXFG79mjjNfT4hs9fwjqUgygh-tvhq43KYqx88HV27WEXmoT4nA4iGzXwXMm5L-j50C2gSL5q" target="_blank" rel="external">百度百科-IPv6</a></li>
</ul>
<p><a href="http://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses" target="_blank" rel="external">Stack overflow上的IPv6正则表达高票答案</a><br><code>(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))</code><br><strong>匹配：</strong> 1:2:3:4:5:6:7:8 | 1:: | 1::8 | 1::6:7:8 | 1::5:6:7:8 | 1::4:5:6:7:8 | 1::3:4:5:6:7:8 | ::2:3:4:5:6:7:8 | 1:2:3:4:5:6:7:: | 1:2:3:4:5:6::8 | 1:2:3:4:5::8 | 1:2:3:4::8 | 1:2:3::8 | 1:2::8 | 1::8 | ::8 | fe80::7:8%1 | ::255.255.255.255 | 2001:db8:3:4::192.0.2.33 | 64:ff9b::192.0.2.33<br><strong>不匹配：</strong> 1.2.3.4.5.6.7.8 | 1::2::3</p>
<h3 id="特定字符"><a href="#特定字符" class="headerlink" title="特定字符"></a>特定字符</h3><ul>
<li>匹配长度为3的字符串：<code>^.{3}$</code>。</li>
<li>匹配由26个英文字母组成的字符串：<code>^[A-Za-z]+$</code>。</li>
<li>匹配由26个大写英文字母组成的字符串：<code>^[A-Z]+$</code>。</li>
<li>匹配由26个小写英文字母组成的字符串：<code>^[a-z]+$</code>。</li>
<li>匹配由数字和26个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code>。</li>
<li>匹配由数字、26个英文字母或者下划线组成的字符串：<code>^\w+$</code>。</li>
<li><h3 id="特定数字"><a href="#特定数字" class="headerlink" title="特定数字"></a>特定数字</h3></li>
<li>匹配正整数：<code>^[1-9]\d*$</code></li>
<li>匹配负整数：<code>^-[1-9]\d*$</code></li>
<li>匹配整数：<code>^(-?[1-9]\d*)|0$</code></li>
<li>匹配正浮点数：<code>^[1-9]\d*\.\d+|0\.\d+$</code></li>
<li>匹配负浮点数：<code>^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$</code></li>
<li>匹配浮点数：<code>^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</code></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://blog.csdn.net/lxcnn/article/details/4362500" target="_blank" rel="external">正则应用之——日期正则表达式</a><br><a href="http://www.regexlib.com/" target="_blank" rel="external">http://www.regexlib.com/</a><br>作者：静默虚空<br>出处：<a href="http://www.cnblogs.com/jingmoxukong/" target="_blank" rel="external">http://www.cnblogs.com/jingmoxukong/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;正则表达式是什么？有什么用？&lt;/strong&gt;&lt;br&gt;正则表达式(Regular Expression)是一种文本规则，可以用来校验、查找、替换与规则匹配的文本。&lt;br&gt;&lt;strong&gt;又爱又恨的正则&lt;/strong&gt;&lt;br&gt;正则表达式是一个强大的文本匹配工具，但是它的规则实在很繁琐，而且理解起来也颇为蛋疼，容易让人望而生畏。&lt;br&gt;&lt;strong&gt;如何学习正则&lt;/strong&gt;&lt;br&gt;刚接触正则时，我看了一堆正则的语义说明，但是仍然不明所以。后来，我多接触一些正则的应用实例，渐渐有了感觉，再结合语义说明，终有领悟。我觉得正则表达式和武侠修练武功差不多，应该先练招式，再练心法。如果一开始就直接看正则的规则，保证你会懵逼。&lt;br&gt;当你熟悉基本招式（正则基本使用案例）后，也该修炼修炼心法（正则语法）了。真正的高手不能只靠死记硬背那么几招把式。就像张三丰教张无忌太极拳一样，领悟心法，融会贯通，少侠你就可以无招胜有招，成为传说中的绝世高手。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以上闲话可归纳为一句：学习正则应该从实例去理解规则。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="正则" scheme="http://www.javacn.top/categories/%E6%AD%A3%E5%88%99/"/>
    
    
      <category term="转载" scheme="http://www.javacn.top/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="正则" scheme="http://www.javacn.top/tags/%E6%AD%A3%E5%88%99/"/>
    
      <category term="正则表达式" scheme="http://www.javacn.top/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java正则速成秘籍（二）之心法篇</title>
    <link href="http://www.javacn.top/20170421/regular_java_2/"/>
    <id>http://www.javacn.top/20170421/regular_java_2/</id>
    <published>2017-04-21T08:47:07.000Z</published>
    <updated>2017-05-03T03:18:30.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h1><p><strong>正则表达式是什么？有什么用？</strong><br>正则表达式(Regular Expression)是一种文本规则，可以用来校验、查找、替换与规则匹配的文本。<br><strong>又爱又恨的正则</strong><br>正则表达式是一个强大的文本匹配工具，但是它的规则实在很繁琐，而且理解起来也颇为蛋疼，容易让人望而生畏。<br><strong>如何学习正则</strong><br>刚接触正则时，我看了一堆正则的语义说明，但是仍然不明所以。后来，我多接触一些正则的应用实例，渐渐有了感觉，再结合语义说明，终有领悟。我觉得正则表达式和武侠修练武功差不多，应该先练招式，再练心法。如果一开始就直接看正则的规则，保证你会懵逼。<br>当你熟悉基本招式（正则基本使用案例）后，也该修炼修炼心法（正则语法）了。真正的高手不能只靠死记硬背那么几招把式。就像张三丰教张无忌太极拳一样，领悟心法，融会贯通，少侠你就可以无招胜有招，成为传说中的绝世高手。</p>
<p><strong>以上闲话可归纳为一句：学习正则应该从实例去理解规则。</strong></p>
<a id="more"></a>
<p>打开秘籍：欲练神功，必先自宫！没有蛋，也就不会蛋疼了。<br><strong>Java正则速成秘籍分三篇：</strong>  </p>
<ul>
<li><a href="../Java正则速成秘籍（一）之招式篇">Java正则速成秘籍（一）之招式篇</a><br>展示Java对于正则表达式的支持。</li>
<li><a href="#">Java正则速成秘籍（二）之心法篇</a><br>介绍正则表达式的语法规则。</li>
<li><a href="../Java正则速成秘籍（三）之见招拆招篇">Java正则速成秘籍（三）之见招拆招篇</a><br>从实战出发，介绍正则的常用案例。<br>在 <a href="../Java正则速成秘籍（一）之招式篇">Java正则速成秘籍（一）之招式篇</a> 一文，我们学习了Java支持正则功能的API。<br>本文是Java正则速成秘籍的心法篇。主要介绍正则表达式的语法规则。正则语法规则是一种标准，主流开发语言对于正则语法的支持大体相同。<br>分组构造、贪婪与懒惰属于正则表达式中较为复杂的应用，建议理解完基本元字符后再去了解。<br>本文案例中使用的<code>checkMatches</code>、<code>findAll</code>方法请见附录。   </li>
</ul>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>为了理解下面章节的内容，你需要先了解一些基本概念。</p>
<p><strong>正则表达式</strong></p>
<p>正则表达式是对字符串操作的一种逻辑公式，就是用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。</p>
<p><strong>元字符</strong><br>元字符(metacharacters)就是正则表达式中具有特殊意义的专用字符。</p>
<p><strong>普通字符</strong><br>普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。</p>
<h1 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h1><h2 id="基本元字符"><a href="#基本元字符" class="headerlink" title="基本元字符"></a>基本元字符</h2><p>正则表达式的元字符难以记忆，很大程度上是因为有很多为了简化表达而出现的等价字符。<br>而实际上最基本的元字符，并没有那么多。对于大部分的场景，基本元字符都可以搞定。<br>让我们从一个个实例出发，由浅入深的去体会正则的奥妙。</p>
<h3 id="多选"><a href="#多选" class="headerlink" title="多选 - |"></a>多选 - <code>|</code></h3><p><strong><em>例 匹配一个确定的字符串</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">checkMatches(<span class="string">"abc"</span>, <span class="string">"abc"</span>);</div></pre></td></tr></table></figure></p>
<p>如果要匹配一个确定的字符串，非常简单，如例1所示。<br>如果你不确定要匹配的字符串，希望有多个选择，怎么办？<br>答案是：使用元字符<code>|</code> ，它的含义是或。</p>
<p><strong><em>例 匹配多个可选的字符串</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 测试正则表达式字符：|</span></div><div class="line">Assert.assertTrue(checkMatches(<span class="string">"yes|no"</span>, <span class="string">"yes"</span>));</div><div class="line">Assert.assertTrue(checkMatches(<span class="string">"yes|no"</span>, <span class="string">"no"</span>));</div><div class="line">Assert.assertFalse(checkMatches(<span class="string">"yes|no"</span>, <span class="string">"right"</span>));</div></pre></td></tr></table></figure></p>
<p><strong><em>输出</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yes matches： yes|no</div><div class="line">no  matches： yes|no</div><div class="line">right   not matches： yes|no</div></pre></td></tr></table></figure></p>
<h3 id="分组"><a href="#分组" class="headerlink" title="分组 - ()"></a>分组 - <code>()</code></h3><p>如果你希望表达式由多个子表达式组成，你可以使用<code>()</code>。</p>
<p><strong><em>例 匹配组合字符串</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Assert.assertTrue(checkMatches(<span class="string">"(play|end)(ing|ed)"</span>, <span class="string">"ended"</span>));</div><div class="line">Assert.assertTrue(checkMatches(<span class="string">"(play|end)(ing|ed)"</span>, <span class="string">"ending"</span>));</div><div class="line">Assert.assertTrue(checkMatches(<span class="string">"(play|end)(ing|ed)"</span>, <span class="string">"playing"</span>));</div><div class="line">Assert.assertTrue(checkMatches(<span class="string">"(play|end)(ing|ed)"</span>, <span class="string">"played"</span>));</div></pre></td></tr></table></figure></p>
<p><strong><em>输出</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ended   matches： (play|end)(ing|ed)</div><div class="line">ending  matches： (play|end)(ing|ed)</div><div class="line">playing matches： (play|end)(ing|ed)</div><div class="line">played  matches： (play|end)(ing|ed)</div></pre></td></tr></table></figure></p>
<h3 id="指定单字符有效范围"><a href="#指定单字符有效范围" class="headerlink" title="指定单字符有效范围 - []"></a>指定单字符有效范围 - <code>[]</code></h3><p>前面展示了如何匹配字符串，但是很多时候你需要精确的匹配一个字符，这时可以使用<code>[]</code> 。<br><strong><em>例 字符在指定范围</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 测试正则表达式字符：[]</span></div><div class="line">Assert.assertTrue(checkMatches(<span class="string">"[abc]"</span>, <span class="string">"b"</span>));  <span class="comment">// 字符只能是a、b、c</span></div><div class="line">Assert.assertTrue(checkMatches(<span class="string">"[a-z]"</span>, <span class="string">"m"</span>)); <span class="comment">// 字符只能是a - z</span></div><div class="line">Assert.assertTrue(checkMatches(<span class="string">"[A-Z]"</span>, <span class="string">"O"</span>)); <span class="comment">// 字符只能是A - Z</span></div><div class="line">Assert.assertTrue(checkMatches(<span class="string">"[a-zA-Z]"</span>, <span class="string">"K"</span>)); <span class="comment">// 字符只能是a - z和A - Z</span></div><div class="line">Assert.assertTrue(checkMatches(<span class="string">"[a-zA-Z]"</span>, <span class="string">"k"</span>));</div><div class="line">Assert.assertTrue(checkMatches(<span class="string">"[0-9]"</span>, <span class="string">"5"</span>)); <span class="comment">// 字符只能是0 - 9</span></div></pre></td></tr></table></figure></p>
<p><strong><em>输出</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">b   matches： [abc]</div><div class="line">m   matches： [a-z]</div><div class="line">O   matches： [A-Z]</div><div class="line">K   matches： [a-zA-Z]</div><div class="line">k   matches： [a-zA-Z]</div><div class="line">5   matches： [0-9]</div></pre></td></tr></table></figure></p>
<h3 id="指定单字符无效范围"><a href="#指定单字符无效范围" class="headerlink" title="指定单字符无效范围 - [^]"></a>指定单字符无效范围 - <code>[^]</code></h3><p><strong><em>例 字符不能在指定范围</em></strong></p>
<p>如果需要匹配一个字符的逆操作，即字符不能在指定范围，可以使用<code>[^]</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 测试正则表达式字符：[^]</span></div><div class="line">Assert.assertFalse(checkMatches(<span class="string">"[^abc]"</span>, <span class="string">"b"</span>)); <span class="comment">// 字符不能是a、b、c</span></div><div class="line">Assert.assertFalse(checkMatches(<span class="string">"[^a-z]"</span>, <span class="string">"m"</span>)); <span class="comment">// 字符不能是a - z</span></div><div class="line">Assert.assertFalse(checkMatches(<span class="string">"[^A-Z]"</span>, <span class="string">"O"</span>)); <span class="comment">// 字符不能是A - Z</span></div><div class="line">Assert.assertFalse(checkMatches(<span class="string">"[^a-zA-Z]"</span>, <span class="string">"K"</span>)); <span class="comment">// 字符不能是a - z和A - Z</span></div><div class="line">Assert.assertFalse(checkMatches(<span class="string">"[^a-zA-Z]"</span>, <span class="string">"k"</span>));</div><div class="line">Assert.assertFalse(checkMatches(<span class="string">"[^0-9]"</span>, <span class="string">"5"</span>)); <span class="comment">// 字符不能是0 - 9</span></div></pre></td></tr></table></figure></p>
<p><strong><em>输出</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">b   not matches： [^abc]</div><div class="line">m   not matches： [^a-z]</div><div class="line">O   not matches： [^A-Z]</div><div class="line">K   not matches： [^a-zA-Z]</div><div class="line">k   not matches： [^a-zA-Z]</div><div class="line">5   not matches： [^0-9]</div></pre></td></tr></table></figure></p>
<h3 id="限制字符数量"><a href="#限制字符数量" class="headerlink" title="限制字符数量 - {}"></a>限制字符数量 - <code>{}</code></h3><p>如果想要控制字符出现的次数，可以使用<code>{}</code>。<br>字符描述{n}n 是一个非负整数。匹配确定的 n 次。{n,}n 是一个非负整数。至少匹配 n 次。{n,m}m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。  </p>
<p><strong><em>例 限制字符出现次数</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// &#123;n&#125;: n 是一个非负整数。匹配确定的 n 次。</span></div><div class="line">checkMatches(<span class="string">"ap&#123;1&#125;"</span>, <span class="string">"a"</span>);</div><div class="line">checkMatches(<span class="string">"ap&#123;1&#125;"</span>, <span class="string">"ap"</span>);</div><div class="line">checkMatches(<span class="string">"ap&#123;1&#125;"</span>, <span class="string">"app"</span>);</div><div class="line">checkMatches(<span class="string">"ap&#123;1&#125;"</span>, <span class="string">"apppppppppp"</span>);</div><div class="line"></div><div class="line"><span class="comment">// &#123;n,&#125;: n 是一个非负整数。至少匹配 n 次。</span></div><div class="line">checkMatches(<span class="string">"ap&#123;1,&#125;"</span>, <span class="string">"a"</span>);</div><div class="line">checkMatches(<span class="string">"ap&#123;1,&#125;"</span>, <span class="string">"ap"</span>);</div><div class="line">checkMatches(<span class="string">"ap&#123;1,&#125;"</span>, <span class="string">"app"</span>);</div><div class="line">checkMatches(<span class="string">"ap&#123;1,&#125;"</span>, <span class="string">"apppppppppp"</span>);</div><div class="line"></div><div class="line"><span class="comment">// &#123;n,m&#125;: m 和 n 均为非负整数，其中 n &lt;= m。最少匹配 n 次且最多匹配 m 次。</span></div><div class="line">checkMatches(<span class="string">"ap&#123;2,5&#125;"</span>, <span class="string">"a"</span>);</div><div class="line">checkMatches(<span class="string">"ap&#123;2,5&#125;"</span>, <span class="string">"ap"</span>);</div><div class="line">checkMatches(<span class="string">"ap&#123;2,5&#125;"</span>, <span class="string">"app"</span>);</div><div class="line">checkMatches(<span class="string">"ap&#123;2,5&#125;"</span>, <span class="string">"apppppppppp"</span>);</div></pre></td></tr></table></figure></p>
<p><strong><em>输出</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">a   not matches： ap&#123;1&#125;</div><div class="line">ap  matches： ap&#123;1&#125;</div><div class="line">app not matches： ap&#123;1&#125;</div><div class="line">apppppppppp not matches： ap&#123;1&#125;</div><div class="line">a   not matches： ap&#123;1,&#125;</div><div class="line">ap  matches： ap&#123;1,&#125;</div><div class="line">app matches： ap&#123;1,&#125;</div><div class="line">apppppppppp matches： ap&#123;1,&#125;</div><div class="line">a   not matches： ap&#123;2,5&#125;</div><div class="line">ap  not matches： ap&#123;2,5&#125;</div><div class="line">app matches： ap&#123;2,5&#125;</div><div class="line">apppppppppp not matches： ap&#123;2,5&#125;</div></pre></td></tr></table></figure></p>
<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符 - /"></a>转义字符 - <code>/</code></h3><p>如果想要查找元字符本身，你需要使用转义符，使得正则引擎将其视作一个普通字符，而不是一个元字符去处理。  </p>
<ul>
<li><code>*</code> 的转义字符：<code>\*</code></li>
<li><code>+</code> 的转义字符：<code>\+</code></li>
<li><code>?</code> 的转义字符：<code>\?</code></li>
<li><code>^</code> 的转义字符：<code>\^</code></li>
<li><code>$</code> 的转义字符：<code>\$</code></li>
<li><code>.</code> 的转义字符：<code>\.</code><br>如果是转义符<code>\</code>本身，你也需要使用<code>\\</code> 。  </li>
</ul>
<h3 id="指定表达式字符串的开始和结尾-、"><a href="#指定表达式字符串的开始和结尾-、" class="headerlink" title="指定表达式字符串的开始和结尾 - ^、$"></a>指定表达式字符串的开始和结尾 <code>-</code> <code>^</code>、<code>$</code></h3><p>如果希望匹配的字符串必须以特定字符串开头，可以使用<code>^</code> 。<br><strong>注</strong>：请特别留意，这里的<code>^</code> 一定要和 <code>[^]</code> 中的 <code>^</code> 区分。</p>
<p><strong><em>例 限制字符串头部</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Assert.assertTrue(checkMatches(<span class="string">"^app[a-z]&#123;0,&#125;"</span>, <span class="string">"apple"</span>)); <span class="comment">// 字符串必须以app开头</span></div><div class="line">Assert.assertFalse(checkMatches(<span class="string">"^app[a-z]&#123;0,&#125;"</span>, <span class="string">"aplause"</span>));</div></pre></td></tr></table></figure></p>
<p><strong><em>输出</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">apple   matches： ^app[a-z]&#123;0,&#125;</div><div class="line">aplause not matches： ^app[a-z]&#123;0,&#125;</div></pre></td></tr></table></figure></p>
<p>如果希望匹配的字符串必须以特定字符串开头，可以使用<code>$</code> 。<br><strong><em>例 限制字符串尾部</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Assert.assertTrue(checkMatches(<span class="string">"[a-z]&#123;0,&#125;ing$"</span>, <span class="string">"playing"</span>)); <span class="comment">// 字符串必须以ing结尾</span></div><div class="line">Assert.assertFalse(checkMatches(<span class="string">"[a-z]&#123;0,&#125;ing$"</span>, <span class="string">"long"</span>));</div></pre></td></tr></table></figure></p>
<p><strong><em>输出</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">playing matches： [a-z]&#123;0,&#125;ing$</div><div class="line">long    not matches： [a-z]&#123;0,&#125;ing$</div></pre></td></tr></table></figure></p>
<h2 id="等价字符"><a href="#等价字符" class="headerlink" title="等价字符"></a>等价字符</h2><p>等价字符，顾名思义，就是对于基本元字符表达的一种简化（等价字符的功能都可以通过基本元字符来实现）。<br>在没有掌握基本元字符之前，可以先不用理会，因为很容易把人绕晕。<br>等价字符的好处在于简化了基本元字符的写法。</p>
<h3 id="表示某一类型字符的等价字符"><a href="#表示某一类型字符的等价字符" class="headerlink" title="表示某一类型字符的等价字符"></a>表示某一类型字符的等价字符</h3><p>下表中的等价字符都表示某一类型的字符。 </p>
<table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>.</code></td>
<td>匹配除<code>\n</code>之外的任何单个字符。</td>
</tr>
<tr>
<td><code>\d</code></td>
<td>匹配一个数字字符。等价于<code>[0-9]</code>。</td>
</tr>
<tr>
<td><code>\D</code></td>
<td>匹配一个非数字字符。等价于<code>[^0-9]</code>。</td>
</tr>
<tr>
<td><code>\w</code></td>
<td>匹配包括下划线的任何单词字符。类似但不等价于<code>[A-Za-z0-9_]</code>，这里的单词字符指的是Unicode字符集。</td>
</tr>
<tr>
<td><code>\W</code></td>
<td>匹配任何非单词字符。</td>
</tr>
<tr>
<td><code>\s</code></td>
<td>匹配任何不可见字符，包括空格、制表符、换页符等等。等价于<code>[ \f\n\r\t\v]</code>。</td>
</tr>
<tr>
<td><code>\S</code></td>
<td>匹配任何可见字符。等价于<code>[ \f\n\r\t\v]</code>。</td>
</tr>
</tbody>
</table>
<p><strong><em>案例 基本等价字符的用法</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 匹配除“\n”之外的任何单个字符</span></div><div class="line">Assert.assertTrue(checkMatches(<span class="string">".&#123;1,&#125;"</span>, <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_"</span>));</div><div class="line">Assert.assertTrue(checkMatches(<span class="string">".&#123;1,&#125;"</span>, <span class="string">"~!@#$%^&amp;*()+`-=[]&#123;&#125;;:&lt;&gt;,./?|\\"</span>));</div><div class="line">Assert.assertFalse(checkMatches(<span class="string">"."</span>, <span class="string">"\n"</span>));</div><div class="line">Assert.assertFalse(checkMatches(<span class="string">"[^\n]"</span>, <span class="string">"\n"</span>));</div><div class="line"></div><div class="line"><span class="comment">// 匹配一个数字字符。等价于[0-9]</span></div><div class="line">Assert.assertTrue(checkMatches(<span class="string">"\\d&#123;1,&#125;"</span>, <span class="string">"0123456789"</span>));</div><div class="line"><span class="comment">// 匹配一个非数字字符。等价于[^0-9]</span></div><div class="line">Assert.assertFalse(checkMatches(<span class="string">"\\D&#123;1,&#125;"</span>, <span class="string">"0123456789"</span>));</div><div class="line"></div><div class="line"><span class="comment">// 匹配包括下划线的任何单词字符。类似但不等价于“[A-Za-z0-9_]”，这里的单词字符指的是Unicode字符集</span></div><div class="line">Assert.assertTrue(checkMatches(<span class="string">"\\w&#123;1,&#125;"</span>, <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_"</span>));</div><div class="line">Assert.assertFalse(checkMatches(<span class="string">"\\w&#123;1,&#125;"</span>, <span class="string">"~!@#$%^&amp;*()+`-=[]&#123;&#125;;:&lt;&gt;,./?|\\"</span>));</div><div class="line"><span class="comment">// 匹配任何非单词字符</span></div><div class="line">Assert.assertFalse(checkMatches(<span class="string">"\\W&#123;1,&#125;"</span>, <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_"</span>));</div><div class="line">Assert.assertTrue(checkMatches(<span class="string">"\\W&#123;1,&#125;"</span>, <span class="string">"~!@#$%^&amp;*()+`-=[]&#123;&#125;;:&lt;&gt;,./?|\\"</span>));</div><div class="line"></div><div class="line"><span class="comment">// 匹配任何不可见字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]</span></div><div class="line">Assert.assertTrue(checkMatches(<span class="string">"\\s&#123;1,&#125;"</span>, <span class="string">" \f\r\n\t"</span>));</div><div class="line"><span class="comment">// 匹配任何可见字符。等价于[^ \f\n\r\t\v]</span></div><div class="line">Assert.assertFalse(checkMatches(<span class="string">"\\S&#123;1,&#125;"</span>, <span class="string">" \f\r\n\t"</span>));</div></pre></td></tr></table></figure></p>
<p><strong><em>输出</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_ matches： .&#123;1,&#125;</div><div class="line">~!@#$%^&amp;*()+`-=[]&#123;&#125;;:&lt;&gt;,./?|\\  matches： .&#123;1,&#125;</div><div class="line">\n  not matches： .</div><div class="line">\n  not matches： [^\n]</div><div class="line">0123456789  matches： \\d&#123;1,&#125;</div><div class="line">0123456789  not matches： \\D&#123;1,&#125;</div><div class="line">ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_ matches： \\w&#123;1,&#125;</div><div class="line">~!@#$%^&amp;*()+`-=[]&#123;&#125;;:&lt;&gt;,./?|\\  not matches： \\w&#123;1,&#125;</div><div class="line">ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_ not matches： \\W&#123;1,&#125;</div><div class="line">~!@#$%^&amp;*()+`-=[]&#123;&#125;;:&lt;&gt;,./?|\\  matches： \\W&#123;1,&#125;</div><div class="line"> \f\r\n\t   matches： \\s&#123;1,&#125;</div><div class="line"> \f\r\n\t   not matches： \\S&#123;1,&#125;</div></pre></td></tr></table></figure></p>
<h3 id="限制字符数量的等价字符"><a href="#限制字符数量的等价字符" class="headerlink" title="限制字符数量的等价字符"></a>限制字符数量的等价字符</h3><p>在基本元字符章节中，已经介绍了限制字符数量的基本元字符 - <code>{}</code> 。<br>此外，还有 <code>*</code>、<code>+</code>、<code>?</code> 这个三个为了简化写法而出现的等价字符，我们来认识一下。<br>字符描述<code>*</code>匹配前面的子表达式零次或多次。等价于<code>{0,}</code>。<code>+</code>匹配前面的子表达式一次或多次。等价于<code>{1,}</code>。<code>?</code>匹配前面的子表达式零次或一次。等价于<code>{0,1}</code>。  </p>
<p><strong><em>案例 限制字符数量的等价字符</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// *: 匹配前面的子表达式零次或多次。* 等价于&#123;0,&#125;。</span></div><div class="line">checkMatches(<span class="string">"ap*"</span>, <span class="string">"a"</span>);</div><div class="line">checkMatches(<span class="string">"ap*"</span>, <span class="string">"ap"</span>);</div><div class="line">checkMatches(<span class="string">"ap*"</span>, <span class="string">"app"</span>);</div><div class="line">checkMatches(<span class="string">"ap*"</span>, <span class="string">"apppppppppp"</span>);</div><div class="line"></div><div class="line"><span class="comment">// +: 匹配前面的子表达式一次或多次。+ 等价于 &#123;1,&#125;。</span></div><div class="line">checkMatches(<span class="string">"ap+"</span>, <span class="string">"a"</span>);</div><div class="line">checkMatches(<span class="string">"ap+"</span>, <span class="string">"ap"</span>);</div><div class="line">checkMatches(<span class="string">"ap+"</span>, <span class="string">"app"</span>);</div><div class="line">checkMatches(<span class="string">"ap+"</span>, <span class="string">"apppppppppp"</span>);</div><div class="line"></div><div class="line"><span class="comment">// ?: 匹配前面的子表达式零次或一次。? 等价于 &#123;0,1&#125;。</span></div><div class="line">checkMatches(<span class="string">"ap?"</span>, <span class="string">"a"</span>);</div><div class="line">checkMatches(<span class="string">"ap?"</span>, <span class="string">"ap"</span>);</div><div class="line">checkMatches(<span class="string">"ap?"</span>, <span class="string">"app"</span>);</div><div class="line">checkMatches(<span class="string">"ap?"</span>, <span class="string">"apppppppppp"</span>);</div></pre></td></tr></table></figure></p>
<p><strong><em>输出</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">a   matches： ap*</div><div class="line">ap  matches： ap*</div><div class="line">app matches： ap*</div><div class="line">apppppppppp matches： ap*</div><div class="line">a   not matches： ap+</div><div class="line">ap  matches： ap+</div><div class="line">app matches： ap+</div><div class="line">apppppppppp matches： ap+</div><div class="line">a   matches： ap?</div><div class="line">ap  matches： ap?</div><div class="line">app not matches： ap?</div><div class="line">apppppppppp not matches： ap?</div></pre></td></tr></table></figure></p>
<h2 id="元字符优先级顺序"><a href="#元字符优先级顺序" class="headerlink" title="元字符优先级顺序"></a>元字符优先级顺序</h2><p>正则表达式从左到右进行计算，并遵循优先级顺序，这与算术表达式非常类似。<br>下表从最高到最低说明了各种正则表达式运算符的优先级顺序： </p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\</code></td>
<td>转义符</td>
</tr>
<tr>
<td><code>()</code>, <code>(?:)</code>, <code>(?=)</code>, <code>[]</code></td>
<td>括号和中括号</td>
</tr>
<tr>
<td><code>*</code>,<code>+</code>, <code>?</code>, <code>{n}</code>, <code>{n,}</code>, <code>{n,m}</code></td>
<td>限定符</td>
</tr>
<tr>
<td><code>^</code>, <code>$</code>, <code>*</code>任何元字符、任何字符<code>*</code></td>
<td>定位点和序列</td>
</tr>
<tr>
<td><code>\</code></td>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
<p>字符具有高于替换运算符的优先级，使得<code>m|food</code>匹配<code>m</code>或<code>food</code>。若要匹配<code>mood</code>或<code>food</code>，请使用括号创建子表达式，从而产生<code>(m|f)ood</code>。</p>
<h1 id="分组构造"><a href="#分组构造" class="headerlink" title="分组构造"></a>分组构造</h1><p>在基本元字符章节，提到了 <code>()</code> 字符可以用来对表达式分组。实际上分组还有更多复杂的用法。<br>所谓分组构造，是用来描述正则表达式的子表达式，用于捕获字符串中的子字符串。  </p>
<h2 id="捕获与非捕获"><a href="#捕获与非捕获" class="headerlink" title="捕获与非捕获"></a>捕获与非捕获</h2><p>下表为分组构造中的捕获和非捕获分类。</p>
<table>
<thead>
<tr>
<th>表达式</th>
<th>描述</th>
<th>捕获或非捕获</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>(exp)</code></td>
<td>匹配的子表达式</td>
<td>捕获</td>
</tr>
<tr>
<td><code>(?&lt;name&gt;exp)</code></td>
<td>命名的反向引用</td>
<td>捕获</td>
</tr>
<tr>
<td><code>(?:exp)</code></td>
<td>非捕获组</td>
<td>非捕获</td>
</tr>
<tr>
<td><code>(?=exp)</code></td>
<td>零宽度正预测先行断言</td>
<td>非捕获</td>
</tr>
<tr>
<td><code>(?!exp)</code></td>
<td>零宽度负预测先行断言</td>
<td>非捕获</td>
</tr>
<tr>
<td><code>(?&lt;=exp)</code></td>
<td>零宽度正回顾后发断言</td>
<td>非捕获</td>
</tr>
<tr>
<td><code>(?&lt;!exp)</code></td>
<td>零宽度负回顾后发断言</td>
<td>非捕获</td>
</tr>
</tbody>
</table>
<p><strong><em>注：</em></strong>Java正则引擎不支持平衡组。</p>
<h2 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h2><h3 id="带编号的反向引用"><a href="#带编号的反向引用" class="headerlink" title="带编号的反向引用"></a>带编号的反向引用</h3><p>带编号的反向引用使用以下语法：<code>\number</code><br>其中<code>number</code>是正则表达式中捕获组的序号位置。 例如，<code>\4</code> 匹配第四个捕获组的内容。 如果正则表达式模式中未定义<code>number</code>，则将发生分析错误</p>
<p><strong><em>例 匹配重复的单词和紧随每个重复的单词的单词(不命名子表达式)</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// (\w+)\s\1\W(\w+) 匹配重复的单词和紧随每个重复的单词的单词</span></div><div class="line">Assert.assertTrue(findAll(<span class="string">"(\\w+)\\s\\1\\W(\\w+)"</span>,</div><div class="line">        <span class="string">"He said that that was the the correct answer."</span>) &gt; <span class="number">0</span>);</div></pre></td></tr></table></figure></p>
<p><strong><em>输出</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">regex = (\w+)\s\1\W(\w+), content: He said that that was the the correct answer.</div><div class="line">[1th] start: 8, end: 21, group: that that was</div><div class="line">[2th] start: 22, end: 37, group: the the correct</div></pre></td></tr></table></figure></p>
<p><strong><em>说明</em></strong></p>
<ul>
<li><code>(\w+)</code>: 匹配一个或多个单词字符。</li>
<li><code>\s</code>: 与空白字符匹配。</li>
<li><code>\1</code>: 匹配第一个组，即<code>(\w+)</code>。</li>
<li><code>\W</code>: 匹配包括空格和标点符号的一个非单词字符。 这样可以防止正则表达式模式匹配从第一个捕获组的单词开头的单词。</li>
<li><h3 id="命名的反向引用"><a href="#命名的反向引用" class="headerlink" title="命名的反向引用"></a>命名的反向引用</h3>命名后向引用通过使用下面的语法进行定义：<code>\k&lt;name&gt;</code><br><strong><em>例 匹配重复的单词和紧随每个重复的单词的单词(命名子表达式)</em></strong><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// (?&lt;duplicateWord&gt;\w+)\s\k&lt;duplicateWord&gt;\W(?&lt;nextWord&gt;\w+) 匹配重复的单词和紧随每个重复的单词的单词</span></div><div class="line">Assert.assertTrue(findAll(<span class="string">"(?&lt;duplicateWord&gt;\\w+)\\s\\k&lt;duplicateWord&gt;\\W(?&lt;nextWord&gt;\\w+)"</span>,</div><div class="line">        <span class="string">"He said that that was the the correct answer."</span>) &gt; <span class="number">0</span>);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><em>输出</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">regex = (?&lt;duplicateWord&gt;\w+)\s\k&lt;duplicateWord&gt;\W(?&lt;nextWord&gt;\w+), content: He said that that was the the correct answer.</div><div class="line">[1th] start: 8, end: 21, group: that that was</div><div class="line">[2th] start: 22, end: 37, group: the the correct</div></pre></td></tr></table></figure></p>
<p><strong><em>说明</em></strong></p>
<ul>
<li><code>(?\w+)</code>: 匹配一个或多个单词字符。 命名此捕获组 duplicateWord。</li>
<li><code>\s</code>: 与空白字符匹配。</li>
<li><code>\k</code>: 匹配名为 duplicateWord 的捕获的组。</li>
<li><code>\W</code>: 匹配包括空格和标点符号的一个非单词字符。 这样可以防止正则表达式模式匹配从第一个捕获组的单词开头的单词。</li>
<li><code>(?\w+)</code>: 匹配一个或多个单词字符。 命名此捕获组 nextWord。</li>
</ul>
<h2 id="非捕获组"><a href="#非捕获组" class="headerlink" title="非捕获组"></a>非捕获组</h2><p><code>(?:exp)</code> 表示当一个限定符应用到一个组，但组捕获的子字符串并非所需时，通常会使用非捕获组构造。<br><strong><em>例 匹配以.结束的语句。</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 匹配由句号终止的语句。</span></div><div class="line">Assert.assertTrue(findAll(<span class="string">"(?:\\b(?:\\w+)\\W*)+\\."</span>, <span class="string">"This is a short sentence. Never end"</span>) &gt; <span class="number">0</span>);</div></pre></td></tr></table></figure></p>
<p><strong><em>输出</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">regex = (?:\b(?:\w+)\W*)+\., content: This is a short sentence. Never end</div><div class="line">[1th] start: 0, end: 25, group: This is a short sentence.</div></pre></td></tr></table></figure></p>
<h2 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h2><p>用于查找在某些内容(但并不包括这些内容)之前或之后的东西，也就是说它们像<code>\b</code>,<code>^</code>,<code>$</code>那样用于指定一个位置，这个位置应该满足一定的条件(即断言)，因此它们也被称为零宽断言。  </p>
<table>
<thead>
<tr>
<th>表达式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>(?=exp)</code></td>
<td>匹配<code>exp</code>前面的位置</td>
</tr>
<tr>
<td><code>(?&lt;=exp)</code></td>
<td>匹配<code>exp</code>后面的位置</td>
</tr>
<tr>
<td><code>(?!exp)</code></td>
<td>匹配后面跟的不是<code>exp</code>的位置</td>
</tr>
<tr>
<td><code>(?&lt;!exp)</code></td>
<td>匹配前面不是exp的位置</td>
</tr>
</tbody>
</table>
<h3 id="匹配exp前面的位置"><a href="#匹配exp前面的位置" class="headerlink" title="匹配exp前面的位置"></a>匹配exp前面的位置</h3><p><code>(?=exp)</code> 表示输入字符串必须匹配子表达式中的正则表达式模式，尽管匹配的子字符串未包含在匹配结果中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// \b\w+(?=\sis\b) 表示要捕获is之前的单词</span></div><div class="line">Assert.assertTrue(findAll(<span class="string">"\\b\\w+(?=\\sis\\b)"</span>, <span class="string">"The dog is a Malamute."</span>) &gt; <span class="number">0</span>);</div><div class="line">Assert.assertFalse(findAll(<span class="string">"\\b\\w+(?=\\sis\\b)"</span>, <span class="string">"The island has beautiful birds."</span>) &gt; <span class="number">0</span>);</div><div class="line">Assert.assertFalse(findAll(<span class="string">"\\b\\w+(?=\\sis\\b)"</span>, <span class="string">"The pitch missed home plate."</span>) &gt; <span class="number">0</span>);</div><div class="line">Assert.assertTrue(findAll(<span class="string">"\\b\\w+(?=\\sis\\b)"</span>, <span class="string">"Sunday is a weekend day."</span>) &gt; <span class="number">0</span>);</div></pre></td></tr></table></figure></p>
<p><strong><em>输出</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">regex = \b\w+(?=\sis\b), content: The dog is a Malamute.</div><div class="line">[1th] start: 4, end: 7, group: dog</div><div class="line">regex = \b\w+(?=\sis\b), content: The island has beautiful birds.</div><div class="line">not found</div><div class="line">regex = \b\w+(?=\sis\b), content: The pitch missed home plate.</div><div class="line">not found</div><div class="line">regex = \b\w+(?=\sis\b), content: Sunday is a weekend day.</div><div class="line">[1th] start: 0, end: 6, group: Sunday</div></pre></td></tr></table></figure></p>
<p><strong><em>说明</em></strong></p>
<ul>
<li><code>\b</code>: 在单词边界处开始匹配。</li>
<li><code>\w+</code>: 匹配一个或多个单词字符。</li>
<li><code>(?=\sis\b)</code>: 确定单词字符是否后接空白字符和字符串<code>is</code>，其在单词边界处结束。 如果如此，则匹配成功。</li>
</ul>
<h3 id="匹配exp后面的位置"><a href="#匹配exp后面的位置" class="headerlink" title="匹配exp后面的位置"></a>匹配exp后面的位置</h3><p><code>(?&lt;=exp)</code> 表示子表达式不得在输入字符串当前位置左侧出现，尽管子表达式未包含在匹配结果中。零宽度正回顾后发断言不会回溯。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// (?&lt;=\b20)\d&#123;2&#125;\b 表示要捕获以20开头的数字的后面部分</span></div><div class="line">Assert.assertTrue(findAll(<span class="string">"(?&lt;=\\b20)\\d&#123;2&#125;\\b"</span>, <span class="string">"2010 1999 1861 2140 2009"</span>) &gt; <span class="number">0</span>);</div></pre></td></tr></table></figure></p>
<p><strong><em>输出</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">regex = (?&lt;=\b20)\d&#123;2&#125;\b, content: 2010 1999 1861 2140 2009</div><div class="line">[1th] start: 2, end: 4, group: 10</div><div class="line">[2th] start: 22, end: 24, group: 09</div></pre></td></tr></table></figure></p>
<p><strong><em>说明</em></strong></p>
<ul>
<li><code>\d{2}</code>: 匹配两个十进制数字。</li>
<li><code>{?&lt;=\b20)</code>: 如果两个十进制数字的字边界以小数位数“20”开头，则继续匹配。</li>
<li><code>\b</code>: 在单词边界处结束匹配。</li>
</ul>
<h3 id="匹配后面跟的不是exp的位置"><a href="#匹配后面跟的不是exp的位置" class="headerlink" title="匹配后面跟的不是exp的位置"></a>匹配后面跟的不是exp的位置</h3><p><code>(?!exp)</code> 表示输入字符串不得匹配子表达式中的正则表达式模式，尽管匹配的子字符串未包含在匹配结果中。<br><strong><em>例 捕获未以“un”开头的单词</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// \b(?!un)\w+\b 表示要捕获未以“un”开头的单词</span></div><div class="line">Assert.assertTrue(findAll(<span class="string">"\\b(?!un)\\w+\\b"</span>, <span class="string">"unite one unethical ethics use untie ultimate"</span>) &gt; <span class="number">0</span>);</div></pre></td></tr></table></figure></p>
<p><strong><em>输出</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">regex = \b(?!un)\w+\b, content: unite one unethical ethics use untie ultimate</div><div class="line">[1th] start: 6, end: 9, group: one</div><div class="line">[2th] start: 20, end: 26, group: ethics</div><div class="line">[3th] start: 27, end: 30, group: use</div><div class="line">[4th] start: 37, end: 45, group: ultimate</div></pre></td></tr></table></figure></p>
<p><strong><em>说明</em></strong></p>
<ul>
<li><code>\b</code>: 在单词边界处开始匹配。</li>
<li><code>(?!un)</code>: 确定接下来的两个的字符是否为“un”。 如果没有，则可能匹配。</li>
<li><code>\w+</code>: 匹配一个或多个单词字符。</li>
<li><code>\b</code>: 在单词边界处结束匹配。</li>
</ul>
<h3 id="匹配前面不是exp的位置"><a href="#匹配前面不是exp的位置" class="headerlink" title="匹配前面不是exp的位置"></a>匹配前面不是exp的位置</h3><p><code>(?&lt;!exp)</code> 表示子表达式不得在输入字符串当前位置的左侧出现。 但是，任何不匹配子表达式 的子字符串不包含在匹配结果中。<br><strong><em>例 捕获任意工作日</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// (?&lt;!(Saturday|Sunday) )\b\w+ \d&#123;1,2&#125;, \d&#123;4&#125;\b 表示要捕获任意工作日（即周一到周五）</span></div><div class="line">Assert.assertTrue(findAll(<span class="string">"(?&lt;!(Saturday|Sunday) )\\b\\w+ \\d&#123;1,2&#125;, \\d&#123;4&#125;\\b"</span>, <span class="string">"Monday February 1, 2010"</span>) &gt; <span class="number">0</span>);</div><div class="line">Assert.assertTrue(findAll(<span class="string">"(?&lt;!(Saturday|Sunday) )\\b\\w+ \\d&#123;1,2&#125;, \\d&#123;4&#125;\\b"</span>, <span class="string">"Wednesday February 3, 2010"</span>) &gt; <span class="number">0</span>);</div><div class="line">Assert.assertFalse(findAll(<span class="string">"(?&lt;!(Saturday|Sunday) )\\b\\w+ \\d&#123;1,2&#125;, \\d&#123;4&#125;\\b"</span>, <span class="string">"Saturday February 6, 2010"</span>) &gt; <span class="number">0</span>);</div><div class="line">Assert.assertFalse(findAll(<span class="string">"(?&lt;!(Saturday|Sunday) )\\b\\w+ \\d&#123;1,2&#125;, \\d&#123;4&#125;\\b"</span>, <span class="string">"Sunday February 7, 2010"</span>) &gt; <span class="number">0</span>);</div><div class="line">Assert.assertTrue(findAll(<span class="string">"(?&lt;!(Saturday|Sunday) )\\b\\w+ \\d&#123;1,2&#125;, \\d&#123;4&#125;\\b"</span>, <span class="string">"Monday, February 8, 2010"</span>) &gt; <span class="number">0</span>);</div></pre></td></tr></table></figure></p>
<p><strong><em>输出</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">regex = (?&lt;!(Saturday|Sunday) )\b\w+ \d&#123;1,2&#125;, \d&#123;4&#125;\b, content: Monday February 1, 2010</div><div class="line">[1th] start: 7, end: 23, group: February 1, 2010</div><div class="line">regex = (?&lt;!(Saturday|Sunday) )\b\w+ \d&#123;1,2&#125;, \d&#123;4&#125;\b, content: Wednesday February 3, 2010</div><div class="line">[1th] start: 10, end: 26, group: February 3, 2010</div><div class="line">regex = (?&lt;!(Saturday|Sunday) )\b\w+ \d&#123;1,2&#125;, \d&#123;4&#125;\b, content: Saturday February 6, 2010</div><div class="line">not found</div><div class="line">regex = (?&lt;!(Saturday|Sunday) )\b\w+ \d&#123;1,2&#125;, \d&#123;4&#125;\b, content: Sunday February 7, 2010</div><div class="line">not found</div><div class="line">regex = (?&lt;!(Saturday|Sunday) )\b\w+ \d&#123;1,2&#125;, \d&#123;4&#125;\b, content: Monday, February 8, 2010</div><div class="line">[1th] start: 8, end: 24, group: February 8, 2010</div></pre></td></tr></table></figure></p>
<h1 id="贪婪与懒惰"><a href="#贪婪与懒惰" class="headerlink" title="贪婪与懒惰"></a>贪婪与懒惰</h1><p>当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符。<br>以这个表达式为例：<code>a.*b</code>，它将会匹配最长的以<code>a</code>开始，以<code>b</code>结束的字符串。如果用它来搜索<code>aabab</code>的话，它会匹配整个字符串<code>aabab</code>。这被称为贪婪匹配。<br>有时，我们更需要懒惰匹配，也就是匹配尽可能少的字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号<code>?</code>。这样<code>.*?</code>就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。  </p>
<table>
<thead>
<tr>
<th>表达式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>*?</code></td>
<td>重复任意次，但尽可能少重复</td>
</tr>
<tr>
<td><code>+?</code></td>
<td>重复1次或更多次，但尽可能少重复</td>
</tr>
<tr>
<td><code>??</code></td>
<td>重复0次或1次，但尽可能少重复</td>
</tr>
<tr>
<td><code>{n,m}?</code></td>
<td>重复n到m次，但尽可能少重复</td>
</tr>
<tr>
<td><code>{n,}?</code></td>
<td>重复n次以上，但尽可能少重复</td>
</tr>
</tbody>
</table>
<p><strong><em>例 Java正则中贪婪与懒惰的示例</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 贪婪匹配</span></div><div class="line">Assert.assertTrue(findAll(<span class="string">"a\\w*b"</span>, <span class="string">"abaabaaabaaaab"</span>) &gt; <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="comment">// 懒惰匹配</span></div><div class="line">Assert.assertTrue(findAll(<span class="string">"a\\w*?b"</span>, <span class="string">"abaabaaabaaaab"</span>) &gt; <span class="number">0</span>);</div><div class="line">Assert.assertTrue(findAll(<span class="string">"a\\w+?b"</span>, <span class="string">"abaabaaabaaaab"</span>) &gt; <span class="number">0</span>);</div><div class="line">Assert.assertTrue(findAll(<span class="string">"a\\w??b"</span>, <span class="string">"abaabaaabaaaab"</span>) &gt; <span class="number">0</span>);</div><div class="line">Assert.assertTrue(findAll(<span class="string">"a\\w&#123;0,4&#125;?b"</span>, <span class="string">"abaabaaabaaaab"</span>) &gt; <span class="number">0</span>);</div><div class="line">Assert.assertTrue(findAll(<span class="string">"a\\w&#123;3,&#125;?b"</span>, <span class="string">"abaabaaabaaaab"</span>) &gt; <span class="number">0</span>);</div></pre></td></tr></table></figure></p>
<p><strong><em>输出</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">regex = a\w*b, content: abaabaaabaaaab</div><div class="line">[1th] start: 0, end: 14, group: abaabaaabaaaab</div><div class="line">regex = a\w*?b, content: abaabaaabaaaab</div><div class="line">[1th] start: 0, end: 2, group: ab</div><div class="line">[2th] start: 2, end: 5, group: aab</div><div class="line">[3th] start: 5, end: 9, group: aaab</div><div class="line">[4th] start: 9, end: 14, group: aaaab</div><div class="line">regex = a\w+?b, content: abaabaaabaaaab</div><div class="line">[1th] start: 0, end: 5, group: abaab</div><div class="line">[2th] start: 5, end: 9, group: aaab</div><div class="line">[3th] start: 9, end: 14, group: aaaab</div><div class="line">regex = a\w??b, content: abaabaaabaaaab</div><div class="line">[1th] start: 0, end: 2, group: ab</div><div class="line">[2th] start: 2, end: 5, group: aab</div><div class="line">[3th] start: 6, end: 9, group: aab</div><div class="line">[4th] start: 11, end: 14, group: aab</div><div class="line">regex = a\w&#123;0,4&#125;?b, content: abaabaaabaaaab</div><div class="line">[1th] start: 0, end: 2, group: ab</div><div class="line">[2th] start: 2, end: 5, group: aab</div><div class="line">[3th] start: 5, end: 9, group: aaab</div><div class="line">[4th] start: 9, end: 14, group: aaaab</div><div class="line">regex = a\w&#123;3,&#125;?b, content: abaabaaabaaaab</div><div class="line">[1th] start: 0, end: 5, group: abaab</div><div class="line">[2th] start: 5, end: 14, group: aaabaaaab</div></pre></td></tr></table></figure></p>
<p><strong><em>说明</em></strong><br>本例中代码展示的是使用不同贪婪或懒惰策略去查找字符串<code>abaabaaabaaaab</code> 中匹配<strong>以<code>a</code>开头，以<code>b</code>结尾的所有子字符串</strong>。<br>请从输出结果中，细细体味使用不同的贪婪或懒惰策略，对于匹配子字符串有什么影响。</p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="匹配正则字符串的方法"><a href="#匹配正则字符串的方法" class="headerlink" title="匹配正则字符串的方法"></a>匹配正则字符串的方法</h2><p>由于正则表达式中很多元字符本身就是转义字符，在Java字符串的规则中不会被显示出来。<br>为此，可以使用一个工具类<code>org.apache.commons.lang3.StringEscapeUtils</code>来做特殊处理，使得转义字符可以打印。这个工具类提供的都是静态方法，从方法命名大致也可以猜出用法，这里不多做说明。<br>如果你了解maven，可以直接引入依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-lang3.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>本文为了展示正则匹配规则用到的方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">checkMatches</span><span class="params">(String regex, String content)</span> </span>&#123;</div><div class="line">    Pattern p = Pattern.compile(regex);</div><div class="line">    Matcher m = p.matcher(content);</div><div class="line">    <span class="keyword">boolean</span> flag = m.matches();</div><div class="line">    <span class="keyword">if</span> (m.matches()) &#123;</div><div class="line">        System.out.println(StringEscapeUtils.escapeJava(content) + <span class="string">"\tmatches： "</span> + StringEscapeUtils.escapeJava(regex));</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        System.out.println(StringEscapeUtils.escapeJava(content) + <span class="string">"\tnot matches： "</span> + StringEscapeUtils.escapeJava(regex));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> flag;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findAll</span><span class="params">(String regex, String content)</span> </span>&#123;</div><div class="line">    Pattern p = Pattern.compile(regex);</div><div class="line">    Matcher m = p.matcher(content);</div><div class="line">    System.out.println(<span class="string">"regex = "</span> + regex + <span class="string">", content: "</span> + content);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (m.find()) &#123;</div><div class="line">        count++;</div><div class="line">        System.out.println(<span class="string">"["</span> + count + <span class="string">"th] "</span> + <span class="string">"start: "</span> + m.start() + <span class="string">", end: "</span> + m.end()</div><div class="line">                + <span class="string">", group: "</span> + m.group());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (<span class="number">0</span> == count) &#123;</div><div class="line">        System.out.println(<span class="string">"not found"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> count;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="速查元字符字典"><a href="#速查元字符字典" class="headerlink" title="速查元字符字典"></a>速查元字符字典</h2><p>为了方便快查正则的元字符含义，在本节根据元字符的功能集中罗列正则的各种元字符。</p>
<h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>*</code></td>
<td>匹配前面的子表达式零次或多次。例如，zo<em> 能匹配 “z” 以及 “zoo”。</em> 等价于{0,}。</td>
</tr>
<tr>
<td><code>+</code></td>
<td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td>
</tr>
<tr>
<td><code>?</code></td>
<td>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 中的”do” 。? 等价于 {0,1}。</td>
</tr>
<tr>
<td><code>{n}</code></td>
<td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td>
</tr>
<tr>
<td><code>{n,}</code></td>
<td>n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td>
</tr>
<tr>
<td><code>{n,m}</code></td>
<td>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td>
</tr>
</tbody>
</table>
<h3 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h3><table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>^</code></td>
<td>匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。</td>
</tr>
<tr>
<td><code>$</code></td>
<td>匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。</td>
</tr>
<tr>
<td><code>\b</code></td>
<td>匹配一个字边界，即字与空格间的位置。</td>
</tr>
<tr>
<td><code>\B</code></td>
<td>非字边界匹配。</td>
</tr>
</tbody>
</table>
<h3 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h3><table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\cx</code></td>
<td>匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td>
</tr>
<tr>
<td><code>\f</code></td>
<td>匹配一个换页符。等价于 \x0c 和 \cL。</td>
</tr>
<tr>
<td><code>\n</code></td>
<td>匹配一个换行符。等价于 \x0a 和 \cJ。</td>
</tr>
<tr>
<td><code>\r</code></td>
<td>匹配一个回车符。等价于 \x0d 和 \cM。</td>
</tr>
<tr>
<td><code>\s</code></td>
<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td>
</tr>
<tr>
<td><code>\S</code></td>
<td>匹配任何非空白字符。等价于 [ \f\n\r\t\v]。</td>
</tr>
<tr>
<td><code>\t</code></td>
<td>匹配一个制表符。等价于 \x09 和 \cI。</td>
</tr>
<tr>
<td><code>\v</code></td>
<td>匹配一个垂直制表符。等价于 \x0b 和 \cK。</td>
</tr>
</tbody>
</table>
<h3 id="分组-1"><a href="#分组-1" class="headerlink" title="分组"></a>分组</h3><table>
<thead>
<tr>
<th>表达式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>(exp)</code></td>
<td>匹配的子表达式。()中的内容就是子表达式。</td>
</tr>
<tr>
<td><code>(?&lt;name&gt;exp)</code></td>
<td>命名的子表达式（反向引用）。</td>
</tr>
<tr>
<td><code>(?:exp)</code></td>
<td>非捕获组，表示当一个限定符应用到一个组，但组捕获的子字符串并非所需时，通常会使用非捕获组构造。</td>
</tr>
<tr>
<td><code>(?=exp)</code></td>
<td>匹配exp前面的位置。</td>
</tr>
<tr>
<td><code>(?&lt;=exp)</code></td>
<td>匹配exp后面的位置。</td>
</tr>
<tr>
<td><code>(?!exp)</code></td>
<td>匹配后面跟的不是exp的位置。</td>
</tr>
<tr>
<td><code>(?&lt;!exp)</code></td>
<td>匹配前面不是exp的位置。</td>
</tr>
</tbody>
</table>
<h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><table>
<thead>
<tr>
<th>字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\</code></td>
<td>将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\’ 匹配 “”，而 ‘(‘ 则匹配 “(“。</td>
</tr>
<tr>
<td><code>\&#124;</code></td>
<td>指明两项之间的一个选择。</td>
</tr>
<tr>
<td><code>[]</code></td>
<td>匹配方括号范围内的任意一个字符。形式如：[xyz]、[^xyz]、[a-z]、[^a-z]、[x,y,z]</td>
</tr>
</tbody>
</table>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="external">正则表达式30分钟入门教程</a><br><a href="https://msdn.microsoft.com/zh-cn/library/d9eze55x(v=vs.80" target="_blank" rel="external">msdn 正则表达式教程</a>.aspx)<br>作者：静默虚空<br>出处：<a href="http://www.cnblogs.com/jingmoxukong/" target="_blank" rel="external">http://www.cnblogs.com/jingmoxukong/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;正则表达式是什么？有什么用？&lt;/strong&gt;&lt;br&gt;正则表达式(Regular Expression)是一种文本规则，可以用来校验、查找、替换与规则匹配的文本。&lt;br&gt;&lt;strong&gt;又爱又恨的正则&lt;/strong&gt;&lt;br&gt;正则表达式是一个强大的文本匹配工具，但是它的规则实在很繁琐，而且理解起来也颇为蛋疼，容易让人望而生畏。&lt;br&gt;&lt;strong&gt;如何学习正则&lt;/strong&gt;&lt;br&gt;刚接触正则时，我看了一堆正则的语义说明，但是仍然不明所以。后来，我多接触一些正则的应用实例，渐渐有了感觉，再结合语义说明，终有领悟。我觉得正则表达式和武侠修练武功差不多，应该先练招式，再练心法。如果一开始就直接看正则的规则，保证你会懵逼。&lt;br&gt;当你熟悉基本招式（正则基本使用案例）后，也该修炼修炼心法（正则语法）了。真正的高手不能只靠死记硬背那么几招把式。就像张三丰教张无忌太极拳一样，领悟心法，融会贯通，少侠你就可以无招胜有招，成为传说中的绝世高手。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以上闲话可归纳为一句：学习正则应该从实例去理解规则。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="正则" scheme="http://www.javacn.top/categories/%E6%AD%A3%E5%88%99/"/>
    
    
      <category term="转载" scheme="http://www.javacn.top/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="正则" scheme="http://www.javacn.top/tags/%E6%AD%A3%E5%88%99/"/>
    
      <category term="正则表达式" scheme="http://www.javacn.top/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java正则速成秘籍（一）之招式篇</title>
    <link href="http://www.javacn.top/20170421/regular_java_1/"/>
    <id>http://www.javacn.top/20170421/regular_java_1/</id>
    <published>2017-04-21T03:22:50.000Z</published>
    <updated>2017-05-03T03:06:11.936Z</updated>
    
    <content type="html"><![CDATA[<h1 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h1><p><strong>正则表达式是什么？有什么用？</strong><br>正则表达式(Regular Expression)是一种文本规则，可以用来校验、查找、替换与规则匹配的文本。<br><strong>又爱又恨的正则</strong><br>正则表达式是一个强大的文本匹配工具，但是它的规则实在很繁琐，而且理解起来也颇为蛋疼，容易让人望而生畏。<br><strong>如何学习正则</strong><br>刚接触正则时，我看了一堆正则的语义说明，但是仍然不明所以。后来，我多接触一些正则的应用实例，渐渐有了感觉，再结合语义说明，终有领悟。我觉得正则表达式和武侠修练武功差不多，应该先练招式，再练心法。如果一开始就直接看正则的规则，保证你会懵逼。<br>当你熟悉基本招式（正则基本使用案例）后，也该修炼修炼心法（正则语法）了。真正的高手不能只靠死记硬背那么几招把式。就像张三丰教张无忌太极拳一样，领悟心法，融会贯通，少侠你就可以无招胜有招，成为传说中的绝世高手。</p>
<p><strong>以上闲话可归纳为一句：学习正则应该从实例去理解规则。</strong></p>
<a id="more"></a>
<p>打开秘籍：欲练神功，必先自宫！没有蛋，也就不会蛋疼了。<br><strong>Java正则速成秘籍分三篇：</strong>  </p>
<ul>
<li><a href="#">Java正则速成秘籍（一）之招式篇</a><br>展示Java对于正则表达式的支持。</li>
<li><a href="../Java正则速成秘籍（二）之心法篇">Java正则速成秘籍（二）之心法篇</a><br>介绍正则表达式的语法规则。</li>
<li><a href="../Java正则速成秘籍（三）之见招拆招篇">Java正则速成秘籍（三）之见招拆招篇</a><br>从实战出发，介绍正则的常用案例。<br>本文是<strong>Java正则速成秘籍的招式篇</strong>。主要介绍JDK对于正则表达式的支持。</li>
</ul>
<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>JDK中的<code>java.util.regex</code>包提供了对正则表达式的支持。<br>java.util.regex有三个核心类：</p>
<ul>
<li><strong><em>Pattern类</em></strong>：Pattern是一个正则表达式的编译表示。</li>
<li><strong><em>Matcher类</em></strong>：Matcher是对输入字符串进行解释和匹配操作的引擎。</li>
<li><strong><em>PatternSyntaxException</em></strong>：PatternSyntaxException是一个非强制异常类，它表示一个正则表达式模式中的语法错误。<br><strong>注</strong>：需要格外注意一点，在Java中使用反斜杠<code>\</code>时必须写成 <code>\\</code>。所以本文的代码出现形如<code>String regex = &quot;\\$\\{.*?\\}&quot;</code> 其实就是<code>&quot;\$\{.*?\}&quot;</code>，不要以为是画风不对哦。</li>
</ul>
<h2 id="Pattern类"><a href="#Pattern类" class="headerlink" title="Pattern类"></a>Pattern类</h2><p>Pattern类没有公共构造方法。要创建一个Pattern对象，你必须首先调用其静态方法compile，加载正则规则字符串，然后返回一个Pattern对象。<br>与Pattern类一样，Matcher类也没有公共构造方法。你需要调用Pattern对象的matcher方法来获得一个Matcher对象。<br><strong><em>案例：Pattern和Matcher的初始化</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Pattern p = Pattern.compile(regex);</div><div class="line">Matcher m = p.matcher(content);</div></pre></td></tr></table></figure></p>
<h2 id="Matcher类"><a href="#Matcher类" class="headerlink" title="Matcher类"></a>Matcher类</h2><p>Matcher类可以说是java.util.regex核心类中的必杀技！<br>Matcher类有三板斧（三类功能）：</p>
<ul>
<li>校验</li>
<li>查找</li>
<li>替换<br>下面我们来领略一下这三块的功能。  <h3 id="校验文本是否与正则规则匹配"><a href="#校验文本是否与正则规则匹配" class="headerlink" title="校验文本是否与正则规则匹配"></a>校验文本是否与正则规则匹配</h3>为了检查文本是否与正则规则匹配，Matcher提供了以下几个返回值为boolean的方法。</li>
</ul>
<table>
<thead>
<tr>
<th>序号</th>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>public boolean lookingAt()</td>
<td>尝试将从区域开头开始的输入序列与该模式匹配。</td>
</tr>
<tr>
<td>2</td>
<td>public boolean find()</td>
<td>尝试查找与该模式匹配的输入序列的下一个子序列。</td>
</tr>
<tr>
<td>3</td>
<td>public boolean find(int start)</td>
<td>重置此匹配器，然后尝试查找匹配该模式、从指定索引开始的输入序列的下一个子序列。</td>
</tr>
<tr>
<td>4</td>
<td>public boolean matches()</td>
<td>尝试将整个区域与模式匹配。</td>
</tr>
</tbody>
</table>
<p>如果你傻傻分不清上面的查找方法有什么区别，那么下面一个例子就可以让你秒懂。<br><strong>案例：lookingAt vs find vs matches</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    checkLookingAt(<span class="string">"hello"</span>, <span class="string">"helloworld"</span>);</div><div class="line">    checkLookingAt(<span class="string">"world"</span>, <span class="string">"helloworld"</span>);</div><div class="line"></div><div class="line">    checkFind(<span class="string">"hello"</span>, <span class="string">"helloworld"</span>);</div><div class="line">    checkFind(<span class="string">"world"</span>, <span class="string">"helloworld"</span>);</div><div class="line"></div><div class="line">    checkMatches(<span class="string">"hello"</span>, <span class="string">"helloworld"</span>);</div><div class="line">    checkMatches(<span class="string">"world"</span>, <span class="string">"helloworld"</span>);</div><div class="line">    checkMatches(<span class="string">"helloworld"</span>, <span class="string">"helloworld"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkLookingAt</span><span class="params">(String regex, String content)</span> </span>&#123;</div><div class="line">    Pattern p = Pattern.compile(regex);</div><div class="line">    Matcher m = p.matcher(content);</div><div class="line">    <span class="keyword">if</span> (m.lookingAt()) &#123;</div><div class="line">        System.out.println(content + <span class="string">"\tlookingAt： "</span> + regex);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        System.out.println(content + <span class="string">"\tnot lookingAt： "</span> + regex);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkFind</span><span class="params">(String regex, String content)</span> </span>&#123;</div><div class="line">    Pattern p = Pattern.compile(regex);</div><div class="line">    Matcher m = p.matcher(content);</div><div class="line">    <span class="keyword">if</span> (m.find()) &#123;</div><div class="line">        System.out.println(content + <span class="string">"\tfind： "</span> + regex);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        System.out.println(content + <span class="string">"\tnot find： "</span> + regex);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkMatches</span><span class="params">(String regex, String content)</span> </span>&#123;</div><div class="line">    Pattern p = Pattern.compile(regex);</div><div class="line">    Matcher m = p.matcher(content);</div><div class="line">    <span class="keyword">if</span> (m.matches()) &#123;</div><div class="line">        System.out.println(content + <span class="string">"\tmatches： "</span> + regex);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        System.out.println(content + <span class="string">"\tnot matches： "</span> + regex);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong><em>输出</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">helloworld  lookingAt： hello</div><div class="line">helloworld  not lookingAt： world</div><div class="line">helloworld  find： hello</div><div class="line">helloworld  find： world</div><div class="line">helloworld  not matches： hello</div><div class="line">helloworld  not matches： world</div><div class="line">helloworld  matches： helloworld</div></pre></td></tr></table></figure></p>
<p><strong><em>说明</em></strong><br><code>regex = &quot;world&quot;</code> 表示的正则规则是以world开头的字符串，<code>regex = &quot;hello&quot;</code> 和<code>regex = &quot;hello world</code> 也是同理。  </p>
<ul>
<li>lookingAt方法从头部开始，检查content字符串是否有子字符串于正则规则匹配。</li>
<li>find方法检查content字符串是否有子字符串于正则规则匹配，不管字符串所在位置。</li>
<li>matches方法检查content字符串整体是否与正则规则匹配。</li>
</ul>
<h3 id="查找匹配正则规则的文本位置"><a href="#查找匹配正则规则的文本位置" class="headerlink" title="查找匹配正则规则的文本位置"></a>查找匹配正则规则的文本位置</h3><p>为了查找文本匹配正则规则的位置，Matcher提供了以下方法：</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>public int start()</td>
<td>返回以前匹配的初始索引。</td>
</tr>
<tr>
<td>2</td>
<td>public int start(int group)</td>
<td>返回在以前的匹配操作期间，由给定组所捕获的子序列的初始索引</td>
</tr>
<tr>
<td>3</td>
<td>public int end()</td>
<td>返回最后匹配字符之后的偏移量。</td>
</tr>
<tr>
<td>4</td>
<td>public int end(int group)</td>
<td>返回在以前的匹配操作期间，由给定组所捕获子序列的最后字符之后的偏移量。</td>
</tr>
<tr>
<td>5</td>
<td>public String group()</td>
<td>返回前一个符合匹配条件的子序列。</td>
</tr>
<tr>
<td>6</td>
<td>public String group(int group)</td>
<td>返回指定的符合匹配条件的子序列。</td>
</tr>
</tbody>
</table>
<p><strong><em>案例：使用start()、end()、group() 查找所有匹配正则条件的子序列</em></strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> String regex = <span class="string">"world"</span>;</div><div class="line">    <span class="keyword">final</span> String content = <span class="string">"helloworld helloworld"</span>;</div><div class="line">    Pattern p = Pattern.compile(regex);</div><div class="line">    Matcher m = p.matcher(content);</div><div class="line">    System.out.println(<span class="string">"content: "</span> + content);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> (m.find()) &#123;</div><div class="line">        i++;</div><div class="line">        System.out.println(<span class="string">"["</span> + i + <span class="string">"th] found"</span>);</div><div class="line">        System.out.print(<span class="string">"start: "</span> + m.start() + <span class="string">", "</span>);</div><div class="line">        System.out.print(<span class="string">"end: "</span> + m.end() + <span class="string">", "</span>);</div><div class="line">        System.out.print(<span class="string">"group: "</span> + m.group() + <span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong><em>输出</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">content: helloworld helloworld</div><div class="line">[1th] found</div><div class="line">start: 5, end: 10, group: world</div><div class="line">[2th] found</div><div class="line">start: 16, end: 21, group: world</div></pre></td></tr></table></figure></p>
<p><strong><em>说明</em></strong><br>例子很直白，不言自明了吧。</p>
<h3 id="替换匹配正则规则的文本"><a href="#替换匹配正则规则的文本" class="headerlink" title="替换匹配正则规则的文本"></a>替换匹配正则规则的文本</h3><p>替换方法是替换输入字符串里文本的方法：  </p>
<table>
<thead>
<tr>
<th>序号</th>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>public Matcher appendReplacement(StringBuffer sb, String replacement)</td>
<td>实现非终端添加和替换步骤。</td>
</tr>
<tr>
<td>2</td>
<td>public StringBuffer appendTail(StringBuffer sb)</td>
<td>实现终端添加和替换步骤。</td>
</tr>
<tr>
<td>3</td>
<td>public String replaceAll(String replacement)</td>
<td>替换模式与给定替换字符串相匹配的输入序列的每个子序列。</td>
</tr>
<tr>
<td>4</td>
<td>public String replaceFirst(String replacement)</td>
<td>替换模式与给定替换字符串匹配的输入序列的第一个子序列。</td>
</tr>
<tr>
<td>5</td>
<td>public static String quoteReplacement(String s)</td>
<td>返回指定字符串的字面替换字符串。这个方法返回一个字符串，就像传递给Matcher类的appendReplacement 方法一个字面字符串一样工作。</td>
</tr>
</tbody>
</table>
<p><strong>案例：replaceFirst vs replaceAll</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    String regex = <span class="string">"can"</span>;</div><div class="line">    String replace = <span class="string">"can not"</span>;</div><div class="line">    String content = <span class="string">"I can because I think I can."</span>;</div><div class="line"></div><div class="line">    Pattern p = Pattern.compile(regex);</div><div class="line">    Matcher m = p.matcher(content);</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"content: "</span> + content);</div><div class="line">    System.out.println(<span class="string">"replaceFirst: "</span> + m.replaceFirst(replace));</div><div class="line">    System.out.println(<span class="string">"replaceAll: "</span> + m.replaceAll(replace));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong><em>输出</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">content: I can because I think I can.</div><div class="line">replaceFirst: I can not because I think I can.</div><div class="line">replaceAll: I can not because I think I can not.</div></pre></td></tr></table></figure></p>
<p><strong><em>说明</em></strong><br><code>replaceFirst</code>：替换第一个匹配正则规则的子序列。<br><code>replaceAll</code>：替换所有匹配正则规则的子序列。</p>
<p><strong>案例：appendReplacement、appendTail和replaceAll</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    String regex = <span class="string">"can"</span>;</div><div class="line">    String replace = <span class="string">"can not"</span>;</div><div class="line">    String content = <span class="string">"I can because I think I can."</span>;</div><div class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</div><div class="line">    StringBuffer sb2 = <span class="keyword">new</span> StringBuffer();</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"content: "</span> + content);</div><div class="line">    Pattern p = Pattern.compile(regex);</div><div class="line">    Matcher m = p.matcher(content);</div><div class="line">    <span class="keyword">while</span> (m.find()) &#123;</div><div class="line">        m.appendReplacement(sb, replace);</div><div class="line">    &#125;</div><div class="line">    System.out.println(<span class="string">"appendReplacement: "</span> + sb);</div><div class="line">    m.appendTail(sb);</div><div class="line">    System.out.println(<span class="string">"appendTail: "</span> + sb);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong><em>输出</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">content: I can because I think I can.</div><div class="line">appendReplacement: I can not because I think I can not</div><div class="line">appendTail: I can not because I think I can not.</div></pre></td></tr></table></figure></p>
<p><strong><em>说明</em></strong><br>从输出结果可以看出，<code>appendReplacement</code>和<code>appendTail</code>方法组合起来用，功能和<code>replaceAll</code>是一样的。<br>如果你查看<code>replaceAll</code>的源码，会发现其内部就是使用<code>appendReplacement</code>和<code>appendTail</code>方法组合来实现的。 </p>
<p><strong>案例：quoteReplacement和replaceAll，解决特殊字符替换问题</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    String regex = <span class="string">"\\$\\&#123;.*?\\&#125;"</span>;</div><div class="line">    String replace = <span class="string">"$&#123;product&#125;"</span>;</div><div class="line">    String content = <span class="string">"product is $&#123;productName&#125;."</span>;</div><div class="line"></div><div class="line">    Pattern p = Pattern.compile(regex);</div><div class="line">    Matcher m = p.matcher(content);</div><div class="line">    String replaceAll = m.replaceAll(replace);</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"content: "</span> + content);</div><div class="line">    System.out.println(<span class="string">"replaceAll: "</span> + replaceAll);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong><em>输出</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: No group with name &#123;product&#125;</div><div class="line">    at java.util.regex.Matcher.appendReplacement(Matcher.java:849)</div><div class="line">    at java.util.regex.Matcher.replaceAll(Matcher.java:955)</div><div class="line">    at org.zp.notes.javase.regex.RegexDemo.wrongMethod(RegexDemo.java:42)</div><div class="line">    at org.zp.notes.javase.regex.RegexDemo.main(RegexDemo.java:18)</div><div class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</div><div class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</div><div class="line">    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</div><div class="line">    at java.lang.reflect.Method.invoke(Method.java:498)</div><div class="line">    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)</div></pre></td></tr></table></figure></p>
<p><strong><em>说明</em></strong><br><code>String regex = &quot;\\$\\{.*?\\}&quot;;</code>表示匹配类似${name}这样的字符串。由于<code>$、{ 、}</code>都是特殊字符，需要用反义字符<code>\</code>来修饰才能被当做一个字符串字符来处理。<br>上面的例子是想将<code>${productName}</code> 替换为<code>${product}</code> ，然而<code>replaceAll</code>方法却将传入的字符串中的<code>$</code>当做特殊字符来处理了。结果产生异常。<br><strong><em>如何解决这个问题?</em></strong><br>JDK1.5引入了<code>quoteReplacement</code>方法。它可以用来转换特殊字符。其实源码非常简单，就是判断字符串中如果有<code>\</code>或<code>$</code>，就为它加一个转义字符<code>\</code><br>我们对上面的代码略作调整：<br><code>m.replaceAll(replace)</code>改为<code>m.replaceAll(Matcher.quoteReplacement(replace))</code>，新代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    String regex = <span class="string">"\\$\\&#123;.*?\\&#125;"</span>;</div><div class="line">    String replace = <span class="string">"$&#123;product&#125;"</span>;</div><div class="line">    String content = <span class="string">"product is $&#123;productName&#125;."</span>;</div><div class="line"></div><div class="line">    Pattern p = Pattern.compile(regex);</div><div class="line">    Matcher m = p.matcher(content);</div><div class="line">    String replaceAll = m.replaceAll(Matcher.quoteReplacement(replace));</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"content: "</span> + content);</div><div class="line">    System.out.println(<span class="string">"replaceAll: "</span> + replaceAll);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">content: product is $&#123;productName&#125;.</div><div class="line">replaceAll: product is $&#123;product&#125;.</div></pre></td></tr></table></figure></p>
<p><strong><em>说明</em></strong><br>字符串中如果有<code>\</code>或<code>$</code>，不能被正常解析的问题解决。</p>
<p>出处：<a href="http://www.cnblogs.com/jingmoxukong/" target="_blank" rel="external">http://www.cnblogs.com/jingmoxukong/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;导读&quot;&gt;&lt;a href=&quot;#导读&quot; class=&quot;headerlink&quot; title=&quot;导读&quot;&gt;&lt;/a&gt;导读&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;正则表达式是什么？有什么用？&lt;/strong&gt;&lt;br&gt;正则表达式(Regular Expression)是一种文本规则，可以用来校验、查找、替换与规则匹配的文本。&lt;br&gt;&lt;strong&gt;又爱又恨的正则&lt;/strong&gt;&lt;br&gt;正则表达式是一个强大的文本匹配工具，但是它的规则实在很繁琐，而且理解起来也颇为蛋疼，容易让人望而生畏。&lt;br&gt;&lt;strong&gt;如何学习正则&lt;/strong&gt;&lt;br&gt;刚接触正则时，我看了一堆正则的语义说明，但是仍然不明所以。后来，我多接触一些正则的应用实例，渐渐有了感觉，再结合语义说明，终有领悟。我觉得正则表达式和武侠修练武功差不多，应该先练招式，再练心法。如果一开始就直接看正则的规则，保证你会懵逼。&lt;br&gt;当你熟悉基本招式（正则基本使用案例）后，也该修炼修炼心法（正则语法）了。真正的高手不能只靠死记硬背那么几招把式。就像张三丰教张无忌太极拳一样，领悟心法，融会贯通，少侠你就可以无招胜有招，成为传说中的绝世高手。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以上闲话可归纳为一句：学习正则应该从实例去理解规则。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="正则" scheme="http://www.javacn.top/categories/%E6%AD%A3%E5%88%99/"/>
    
    
      <category term="转载" scheme="http://www.javacn.top/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="正则" scheme="http://www.javacn.top/tags/%E6%AD%A3%E5%88%99/"/>
    
      <category term="正则表达式" scheme="http://www.javacn.top/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>linux 查找目录或文件</title>
    <link href="http://www.javacn.top/20170421/linux_find_file/"/>
    <id>http://www.javacn.top/20170421/linux_find_file/</id>
    <published>2017-04-21T03:16:07.000Z</published>
    <updated>2017-05-03T03:04:58.736Z</updated>
    
    <content type="html"><![CDATA[<p>查找目录：<code>find /（查找范围） -name &#39;查找关键字&#39; -type d</code><br>查找文件：<code>find /（查找范围） -name 查找关键字 -print</code><br>如果需要更进一步的了解，可以参看Linux的命令详解。 这里摘抄如下：</p>
<a id="more"></a>
<figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div></pre></td><td class="code"><pre><div class="line">·find path -option [ -print ] [ -exec -ok command ] &#123;&#125; /;</div><div class="line"><span class="comment">#-print 将查找到的文件输出到标准输出</span></div><div class="line"><span class="comment">#-exec command &#123;&#125; /;     -----将查到的文件执行command操作,&#123;&#125; 和 /;之间有空格</span></div><div class="line"><span class="comment">#-ok 和-exec相同，只不过在操作前要询用户</span></div><div class="line">====================================================</div><div class="line">-name filename             <span class="comment">#查找名为filename的文件</span></div><div class="line">-perm                       <span class="comment">#按执行权限来查找</span></div><div class="line">-user   username            <span class="comment">#按文件属主来查找</span></div><div class="line">-group groupname            <span class="comment">#按组来查找</span></div><div class="line">-mtime -n +n               <span class="comment">#按文件更改时间来查找文件，-n指n天以内，+n指n天以前</span></div><div class="line">-atime   -n +n              <span class="comment">#按文件访问时间来查</span></div><div class="line">-perm                        <span class="comment">#按执行权限来查找</span></div><div class="line">-user   username            <span class="comment">#按文件属主来查找</span></div><div class="line">-group groupname            <span class="comment">#按组来查找</span></div><div class="line">-mtime -n +n               <span class="comment">#按文件更改时间来查找文件，-n指n天以内，+n指n天以前</span></div><div class="line">-atime   -n +n              <span class="comment">#按文件访问时间来查找文件，-n指n天以内，+n指n天以前 </span></div><div class="line">-ctime   -n +n              <span class="comment">#按文件创建时间来查找文件，-n指n天以内，+n指n天以前 </span></div><div class="line">-nogroup                    <span class="comment">#查无有效属组的文件，即文件的属组在/etc/groups中不存在</span></div><div class="line">-nouser                     <span class="comment">#查无有效属主的文件，即文件的属主在/etc/passwd中不存</span></div><div class="line">-newer f1 !f2              找文件，-n指n天以内，+n指n天以前 </div><div class="line">-ctime   -n +n              <span class="comment">#按文件创建时间来查找文件，-n指n天以内，+n指n天以前 </span></div><div class="line">-nogroup                    <span class="comment">#查无有效属组的文件，即文件的属组在/etc/groups中不存在</span></div><div class="line">-nouser                     <span class="comment">#查无有效属主的文件，即文件的属主在/etc/passwd中不存</span></div><div class="line">-newer f1 !f2              <span class="comment">#查更改时间比f1新但比f2旧的文件</span></div><div class="line">-type    b/d/c/p/l/f        <span class="comment">#查是块设备、目录、字符设备、管道、符号链接、普通文件</span></div><div class="line">-size     n[c]              <span class="comment">#查长度为n块[或n字节]的文件</span></div><div class="line">-depth                      <span class="comment">#使查找在进入子目录前先行查找完本目录</span></div><div class="line">-fstype                     <span class="comment">#查更改时间比f1新但比f2旧的文件</span></div><div class="line">-type    b/d/c/p/l/f        <span class="comment">#查是块设备、目录、字符设备、管道、符号链接、普通文件</span></div><div class="line">-size     n[c]              <span class="comment">#查长度为n块[或n字节]的文件</span></div><div class="line">-depth                      <span class="comment">#使查找在进入子目录前先行查找完本目录</span></div><div class="line">-fstype                     <span class="comment">#查位于某一类型文件系统中的文件，这些文件系统类型通常可 在/etc/fstab中找到</span></div><div class="line">-mount                      <span class="comment">#查文件时不跨越文件系统mount点</span></div><div class="line">-follow                     <span class="comment">#如果遇到符号链接文件，就跟踪链接所指的文件</span></div><div class="line">-cpio                   <span class="comment">#查位于某一类型文件系统中的文件，这些文件系统类型通常可 在/etc/fstab中找到</span></div><div class="line">-mount                      <span class="comment">#查文件时不跨越文件系统mount点</span></div><div class="line">-follow                     <span class="comment">#如果遇到符号链接文件，就跟踪链接所指的文件</span></div><div class="line">-cpio                       <span class="comment">#对匹配的文件使用cpio命令，将他们备份到磁带设备中</span></div><div class="line">-prune                      <span class="comment">#忽略某个目录</span></div><div class="line">====================================================</div><div class="line"><span class="variable">$find</span> ~ -name <span class="string">"*.txt"</span> -print    <span class="comment">#在$HOME中查.txt文件并显示</span></div><div class="line"><span class="variable">$find</span> .   -name <span class="string">"*.txt"</span> -print</div><div class="line"><span class="variable">$find</span> .   -name <span class="string">"[A-Z]*"</span> -pri26nbsp;   <span class="comment">#对匹配的文件使用cpio命令，将他们备份到磁带设备中</span></div><div class="line">-prune                              <span class="comment">#忽略某个目录</span></div><div class="line">=====================================================</div><div class="line"><span class="variable">$find</span> ~ -name <span class="string">"*.txt"</span> -print    <span class="comment">#在$HOME中查.txt文件并显示</span></div><div class="line"><span class="variable">$find</span> .   -name <span class="string">"*.txt"</span> -print</div><div class="line"><span class="variable">$find</span> .   -name <span class="string">"[A-Z]*"</span> -print <span class="comment">#查以大写字母开头的文件</span></div><div class="line"><span class="variable">$find</span> /etc -name <span class="string">"host*"</span> -print <span class="comment">#查以host开头的文件</span></div><div class="line"><span class="variable">$find</span> . -name <span class="string">"[a-z][a-z][0--9][0--9].txt"</span>   -print <span class="comment">#查以两个小写字母和两个数字开头的txt文件</span></div><div class="line"><span class="variable">$find</span> . -perm <span class="number">755</span> -print</div><div class="line"><span class="variable">$find</span> . -perm -<span class="number">007</span> -exec ls -l &#123;&#125; /; <span class="comment">#查所有用户都可读写执行的文件同-perm 777</span></div><div class="line"><span class="variable">$find</span> . -type d -print</div><div class="line"><span class="variable">$find</span> . ! -type d -print </div><div class="line"><span class="variable">$find</span> . -type l -print</div><div class="line"><span class="variable">$find</span> . -size +<span class="number">1000000</span>c -print       <span class="comment">#查长度大于1Mb的文件</span></div><div class="line"><span class="variable">$find</span> . -size <span class="number">100</span>c        -print      <span class="comment"># 查长度为100c的文件</span></div><div class="line"><span class="variable">$find</span> . -size +<span class="number">10</span> -print             <span class="comment">#查长度超过期作废10块的文件（1块=512字节）</span></div><div class="line"><span class="variable">$cd</span> /</div><div class="line"><span class="variable">$find</span> etc home apps   -depth -print | cpio -ivcdC65536 -o /dev/rmt0</div><div class="line"><span class="variable">$find</span> /etc -name <span class="string">"passwd*"</span> -exec grep <span class="string">"cnscn"</span> &#123;&#125; /; <span class="comment">#看是否存在cnscn用户</span></div><div class="line"><span class="variable">$find</span> . -name <span class="string">"yao*"</span> | xargs file</div><div class="line"><span class="variable">$find</span> . -name <span class="string">"yao*"</span> | xargs echo   <span class="string">""</span> &gt; /tmp/core.log</div><div class="line"><span class="variable">$find</span> . -name <span class="string">"yao*"</span> | xargs chmod o-w</div><div class="line">======================================================</div><div class="line"><span class="variable">$find</span> -name april*                     <span class="comment">#在当前目录下查找以april开始的文件</span></div><div class="line"><span class="variable">$find</span> -name april* fprint file        <span class="comment">#在当前目录下查找以april开始的文件，并把结果输出到file中</span></div><div class="line"><span class="variable">$find</span> -name ap* -o -name may* <span class="comment">#查找以ap或may开头的文件</span></div><div class="line"><span class="variable">$find</span> /mnt -name tom.txt -ftype vfat <span class="comment">#在/mnt下查找名称为tom.txt且文件系统类型为vfat的文件</span></div><div class="line"><span class="variable">$find</span> /mnt -name t.txt ! -ftype vfat   <span class="comment">#在/mnt下查找名称为tom.txt且文件系统类型不为vfat的文件</span></div><div class="line"><span class="variable">$find</span> /tmp -name wa* -type l           <span class="comment">#在/$tmp下查找名为wa开头且类型为符号链接的文件</span></div><div class="line"><span class="variable">$find</span> /home -mtime -<span class="number">2</span>                 <span class="comment">#在/home下查最近两天内改动过的文件</span></div><div class="line"><span class="variable">$find</span> /home   -atime -<span class="number">1</span>                  <span class="comment">#查1天之内被存取过的文件</span></div><div class="line"><span class="variable">$find</span> /home -mmin   +<span class="number">60</span>                  <span class="comment">#在/home下查60分钟前改动过的文件</span></div><div class="line"><span class="variable">$find</span> /home -amin +<span class="number">30</span>                  <span class="comment">#查最近30分钟前被存取过的文件</span></div><div class="line"><span class="variable">$find</span> /home -newer tmp.txt             <span class="comment">#在/home下查更新时间比tmp.txt近的文件或目录</span></div><div class="line"><span class="variable">$find</span> /home -anewer tmp.txt            <span class="comment">#在/home下查存取时间比tmp.txt近的文件或目录</span></div><div class="line"><span class="variable">$find</span> /home -used -<span class="number">2</span>                  <span class="comment">#列出文件或目录被改动过之后，在2日内被存取过的文件或目录</span></div><div class="line"><span class="variable">$find</span> /home -user cnscn                <span class="comment">#列出/home目录内属于用户cnscn的文件或目录</span></div><div class="line"><span class="variable">$find</span> /home -uid +<span class="number">501</span>                 <span class="comment">#列出/home目录内用户的识别码大于501的文件或目录</span></div><div class="line"><span class="variable">$find</span> /home -group cnscn              <span class="comment">#列出/home内组为cnscn的文件或目录</span></div><div class="line"><span class="variable">$find</span> /home -gid <span class="number">501</span>                   <span class="comment">#列出/home内组id为501的文件或目录</span></div><div class="line"><span class="variable">$find</span> /home -nouser                    <span class="comment">#列出/home内不属于本地用户的文件或目录</span></div><div class="line"><span class="variable">$find</span> /home -nogroup                   <span class="comment">#列出/home内不属于本地组的文件或目录</span></div><div class="line"><span class="variable">$find</span> /home   -name tmp.txt   -maxdepth <span class="number">4</span> <span class="comment">#列出/home内的tmp.txt 查时深度最多为3层</span></div><div class="line"><span class="variable">$find</span> /home -name tmp.txt -mindepth <span class="number">3</span> <span class="comment">#从第2层开始查</span></div><div class="line"><span class="variable">$find</span> /home -empty                    <span class="comment">#查找大小为0的文件或空目录</span></div><div class="line"><span class="variable">$find</span> /home -size +<span class="number">512</span>k               <span class="comment">#查大于512k的文件</span></div><div class="line"><span class="variable">$find</span> /home -size -<span class="number">512</span>k               <span class="comment">#查小于512k的文件</span></div><div class="line"><span class="variable">$find</span> /home -links +<span class="number">2</span>                 <span class="comment">#查硬连接数大于2的文件或目录</span></div><div class="line"><span class="variable">$find</span> /home -perm <span class="number">0700</span>                <span class="comment">#查权限为700的文件或目录</span></div><div class="line"><span class="variable">$find</span> /tmp -name tmp.txt -exec cat &#123;&#125; /;</div><div class="line"><span class="variable">$find</span> /tmp -name tmp.txt -ok rm &#123;&#125; /;</div><div class="line"><span class="variable">$find</span>   / -amin   -<span class="number">10</span>       <span class="comment"># 查找在系统中最后10分钟访问的文件</span></div><div class="line"><span class="variable">$find</span>   / -atime -<span class="number">2</span>         <span class="comment"># 查找在系统中最后48小时访问的文件</span></div><div class="line"><span class="variable">$find</span>   / -empty              <span class="comment"># 查找在系统中为空的文件或者文件夹</span></div><div class="line"><span class="variable">$find</span>   / -group cat        <span class="comment"># 查找在系统中属于 groupcat的文件</span></div><div class="line"><span class="variable">$find</span>   / -mmin -<span class="number">5</span>         <span class="comment"># 查找在系统中最后5分钟里修改过的文件</span></div><div class="line"><span class="variable">$find</span>   / -mtime -<span class="number">1</span>        <span class="comment">#查找在系统中最后24小时里修改过的文件</span></div><div class="line"><span class="variable">$find</span>   / -nouser             <span class="comment">#查找在系统中属于作废用户的文件</span></div><div class="line"><span class="variable">$find</span>   / -user   fred       <span class="comment">#查找在系统中属于FRED这个用户的文件</span></div><div class="line"><span class="comment">#查当前目录下的所有普通文件</span></div><div class="line"><span class="variable">$find</span> . -type f -exec ls -l &#123;&#125; /; </div><div class="line">-rw-r--r--    <span class="number">1</span> root     root        <span class="number">34928</span> <span class="number">2003</span>-<span class="number">02</span>-<span class="number">25</span> ./conf/httpd.conf </div><div class="line">-rw-r--r--    <span class="number">1</span> root     root        <span class="number">12959</span> <span class="number">2003</span>-<span class="number">02</span>-<span class="number">25</span> ./conf/magic </div><div class="line">-rw-r--r--    <span class="number">1</span> root     root          <span class="number">180</span> <span class="number">2003</span>-<span class="number">02</span>-<span class="number">25</span> ./conf.d/README</div><div class="line"><span class="comment">#查当前目录下的所有普通文件，并在-exec选项中使用ls -l命令将它们列出</span></div><div class="line"><span class="comment">#在/logs目录中查找更改时间在5日以前的文件并删除它们：</span></div><div class="line"><span class="variable">$find</span> logs -type f -mtime +<span class="number">5</span> -exec -ok rm &#123;&#125; /;</div><div class="line"><span class="comment">#查询当天修改过的文件</span></div><div class="line"><span class="variable">$find</span> ./ -mtime -<span class="number">1</span> -type f -exec ls -l &#123;&#125; /;</div><div class="line"><span class="comment">#查询文件并询问是否要显示</span></div><div class="line"><span class="variable">$find</span> ./ -mtime -<span class="number">1</span> -type f -ok ls -l &#123;&#125; /; </div><div class="line">&lt; ls ... ./classDB.inc.PHP &gt; ? y</div><div class="line">-rw-r--r--    <span class="number">1</span> cnscn    cnscn       <span class="number">13709</span> <span class="number">1</span>月 <span class="number">12</span> <span class="number">12</span>:<span class="number">22</span> ./classDB.inc.php</div><div class="line"><span class="variable">$find</span> ./ -mtime -<span class="number">1</span> -type f -ok ls -l &#123;&#125; /; </div><div class="line">&lt; ls ... ./classDB.inc.php &gt; ? n</div><div class="line"><span class="comment">#查询并交给awk去处理</span></div><div class="line"><span class="variable">$who</span> | awk <span class="string">'&#123;print $1"/t"$2&#125;'</span></div><div class="line">cnscn   pts/<span class="number">0</span></div><div class="line"></div><div class="line"><span class="variable">$awk</span>---grep---sed</div><div class="line"><span class="variable">$df</span> -k | awk <span class="string">'&#123;print $1&#125;'</span> | grep -v <span class="string">'none'</span> | sed s<span class="string">"///dev////g"</span></div><div class="line">文件系统</div><div class="line">sda2</div><div class="line">sda1</div><div class="line"></div><div class="line"><span class="variable">$df</span> -k | awk <span class="string">'&#123;print $1&#125;'</span> | grep -v <span class="string">'none'</span></div><div class="line">文件系统</div><div class="line">/dev/sda2</div><div class="line">/dev/sda1</div><div class="line"><span class="comment">#在/tmp中查找所有的*.h，并在这些文件中查找“SYSCALL_VECTOR"，最后打印出所有包含"SYSCALL_VECTOR"的文件名</span></div><div class="line">A) find /tmp -name <span class="string">"*.h"</span> | xargs -n50 grep SYSCALL_VECTOR</div><div class="line">B) grep SYSCALL_VECTOR /tmp/*.h | cut   -d<span class="string">':'</span> -f1| uniq &gt; filename</div><div class="line">C) find /tmp -name <span class="string">"*.h"</span> -exec grep <span class="string">"SYSCALL_VECTOR"</span> &#123;&#125; /; -print</div><div class="line"><span class="comment">#查询并删除</span></div><div class="line">find / -name filename -exec rm -rf &#123;&#125; /;</div><div class="line">find / -name filename -ok rm -rf &#123;&#125; /;</div><div class="line"><span class="comment">#比如要查找磁盘中大于3M的文件：</span></div><div class="line">find . -size +<span class="number">3000</span>k -exec ls -ld &#123;&#125; ;</div><div class="line"><span class="comment">#将find出来的东西拷到另一个地方</span></div><div class="line">find *.c -exec cp <span class="string">'&#123;&#125;'</span> /tmp <span class="string">';'</span></div><div class="line"><span class="comment">#如果有特殊文件，可以用cpio，也可以用这样的语法：</span></div><div class="line">find dir -name filename -print | cpio -pdv newdir</div><div class="line"><span class="comment">#查找2004-11-30 16:36:37时更改过的文件</span></div><div class="line">$ A=`find ./ -name <span class="string">"*php"</span>` | ls -l --full-time <span class="variable">$A</span> <span class="number">2</span>&gt;/dev/null | grep <span class="string">"2004-11-30 16:36:37"</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;查找目录：&lt;code&gt;find /（查找范围） -name &amp;#39;查找关键字&amp;#39; -type d&lt;/code&gt;&lt;br&gt;查找文件：&lt;code&gt;find /（查找范围） -name 查找关键字 -print&lt;/code&gt;&lt;br&gt;如果需要更进一步的了解，可以参看Linux的命令详解。 这里摘抄如下：&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://www.javacn.top/categories/linux/"/>
    
    
      <category term="linux" scheme="http://www.javacn.top/tags/linux/"/>
    
      <category term="转载" scheme="http://www.javacn.top/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="find" scheme="http://www.javacn.top/tags/find/"/>
    
      <category term="查找" scheme="http://www.javacn.top/tags/%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7下firewalld使用指南</title>
    <link href="http://www.javacn.top/20170421/centos7_firewalld_guid/"/>
    <id>http://www.javacn.top/20170421/centos7_firewalld_guid/</id>
    <published>2017-04-21T03:14:10.000Z</published>
    <updated>2017-05-03T03:09:40.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、firewalld的基本使用"><a href="#1、firewalld的基本使用" class="headerlink" title="1、firewalld的基本使用"></a>1、firewalld的基本使用</h1><p>启动<code>systemctl start firewalld</code></p>
<p>查看状态： <code>systemctl status firewalld</code></p>
<p>停止： <code>systemctl disable firewalld</code></p>
<p>禁用： <code>systemctl stop firewalld</code></p>
<h1 id="2-systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。"><a href="#2-systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。" class="headerlink" title="2.systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。"></a>2.systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。</h1><a id="more"></a>
<p>启动一个服务：<code>systemctl start firewalld.service</code></p>
<p>关闭一个服务：<code>systemctl stop firewalld.service</code></p>
<p>重启一个服务：<code>systemctl restart firewalld.service</code></p>
<p>显示一个服务的状态：<code>systemctl status firewalld.service</code></p>
<p>在开机时启用一个服务：<code>systemctl enable firewalld.service</code></p>
<p>在开机时禁用一个服务：<code>systemctl disable firewalld.service</code></p>
<p>查看服务是否开机启动：<code>systemctl is-enabled firewalld.service</code></p>
<p>查看已启动的服务列表：<code>systemctl list-unit-files|grep enabled</code></p>
<p>查看启动失败的服务列表：<code>systemctl --failed</code></p>
<h1 id="3-配置firewalld-cmd"><a href="#3-配置firewalld-cmd" class="headerlink" title="3.配置firewalld-cmd"></a>3.配置firewalld-cmd</h1><p>查看版本： <code>firewall-cmd --version</code></p>
<p>查看帮助： <code>firewall-cmd --help</code></p>
<p>显示状态： <code>firewall-cmd --state</code></p>
<p>查看所有打开的端口： <code>firewall-cmd --zone=public --list-ports</code></p>
<p>更新防火墙规则： <code>firewall-cmd --reload</code></p>
<p>查看区域信息:  <code>firewall-cmd --get-active-zones</code></p>
<p>查看指定接口所属区域： <code>firewall-cmd --get-zone-of-interface=eth0</code></p>
<p>拒绝所有包：<code>firewall-cmd --panic-on</code></p>
<p>取消拒绝状态： <code>firewall-cmd --panic-off</code></p>
<p>查看是否拒绝： <code>firewall-cmd --query-panic</code></p>
<p>那怎么开启一个端口呢<br>添加:<code>firewall-cmd --zone=public --add-port=80/tcp --permanent</code><br>（–permanent永久生效，没有此参数重启后失效）</p>
<p>重新载入: <code>firewall-cmd --reload</code></p>
<p>查看:<code>firewall-cmd --zone= public --query-port=80/tcp</code></p>
<p>删除:<code>firewall-cmd --zone= public --remove-port=80/tcp --permanent</code></p>
<p>批量操作：<code>firewall-cmd --permanent --add-port={8500/tcp,8300/tcp,8301/tcp,3375/tcp,2375/tcp}</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1、firewalld的基本使用&quot;&gt;&lt;a href=&quot;#1、firewalld的基本使用&quot; class=&quot;headerlink&quot; title=&quot;1、firewalld的基本使用&quot;&gt;&lt;/a&gt;1、firewalld的基本使用&lt;/h1&gt;&lt;p&gt;启动&lt;code&gt;systemctl start firewalld&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看状态： &lt;code&gt;systemctl status firewalld&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;停止： &lt;code&gt;systemctl disable firewalld&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;禁用： &lt;code&gt;systemctl stop firewalld&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。&quot;&gt;&lt;a href=&quot;#2-systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。&quot; class=&quot;headerlink&quot; title=&quot;2.systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。&quot;&gt;&lt;/a&gt;2.systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。&lt;/h1&gt;
    
    </summary>
    
      <category term="linux" scheme="http://www.javacn.top/categories/linux/"/>
    
    
      <category term="centos" scheme="http://www.javacn.top/tags/centos/"/>
    
      <category term="firewalld" scheme="http://www.javacn.top/tags/firewalld/"/>
    
      <category term="linux" scheme="http://www.javacn.top/tags/linux/"/>
    
      <category term="转载" scheme="http://www.javacn.top/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile命令介绍及实例</title>
    <link href="http://www.javacn.top/20170420/into_dockerfile_example/"/>
    <id>http://www.javacn.top/20170420/into_dockerfile_example/</id>
    <published>2017-04-20T06:34:18.000Z</published>
    <updated>2017-05-03T03:06:46.584Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Dockerfile命令介绍及实例"><a href="#Dockerfile命令介绍及实例" class="headerlink" title="Dockerfile命令介绍及实例"></a>Dockerfile命令介绍及实例</h1><p>基础镜像可以用于创建Docker容器。镜像可以非常基础，仅仅包含操作系统；也可以非常丰富，包含灵巧的应用栈，随时可以发布。当你在使用Docker构建镜像的时候，每一个命令都会在前一个命令的基础上形成一个新层。这些基础镜像可以用于创建新的容器。本篇文章将手把手教您如何从基础镜像，一步一步，一层一层的从Dockerfile构建容器的过程。</p>
<a id="more"></a>
<h2 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h2><p>Docker项目提供了构建在Linux内核功能之上，协同在一起的的高级工具。其目标是帮助开发和运维人员更容易地跨系统跨主机交付应用程序和他们的依赖。Docker通过Docker容器，一个安全的，基于轻量级容器的环境，来实现这个目标。这些容器由镜像创建，而镜像可以通过命令行手工创建或 者通过Dockerfile自动创建。</p>
<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>Dockerfile是由一系列命令和参数构成的脚本，这些命令应用于基础镜像并最终创建一个新的镜像。它们简化了从头到尾的流程并极大的简化了部署工作。Dockerfile从FROM命令开始，紧接着跟随者各种方法，命令和参数。其产出为一个新的可以用于创建容器的镜像。</p>
<h1 id="Dockerfile-语法"><a href="#Dockerfile-语法" class="headerlink" title="Dockerfile 语法"></a>Dockerfile 语法</h1><p>在我们深入讨论Dockerfile之前，让我们快速过一下Dockerfile的语法和它们的意义。</p>
<h2 id="什么是语法？"><a href="#什么是语法？" class="headerlink" title="什么是语法？"></a>什么是语法？</h2><p>非常简单，在编程中，语法意味着一个调用命令，输入参数去让应用执行程序的文法结构。这些语法被规则或明或暗的约束。程序员遵循语法规范以和计算机 交互。如果一段程序语法不正确，计算机将无法识别。Dockerfile使用简单的，清楚的和干净的语法结构，极为易于使用。这些语法可以自我释义，支持注释。</p>
<h2 id="Dockerfile-语法示例"><a href="#Dockerfile-语法示例" class="headerlink" title="Dockerfile 语法示例"></a>Dockerfile 语法示例</h2><p>Dockerfile语法由两部分构成，注释和命令+参数</p>
<h2 id="Dockerfile-命令"><a href="#Dockerfile-命令" class="headerlink" title="Dockerfile 命令"></a>Dockerfile 命令</h2><p>Dockerfile有十几条命令可用于构建镜像，下文将简略介绍这些命令。</p>
<h3 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h3><p>ADD命令有两个参数，源和目标。它的基本作用是从源系统的文件系统上复制文件到目标容器的文件系统。如果源是一个URL，那该URL的内容将被下载并复制到容器中。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Usage: ADD [source directory or URL] [destination directory]</span></div><div class="line"><span class="string">ADD</span> <span class="string">/my_app_folder</span> <span class="string">/my_app_folder</span></div></pre></td></tr></table></figure></p>
<h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p>和RUN命令相似，CMD可以用于执行特定的命令。和RUN不同的是，这些命令不是在镜像构建的过程中执行的，而是在用镜像构建容器后被调用。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Usage 1: CMD application "argument", "argument", ..</span></div><div class="line"><span class="string">CMD</span> <span class="string">"echo"</span> <span class="string">"Hello docker!"</span></div></pre></td></tr></table></figure></p>
<h3 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h3><p>ENTRYPOINT 帮助你配置一个容器使之可执行化，如果你结合CMD命令和ENTRYPOINT命令，你可以从CMD命令中移除“application”而仅仅保留参数，参数将传递给ENTRYPOINT命令。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Usage: ENTRYPOINT application "argument", "argument", ..</span></div><div class="line"><span class="comment"># Remember: arguments are optional. They can be provided by CMD</span></div><div class="line"><span class="comment"># or during the creation of a container.</span></div><div class="line"><span class="string">ENTRYPOINT</span> <span class="string">echo</span></div><div class="line"><span class="comment"># Usage example with CMD:</span></div><div class="line"><span class="comment"># Arguments set with CMD can be overridden during *run*</span></div><div class="line"><span class="string">CMD</span> <span class="string">"Hello docker!"</span></div><div class="line"><span class="string">ENTRYPOINT</span> <span class="string">echo</span></div></pre></td></tr></table></figure></p>
<h3 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h3><p>ENV命令用于设置环境变量。这些变量以”key=value”的形式存在，并可以在容器内被脚本或者程序调用。这个机制给在容器中运行应用带来了极大的便利。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Usage: ENV key value</span></div><div class="line"><span class="string">ENV</span> <span class="string">SERVER_WORKS</span> <span class="number">4</span></div></pre></td></tr></table></figure></p>
<h3 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h3><p>EXPOSE用来指定端口，使容器内的应用可以通过端口和外界交互。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Usage: EXPOSE [port]</span></div><div class="line"><span class="string">EXPOSE</span> <span class="number">8080</span></div></pre></td></tr></table></figure></p>
<h3 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h3><p>FROM命令可能是最重要的Dockerfile命令。改命令定义了使用哪个基础镜像启动构建流程。基础镜像可以为任意镜 像。如果基础镜像没有被发现，Docker将试图从Docker image index来查找该镜像。FROM命令必须是Dockerfile的首个命令。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Usage: FROM [image name]</span></div><div class="line"><span class="string">FROM</span> <span class="string">ubuntu</span></div></pre></td></tr></table></figure></p>
<h3 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h3><p>我建议这个命令放在Dockerfile的起始部分，虽然理论上它可以放置于Dockerfile的任意位置。这个命令用于声明作者，并应该放在FROM的后面。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Usage: MAINTAINER [name]</span></div><div class="line"><span class="string">MAINTAINER</span> <span class="string">authors_name</span></div></pre></td></tr></table></figure></p>
<h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><p>RUN命令是Dockerfile执行命令的核心部分。它接受命令作为参数并用于创建镜像。不像CMD命令，RUN命令用于创建镜像（在之前commit的层之上形成新的层）。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Usage: RUN [command]</span></div><div class="line"><span class="string">RUN</span> <span class="string">aptitude</span> <span class="string">install</span> <span class="bullet">-y</span> <span class="string">riak</span></div></pre></td></tr></table></figure></p>
<h3 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h3><p>USER命令用于设置运行容器的UID。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Usage: USER [UID]</span></div><div class="line"><span class="string">USER</span> <span class="number">751</span></div></pre></td></tr></table></figure></p>
<h3 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h3><p>VOLUME命令用于让你的容器访问宿主机上的目录。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Usage: VOLUME ["/dir_1", "/dir_2" ..]</span></div><div class="line"><span class="string">VOLUME</span> <span class="string">["/my_files"]</span></div></pre></td></tr></table></figure></p>
<h3 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h3><p>WORKDIR命令用于设置CMD指明的命令的运行目录。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Usage: WORKDIR /path</span></div><div class="line"><span class="string">WORKDIR</span> <span class="string">~/</span></div></pre></td></tr></table></figure></p>
<h1 id="如何使用Dockerfiles"><a href="#如何使用Dockerfiles" class="headerlink" title="如何使用Dockerfiles"></a>如何使用Dockerfiles</h1><p>使用Dockerfiles和手工使用Docker Daemon运行命令一样简单。脚本运行后输出为新的镜像ID。<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Build an image using the Dockerfile at current location</span></div><div class="line"><span class="comment"># Example: sudo docker build -t [name] .</span></div><div class="line"><span class="variable">$sudo</span> docker build -t my_mongodb .</div></pre></td></tr></table></figure></p>
<h2 id="Dockerfile-示例一：创建一个最小的带glibc的linux镜像"><a href="#Dockerfile-示例一：创建一个最小的带glibc的linux镜像" class="headerlink" title="Dockerfile 示例一：创建一个最小的带glibc的linux镜像"></a>Dockerfile 示例一：创建一个最小的带glibc的linux镜像</h2><p>在这部分中，我们讲一步一步创建一个Dockfile，这个Dockerfile可用于构建一个最小的linux容器。</p>
<h3 id="创建一个Dockerfile"><a href="#创建一个Dockerfile" class="headerlink" title="创建一个Dockerfile"></a>创建一个Dockerfile</h3><p>使用nano文本编辑器，让我们创建Dockerfile。<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> vi Dockerfile</div></pre></td></tr></table></figure></p>
<h3 id="定义文件和它的目的"><a href="#定义文件和它的目的" class="headerlink" title="定义文件和它的目的"></a>定义文件和它的目的</h3><p>让阅读者明确Dockerfile的目的永远是必要的。为此，我们通常从注释开始写Dockerfile。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">############################################################</span></div><div class="line"><span class="comment"># Dockerfile to build a min linux based on alpine and glibc</span></div><div class="line"><span class="comment"># Based on alpine</span></div><div class="line"><span class="comment">############################################################</span></div><div class="line"><span class="comment">#设置基础镜像 </span></div><div class="line"><span class="comment"># Set the base image to alpine</span></div><div class="line"><span class="string">FROM</span> <span class="attr">alpine:3.5</span></div><div class="line"><span class="comment">#定义作者</span></div><div class="line"><span class="comment"># File Author</span></div><div class="line"><span class="string">MAINTAINER</span> <span class="string">zhaoshg</span></div><div class="line"></div><div class="line"><span class="comment"># Here we install GNU libc (aka glibc) and set C.UTF-8 locale as default.</span></div><div class="line"><span class="string">RUN</span> <span class="string">ALPINE_GLIBC_BASE_URL="https://github.com/sgerrand/alpine-pkg-glibc/releases/download"</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></div><div class="line">    <span class="string">ALPINE_GLIBC_PACKAGE_VERSION="2.25-r0"</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></div><div class="line">    <span class="string">ALPINE_GLIBC_BASE_PACKAGE_FILENAME="glibc-$ALPINE_GLIBC_PACKAGE_VERSION.apk"</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></div><div class="line">    <span class="string">ALPINE_GLIBC_BIN_PACKAGE_FILENAME="glibc-bin-$ALPINE_GLIBC_PACKAGE_VERSION.apk"</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></div><div class="line">    <span class="string">ALPINE_GLIBC_I18N_PACKAGE_FILENAME="glibc-i18n-$ALPINE_GLIBC_PACKAGE_VERSION.apk"</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></div><div class="line">    <span class="string">apk</span> <span class="string">add</span> <span class="bullet">--no-cache</span> <span class="bullet">--virtual=.build-dependencies</span> <span class="string">wget</span> <span class="string">ca-certificates</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></div><div class="line">    <span class="string">wget</span> <span class="string">\</span></div><div class="line">        <span class="string">"https://raw.githubusercontent.com/andyshinn/alpine-pkg-glibc/master/sgerrand.rsa.pub"</span> <span class="string">\</span></div><div class="line"><span class="bullet">        -</span><span class="string">O</span> <span class="string">"/etc/apk/keys/sgerrand.rsa.pub"</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></div><div class="line">    <span class="string">wget</span> <span class="string">\</span></div><div class="line">        <span class="string">"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BASE_PACKAGE_FILENAME"</span> <span class="string">\</span></div><div class="line">        <span class="string">"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_BIN_PACKAGE_FILENAME"</span> <span class="string">\</span></div><div class="line">        <span class="string">"$ALPINE_GLIBC_BASE_URL/$ALPINE_GLIBC_PACKAGE_VERSION/$ALPINE_GLIBC_I18N_PACKAGE_FILENAME"</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></div><div class="line">    <span class="string">apk</span> <span class="string">add</span> <span class="bullet">--no-cache</span> <span class="string">\</span></div><div class="line">        <span class="string">"$ALPINE_GLIBC_BASE_PACKAGE_FILENAME"</span> <span class="string">\</span></div><div class="line">        <span class="string">"$ALPINE_GLIBC_BIN_PACKAGE_FILENAME"</span> <span class="string">\</span></div><div class="line">        <span class="string">"$ALPINE_GLIBC_I18N_PACKAGE_FILENAME"</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></div><div class="line">    <span class="string">\</span></div><div class="line">    <span class="string">rm</span> <span class="string">"/etc/apk/keys/sgerrand.rsa.pub"</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></div><div class="line">    <span class="string">/usr/glibc-compat/bin/localedef</span> <span class="bullet">--force</span> <span class="bullet">--inputfile</span> <span class="string">POSIX</span> <span class="bullet">--charmap</span> <span class="string">UTF-8</span> <span class="string">C.UTF-8</span> <span class="string">||</span> <span class="literal">true</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></div><div class="line">    <span class="string">echo</span> <span class="string">"export LANG=C.UTF-8"</span> <span class="string">&gt; /etc/profile.d/locale.sh &amp;&amp; \</span></div><div class="line">    \</div><div class="line">    apk del glibc-i18n &amp;&amp; \</div><div class="line">    \</div><div class="line">    rm "/root/.wget-hsts" &amp;&amp; \</div><div class="line">    apk del .build-dependencies &amp;&amp; \</div><div class="line">    rm \</div><div class="line">        "$ALPINE_GLIBC_BASE_PACKAGE_FILENAME" \</div><div class="line">        "$ALPINE_GLIBC_BIN_PACKAGE_FILENAME" \</div><div class="line">        "$ALPINE_GLIBC_I18N_PACKAGE_FILENAME"</div><div class="line">ENV LANG=C.UTF-8</div></pre></td></tr></table></figure></p>
<p>保存Dockerfile。</p>
<h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>使用上述的Dockerfile，我们已经可以开始构建镜像<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> docker build -t my_alpine .</div></pre></td></tr></table></figure></p>
<h2 id="Dockerfile-示例二：创建一个最小化的JDK镜像"><a href="#Dockerfile-示例二：创建一个最小化的JDK镜像" class="headerlink" title="Dockerfile 示例二：创建一个最小化的JDK镜像"></a>Dockerfile 示例二：创建一个最小化的JDK镜像</h2><h3 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h3><p>目前JDK官方并不提供docker镜像，只有OpenJDK镜像提供，但是遇到必须使用JDK的情况时，我们就只能自己构建了。<br>和上个例子不同，我们使用上个例子中构建好的镜像，运用FROM命令和MAINTAINER命令<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">############################################################</span></div><div class="line"><span class="comment"># Dockerfile to build min JDK</span></div><div class="line"><span class="comment"># Based on my_alpine</span></div><div class="line"><span class="comment">############################################################</span></div><div class="line"><span class="comment"># Set the base image to Ubuntu</span></div><div class="line"><span class="string">FROM</span> <span class="string">my_alpine</span></div><div class="line"><span class="comment"># File Author </span></div><div class="line"><span class="string">MAINTAINER</span> <span class="string">zhaoshg@qq.com</span></div><div class="line"><span class="string">ENV</span> <span class="string">JAVA_VERSION=8</span> <span class="string">\</span></div><div class="line">    <span class="string">JAVA_UPDATE=121</span> <span class="string">\</span></div><div class="line">    <span class="string">JAVA_BUILD=13</span> <span class="string">\</span></div><div class="line">    <span class="string">JAVA_PATH=e9e7ea248e2c4826b92b3f075a80e441</span> <span class="string">\</span></div><div class="line">    <span class="string">JAVA_HOME="/usr/lib/jvm/default-jvm"</span></div><div class="line"><span class="comment">#安装一些工具并下载JDK进行安装</span></div><div class="line"><span class="comment">#在安装完毕后删除一些不必要的文件进行精简</span></div><div class="line"><span class="comment">#删除之前安装的工具</span></div><div class="line"><span class="string">RUN</span> <span class="string">apk</span> <span class="string">add</span> <span class="bullet">--no-cache</span> <span class="bullet">--virtual=build-dependencies</span> <span class="string">wget</span> <span class="string">ca-certificates</span> <span class="string">unzip</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></div><div class="line">    <span class="string">cd</span> <span class="string">"/tmp"</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></div><div class="line">    <span class="string">wget</span> <span class="bullet">--header</span> <span class="string">"Cookie: oraclelicense=accept-securebackup-cookie;"</span> <span class="string">\</span></div><div class="line">        <span class="string">"http://download.oracle.com/otn-pub/java/jdk/$&#123;JAVA_VERSION&#125;u$&#123;JAVA_UPDATE&#125;-b$&#123;JAVA_BUILD&#125;/$&#123;JAVA_PATH&#125;/jdk-$&#123;JAVA_VERSION&#125;u$&#123;JAVA_UPDATE&#125;-linux-x64.tar.gz"</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></div><div class="line">    <span class="string">tar</span> <span class="bullet">-xzf</span> <span class="string">"jdk-$&#123;JAVA_VERSION&#125;u$&#123;JAVA_UPDATE&#125;-linux-x64.tar.gz"</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></div><div class="line">    <span class="string">mkdir</span> <span class="bullet">-p</span> <span class="string">"/usr/lib/jvm"</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></div><div class="line">    <span class="string">mv</span> <span class="string">"/tmp/jdk1.$&#123;JAVA_VERSION&#125;.0_$&#123;JAVA_UPDATE&#125;"</span> <span class="string">"/usr/lib/jvm/java-$&#123;JAVA_VERSION&#125;-oracle"</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></div><div class="line">    <span class="string">ln</span> <span class="bullet">-s</span> <span class="string">"java-$&#123;JAVA_VERSION&#125;-oracle"</span> <span class="string">"$JAVA_HOME"</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></div><div class="line">    <span class="string">ln</span> <span class="bullet">-s</span> <span class="string">"$JAVA_HOME/bin/"</span><span class="string">*</span> <span class="string">"/usr/bin/"</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></div><div class="line">    <span class="string">rm</span> <span class="bullet">-rf</span> <span class="string">"$JAVA_HOME/"</span><span class="string">*src.zip</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></div><div class="line">    <span class="string">rm</span> <span class="bullet">-rf</span> <span class="string">"$JAVA_HOME/lib/missioncontrol"</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/lib/visualvm"</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/lib/"</span><span class="string">*javafx*</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/jre/lib/plugin.jar"</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/jre/lib/ext/jfxrt.jar"</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/jre/bin/javaws"</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/jre/lib/javaws.jar"</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/jre/lib/desktop"</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/jre/plugin"</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/jre/lib/"</span><span class="string">deploy*</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/jre/lib/"</span><span class="string">*javafx*</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/jre/lib/"</span><span class="string">*jfx*</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/jre/lib/amd64/libdecora_sse.so"</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/jre/lib/amd64/"</span><span class="string">libprism_*.so</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/jre/lib/amd64/libfxplugins.so"</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/jre/lib/amd64/libglass.so"</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/jre/lib/amd64/libgstreamer-lite.so"</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/jre/lib/amd64/"</span><span class="string">libjavafx*.so</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/jre/lib/amd64/"</span><span class="string">libjfx*.so</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></div><div class="line">    <span class="string">rm</span> <span class="bullet">-rf</span> <span class="string">"$JAVA_HOME/jre/bin/jjs"</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/jre/bin/keytool"</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/jre/bin/orbd"</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/jre/bin/pack200"</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/jre/bin/policytool"</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/jre/bin/rmid"</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/jre/bin/rmiregistry"</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/jre/bin/servertool"</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/jre/bin/tnameserv"</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/jre/bin/unpack200"</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/jre/lib/ext/nashorn.jar"</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/jre/lib/jfr.jar"</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/jre/lib/jfr"</span> <span class="string">\</span></div><div class="line">           <span class="string">"$JAVA_HOME/jre/lib/oblique-fonts"</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></div><div class="line">    <span class="string">wget</span> <span class="bullet">--header</span> <span class="string">"Cookie: oraclelicense=accept-securebackup-cookie;"</span> <span class="string">\</span></div><div class="line">        <span class="string">"http://download.oracle.com/otn-pub/java/jce/$&#123;JAVA_VERSION&#125;/jce_policy-$&#123;JAVA_VERSION&#125;.zip"</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></div><div class="line">    <span class="string">unzip</span> <span class="bullet">-jo</span> <span class="bullet">-d</span> <span class="string">"$&#123;JAVA_HOME&#125;/jre/lib/security"</span> <span class="string">"jce_policy-$&#123;JAVA_VERSION&#125;.zip"</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></div><div class="line">    <span class="string">rm</span> <span class="string">"$&#123;JAVA_HOME&#125;/jre/lib/security/README.txt"</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></div><div class="line">    <span class="string">apk</span> <span class="string">del</span> <span class="string">build-dependencies</span> <span class="string">&amp;&amp;</span> <span class="string">\</span></div><div class="line">    <span class="string">rm</span> <span class="string">"/tmp/"</span><span class="string">*</span></div></pre></td></tr></table></figure></p>
<p>保存 dockfile。</p>
<p>使用Dockerfile构建JDK镜像</p>
<h2 id="Dockerfile-示例三：创建一个最小的带JDK的tomcat镜像"><a href="#Dockerfile-示例三：创建一个最小的带JDK的tomcat镜像" class="headerlink" title="Dockerfile 示例三：创建一个最小的带JDK的tomcat镜像"></a>Dockerfile 示例三：创建一个最小的带JDK的tomcat镜像</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#使用之前的JDK镜像</span></div><div class="line"><span class="string">FROM</span> <span class="string">FROM</span> <span class="string">registry.cn-hangzhou.aliyuncs.com/zhaoshg1984/jdk:min</span></div><div class="line"></div><div class="line"><span class="comment"># File Author / Maintainer</span></div><div class="line"><span class="string">MAINTAINER</span> <span class="string">zhaoshg@qq.com</span></div><div class="line"></div><div class="line"><span class="comment">#set envs</span></div><div class="line"><span class="string">ENV</span> <span class="string">JAVA_HOME="/usr/lib/jvm/default-jvm"</span></div><div class="line"><span class="string">ENV</span> <span class="string">CATALINA_HOME</span> <span class="string">/usr/local/tomcat</span></div><div class="line"><span class="string">ENV</span> <span class="string">PATH</span> <span class="string">$CATALINA_HOME/bin:$PATH</span></div><div class="line"><span class="string">RUN</span> <span class="string">mkdir</span> <span class="bullet">-p</span> <span class="string">"$CATALINA_HOME"</span></div><div class="line"><span class="string">WORKDIR</span> <span class="string">$CATALINA_HOME</span></div><div class="line"><span class="string">ENV</span> <span class="string">TOMCAT_NATIVE_LIBDIR</span> <span class="string">$CATALINA_HOME/native-jni-lib</span></div><div class="line"><span class="string">ENV</span> <span class="string">LD_LIBRARY_PATH</span> <span class="string">$&#123;LD_LIBRARY_PATH:+$LD_LIBRARY_PATH:&#125;$TOMCAT_NATIVE_LIBDIR</span></div><div class="line"></div><div class="line"><span class="string">RUN</span> <span class="string">apk</span> <span class="string">add</span> <span class="bullet">--no-cache</span> <span class="string">gnupg</span> <span class="string">curl</span></div><div class="line"></div><div class="line"><span class="string">ENV</span> <span class="string">GPG_KEYS</span> <span class="number">05</span><span class="string">AB33110949707C93A279E3D3EFE6B686867BA6</span> <span class="number">07E48665</span><span class="string">A34DCAFAE522E5E6266191C37C037D42</span> <span class="number">47309207</span><span class="string">D818FFD8DCD3F83F1931D684307A10A5</span> <span class="number">541</span><span class="string">FBE7D8F78B25E055DDEE13C370389288584E7</span> <span class="number">61</span><span class="string">B832AC2F1C5A90F0F9B00A1C506407564C17A3</span> <span class="number">713</span><span class="string">DA88BE50911535FE716F5208B0AB1D63011C7</span> <span class="number">79</span><span class="string">F7026C690BAA50B92CD8B66A3AD3F4F22C4FED</span> <span class="number">9</span><span class="string">BA44C2621385CB966EBA586F72C284D731FABEE</span> <span class="string">A27677289986DB50844682F8ACB77FC2E86E29AC</span> <span class="string">A9C5DF4D22E99998D9875A5110C01C5A2F6059E7</span> <span class="string">DCFD35E0BF8CA7344752DE8B6FB21E8933C60243</span> <span class="string">F3A04C595DB5B6A5F1ECA43E3B7BBB100D811BBE</span> <span class="string">F7DA48BB64BCB84ECBA7EE6935CD23C10D498E23</span></div><div class="line"><span class="string">RUN</span> <span class="string">set</span> <span class="bullet">-ex;</span> <span class="string">\</span></div><div class="line">    <span class="string">for</span> <span class="string">key</span> <span class="string">in</span> <span class="string">$GPG_KEYS;</span> <span class="string">do</span> <span class="string">\</span></div><div class="line">        <span class="string">gpg</span> <span class="bullet">--keyserver</span> <span class="string">keyserver.ubuntu.com</span> <span class="bullet">--recv-keys</span> <span class="string">"$key"</span><span class="string">;</span> <span class="string">\</span></div><div class="line">    <span class="string">done</span></div><div class="line"></div><div class="line"><span class="string">ENV</span> <span class="string">TOMCAT_MAJOR</span> <span class="number">8</span></div><div class="line"><span class="string">ENV</span> <span class="string">TOMCAT_VERSION</span> <span class="number">8.0</span><span class="number">.43</span></div><div class="line"></div><div class="line"><span class="comment"># https://issues.apache.org/jira/browse/INFRA-8753?focusedCommentId=14735394#comment-14735394</span></div><div class="line"><span class="string">ENV</span> <span class="string">TOMCAT_TGZ_URL</span> <span class="attr">https://www.apache.org/dyn/closer.cgi?action=download&amp;filename=tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz</span></div><div class="line"><span class="comment"># not all the mirrors actually carry the .asc files :'(</span></div><div class="line"><span class="string">ENV</span> <span class="string">TOMCAT_ASC_URL</span> <span class="attr">https://www.apache.org/dist/tomcat/tomcat-$TOMCAT_MAJOR/v$TOMCAT_VERSION/bin/apache-tomcat-$TOMCAT_VERSION.tar.gz.asc</span></div><div class="line"></div><div class="line"><span class="string">RUN</span> <span class="string">set</span> <span class="bullet">-x</span> <span class="string">\</span></div><div class="line">    <span class="string">\</span></div><div class="line">    <span class="string">&amp;&amp;</span> <span class="string">apk</span> <span class="string">add</span> <span class="bullet">--no-cache</span> <span class="bullet">--virtual</span> <span class="string">.fetch-deps</span> <span class="string">\</span></div><div class="line">        <span class="string">ca-certificates</span> <span class="string">\</span></div><div class="line">        <span class="string">tar</span> <span class="string">\</span></div><div class="line">        <span class="string">wget</span> <span class="string">\</span></div><div class="line">        <span class="string">openssl</span> <span class="string">\</span></div><div class="line">    <span class="string">&amp;&amp;</span> <span class="string">wget</span> <span class="bullet">-O</span> <span class="string">tomcat.tar.gz</span> <span class="string">"$TOMCAT_TGZ_URL"</span> <span class="string">\</span></div><div class="line">    <span class="string">&amp;&amp;</span> <span class="string">wget</span> <span class="bullet">-O</span> <span class="string">tomcat.tar.gz.asc</span> <span class="string">"$TOMCAT_ASC_URL"</span> <span class="string">\</span></div><div class="line">    <span class="string">&amp;&amp;</span> <span class="string">gpg</span> <span class="bullet">--batch</span> <span class="bullet">--verify</span> <span class="string">tomcat.tar.gz.asc</span> <span class="string">tomcat.tar.gz</span> <span class="string">\</span></div><div class="line">    <span class="string">&amp;&amp;</span> <span class="string">tar</span> <span class="bullet">-xvf</span> <span class="string">tomcat.tar.gz</span> <span class="bullet">--strip-components=1</span> <span class="string">\</span></div><div class="line">    <span class="string">&amp;&amp;</span> <span class="string">rm</span> <span class="string">bin/*.bat</span> <span class="string">\</span></div><div class="line">    <span class="string">&amp;&amp;</span> <span class="string">rm</span> <span class="string">tomcat.tar.gz*</span> <span class="string">\</span></div><div class="line">    <span class="string">\</span></div><div class="line">    <span class="string">&amp;&amp;</span> <span class="string">nativeBuildDir="$(mktemp</span> <span class="bullet">-d)"</span> <span class="string">\</span></div><div class="line">    <span class="string">&amp;&amp;</span> <span class="string">tar</span> <span class="bullet">-xvf</span> <span class="string">bin/tomcat-native.tar.gz</span> <span class="bullet">-C</span> <span class="string">"$nativeBuildDir"</span> <span class="bullet">--strip-components=1</span> <span class="string">\</span></div><div class="line">    <span class="string">&amp;&amp;</span> <span class="string">apk</span> <span class="string">add</span> <span class="bullet">--no-cache</span> <span class="bullet">--virtual</span> <span class="string">.native-build-deps</span> <span class="string">\</span></div><div class="line">        <span class="string">apr-dev</span> <span class="string">\</span></div><div class="line">        <span class="string">gcc</span> <span class="string">\</span></div><div class="line">        <span class="string">libc-dev</span> <span class="string">\</span></div><div class="line">        <span class="string">make</span> <span class="string">\</span></div><div class="line"><span class="comment">#       "openjdk$&#123;JAVA_VERSION%%[-~bu]*&#125;"="$JAVA_ALPINE_VERSION" \</span></div><div class="line">        <span class="string">openssl-dev</span> <span class="string">\</span></div><div class="line">    <span class="string">&amp;&amp;</span> <span class="string">(</span> <span class="string">\</span></div><div class="line">        <span class="string">export</span> <span class="string">CATALINA_HOME="$PWD"</span> <span class="string">\</span></div><div class="line">        <span class="string">&amp;&amp;</span> <span class="string">cd</span> <span class="string">"$nativeBuildDir/native"</span> <span class="string">\</span></div><div class="line">        <span class="string">&amp;&amp;</span> <span class="string">./configure</span> <span class="string">\</span></div><div class="line"><span class="bullet">            -</span><span class="bullet">-libdir="$TOMCAT_NATIVE_LIBDIR"</span> <span class="string">\</span></div><div class="line"><span class="bullet">            -</span><span class="bullet">-prefix="$CATALINA_HOME"</span> <span class="string">\</span></div><div class="line"><span class="bullet">            -</span><span class="bullet">-with-apr="$(which</span> <span class="string">apr-1-config)"</span> <span class="string">\</span></div><div class="line"><span class="bullet">            -</span><span class="bullet">-with-java-home="$JAVA_HOME"</span> <span class="string">\</span></div><div class="line"><span class="bullet">            -</span><span class="bullet">-with-ssl=yes</span> <span class="string">\</span></div><div class="line">        <span class="string">&amp;&amp;</span> <span class="string">make</span> <span class="bullet">-j$(getconf</span> <span class="string">_NPROCESSORS_ONLN)</span> <span class="string">\</span></div><div class="line">        <span class="string">&amp;&amp;</span> <span class="string">make</span> <span class="string">install</span> <span class="string">\</span></div><div class="line">    <span class="string">)</span> <span class="string">\</span></div><div class="line">    <span class="string">&amp;&amp;</span> <span class="string">runDeps="$(</span> <span class="string">\</span></div><div class="line">        <span class="string">scanelf</span> <span class="bullet">--needed</span> <span class="bullet">--nobanner</span> <span class="bullet">--recursive</span> <span class="string">"$TOMCAT_NATIVE_LIBDIR"</span> <span class="string">\</span></div><div class="line">            <span class="string">| awk '&#123; gsub(/,/, "\nso:", $2); print "so:" $2 &#125;' \</span></div><div class="line">            | sort -u \</div><div class="line">            | xargs -r apk info --installed \</div><div class="line">            | sort -u \</div><div class="line">    )" \</div><div class="line">    &amp;&amp; apk add --virtual .tomcat-native-rundeps $runDeps \</div><div class="line">    &amp;&amp; apk del .fetch-deps .native-build-deps \</div><div class="line">    &amp;&amp; rm -rf "$nativeBuildDir" \</div><div class="line">    &amp;&amp; rm bin/tomcat-native.tar.gz</div><div class="line"></div><div class="line"># verify Tomcat Native is working properly</div><div class="line"></div><div class="line"></div><div class="line">RUN sed '447 a        tail -f /dev/null' -i bin/catalina.sh \</div><div class="line">    &amp;&amp; set -e \</div><div class="line">    &amp;&amp; nativeLines="$(catalina.sh configtest 2&gt;&amp;1)" \</div><div class="line">    &amp;&amp; nativeLines="$(echo "$nativeLines" | grep 'Apache Tomcat Native')" \</div><div class="line">    &amp;&amp; nativeLines="$(echo "$nativeLines" | sort -u)" \</div><div class="line">    &amp;&amp; if ! echo "$nativeLines" | grep 'INFO: Loaded APR based Apache Tomcat Native library' &gt;&amp;2; then \</div><div class="line">        echo &gt;&amp;2 "$nativeLines"; \</div><div class="line">        exit 1; \</div><div class="line">    fi</div><div class="line"></div><div class="line">EXPOSE 8080</div><div class="line">CMD ["catalina.sh", "start"]#</div></pre></td></tr></table></figure>
<p>这种在构建过程中需要下载的情况，最好是托管到阿里云或者网易云，用他们的海外服务器来进行构建，否则会有些内容无法下载，例如上面的keyserver.ubuntu.com</p>
<p>具体的可以去我在<a href="https://dev.aliyun.com/list.html?namePrefix=zhaoshg1984" target="_blank" rel="external">阿里云上的镜像仓库</a>看看</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Dockerfile命令介绍及实例&quot;&gt;&lt;a href=&quot;#Dockerfile命令介绍及实例&quot; class=&quot;headerlink&quot; title=&quot;Dockerfile命令介绍及实例&quot;&gt;&lt;/a&gt;Dockerfile命令介绍及实例&lt;/h1&gt;&lt;p&gt;基础镜像可以用于创建Docker容器。镜像可以非常基础，仅仅包含操作系统；也可以非常丰富，包含灵巧的应用栈，随时可以发布。当你在使用Docker构建镜像的时候，每一个命令都会在前一个命令的基础上形成一个新层。这些基础镜像可以用于创建新的容器。本篇文章将手把手教您如何从基础镜像，一步一步，一层一层的从Dockerfile构建容器的过程。&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="http://www.javacn.top/categories/docker/"/>
    
    
      <category term="docker" scheme="http://www.javacn.top/tags/docker/"/>
    
      <category term="dockerfile" scheme="http://www.javacn.top/tags/dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>Docker常用命令</title>
    <link href="http://www.javacn.top/20170420/docker_common_command/"/>
    <id>http://www.javacn.top/20170420/docker_common_command/</id>
    <published>2017-04-20T06:29:21.000Z</published>
    <updated>2017-05-03T03:09:04.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><hr>
<h2 id="最常用几个命令"><a href="#最常用几个命令" class="headerlink" title="最常用几个命令"></a>最常用几个命令</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#显示现有镜像</span></div><div class="line"><span class="variable">$docker</span> images</div><div class="line"></div><div class="line"><span class="comment">#查看正在运行的容器</span></div><div class="line"><span class="variable">$docker</span> ps</div><div class="line"></div><div class="line"><span class="comment">#查看所有容器</span></div><div class="line"><span class="variable">$docker</span> ps -a</div><div class="line"></div><div class="line"><span class="comment">#进入容器</span></div><div class="line">$ docker exec -it &lt;containerName/Id&gt; <span class="string">"bin/bash"</span></div><div class="line"></div><div class="line"><span class="comment">#停止所有容器</span></div><div class="line"><span class="variable">$docker</span> stop $(docker ps -a -q)</div><div class="line"></div><div class="line"><span class="comment">#删除所有已经停止的容器</span></div><div class="line"><span class="variable">$docker</span> rm $(docker ps -a -q)</div><div class="line"></div><div class="line"><span class="comment">#删除所有的容器,包括正在运行的</span></div><div class="line"><span class="variable">$docker</span> rm -f $(docker ps -a -q)</div></pre></td></tr></table></figure>
<hr>
<a id="more"></a>
<h2 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a><strong>镜像操作</strong></h2><h3 id="检查Docker的安装是否正确："><a href="#检查Docker的安装是否正确：" class="headerlink" title="检查Docker的安装是否正确："></a>检查Docker的安装是否正确：</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> info</div></pre></td></tr></table></figure>
<h3 id="查询仓库的镜像"><a href="#查询仓库的镜像" class="headerlink" title="查询仓库的镜像"></a>查询仓库的镜像</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> search &lt;name&gt;</div></pre></td></tr></table></figure>
<h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> pull &lt;name&gt;</div></pre></td></tr></table></figure>
<h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> rmi &lt;imageName&gt;</div></pre></td></tr></table></figure>
<h3 id="删除所有镜像"><a href="#删除所有镜像" class="headerlink" title="删除所有镜像"></a>删除所有镜像</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> rmi $(docker images -q -a)</div></pre></td></tr></table></figure>
<h3 id="查看镜像列表："><a href="#查看镜像列表：" class="headerlink" title="查看镜像列表："></a>查看镜像列表：</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> images</div></pre></td></tr></table></figure>
<h3 id="查看镜像的历史版本"><a href="#查看镜像的历史版本" class="headerlink" title="查看镜像的历史版本"></a>查看镜像的历史版本</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> history &lt;imageId&gt;</div></pre></td></tr></table></figure>
<h3 id="将镜像推送到registry"><a href="#将镜像推送到registry" class="headerlink" title="将镜像推送到registry"></a>将镜像推送到registry</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> push &lt;repo_name&gt;</div></pre></td></tr></table></figure>
<h3 id="运行镜像"><a href="#运行镜像" class="headerlink" title="运行镜像"></a>运行镜像</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> run &lt;imageId/imageName&gt;</div></pre></td></tr></table></figure>
<hr>
<h2 id="Docker-运行时常用参数"><a href="#Docker-运行时常用参数" class="headerlink" title="Docker 运行时常用参数"></a><strong>Docker 运行时常用参数</strong></h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">  Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG...]    </div><div class="line"></div><div class="line">-d, --detach=false         指定容器运行于前台还是后台，默认为false     </div><div class="line">-i, --interactive=false    打开STDIN，用于控制台交互    </div><div class="line">-t, --tty=false            分配tty设备，该可以支持终端登录，默认为false    </div><div class="line">-u, --user=<span class="string">""</span>              指定容器的用户    </div><div class="line">-a, --attach=[]            登录容器（必须是以docker run -d启动的容器）  </div><div class="line">-w, --workdir=<span class="string">""</span>           指定容器的工作目录   </div><div class="line">-c, --cpu-shares=<span class="number">0</span>         设置容器CPU权重，在CPU共享场景使用    </div><div class="line">-e, --env=[]               指定环境变量，容器中可以使用该环境变量    </div><div class="line">-m, --memory=<span class="string">""</span>            指定容器的内存上限    </div><div class="line">-P, --publish-all=false    指定容器暴露的端口    </div><div class="line">-p, --publish=[]           指定容器暴露的端口   </div><div class="line">-h, --hostname=<span class="string">""</span>          指定容器的主机名    </div><div class="line">-v, --volume=[]            给容器挂载存储卷，挂载到容器的某个目录    </div><div class="line">--volumes-from=[]          给容器挂载其他容器上的卷，挂载到容器的某个目录  </div><div class="line">--cap-add=[]               添加权限，权限清单详见：http://linux.die.net/man/<span class="number">7</span>/capabilities    </div><div class="line">--cap-drop=[]              删除权限，权限清单详见：http://linux.die.net/man/<span class="number">7</span>/capabilities    </div><div class="line">--cidfile=<span class="string">""</span>               运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法    </div><div class="line">--cpuset=<span class="string">""</span>                设置容器可以使用哪些CPU，此参数可以用来容器独占CPU    </div><div class="line">--device=[]                添加主机设备给容器，相当于设备直通    </div><div class="line">--dns=[]                   指定容器的dns服务器    </div><div class="line">--dns-search=[]            指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件    </div><div class="line">--entrypoint=<span class="string">""</span>            覆盖image的入口点    </div><div class="line">--env-file=[]              指定环境变量文件，文件格式为每行一个环境变量    </div><div class="line">--expose=[]                指定容器暴露的端口，即修改镜像的暴露端口    </div><div class="line">--link=[]                  指定容器间的关联，使用其他容器的IP、env等信息    </div><div class="line">--lxc-conf=[]              指定容器的配置文件，只有在指定--exec-driver=lxc时使用    </div><div class="line">--name=<span class="string">""</span>                  指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字    </div><div class="line">--net=<span class="string">"bridge"</span>             容器网络设置:  </div><div class="line">                              bridge 使用docker daemon指定的网桥       </div><div class="line">                              host    //容器使用主机的网络    </div><div class="line">                              container:NAME_or_ID  &gt;//使用其他容器的网路，共享IP和PORT等网络资源    </div><div class="line">                              none 容器使用自己的网络（类似--net=bridge），但是不进行配置   </div><div class="line">--privileged=false         指定容器是否为特权容器，特权容器拥有所有的capabilities    </div><div class="line">--restart=<span class="string">"no"</span>             指定容器停止后的重启策略:  </div><div class="line">                              no：容器退出时不重启    </div><div class="line">                              on-failure：容器故障退出（返回值非零）时重启   </div><div class="line">                              always：容器退出时总是重启    </div><div class="line">--rm=false                 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)    </div><div class="line">--sig-proxy=true           设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理</div></pre></td></tr></table></figure>
<hr>
<h2 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a><strong>容器操作</strong></h2><h3 id="查看正在运行的容器："><a href="#查看正在运行的容器：" class="headerlink" title="查看正在运行的容器："></a>查看正在运行的容器：</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> ps</div></pre></td></tr></table></figure>
<h3 id="启动时设置root用户密码"><a href="#启动时设置root用户密码" class="headerlink" title="启动时设置root用户密码"></a>启动时设置root用户密码</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> run -d -e ROOT_PASS=&lt;mypass&gt; &lt;imageID&gt;</div></pre></td></tr></table></figure>
<h3 id="查看所有容器（包括已经关闭的）："><a href="#查看所有容器（包括已经关闭的）：" class="headerlink" title="查看所有容器（包括已经关闭的）："></a>查看所有容器（包括已经关闭的）：</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> ps -a</div></pre></td></tr></table></figure>
<h3 id="列出最近一次启动的container"><a href="#列出最近一次启动的container" class="headerlink" title="列出最近一次启动的container"></a>列出最近一次启动的container</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> ps -l</div></pre></td></tr></table></figure>
<h3 id="用一行列出所有正在运行的container（容器多的时候非常清晰）"><a href="#用一行列出所有正在运行的container（容器多的时候非常清晰）" class="headerlink" title="用一行列出所有正在运行的container（容器多的时候非常清晰）"></a>用一行列出所有正在运行的container（容器多的时候非常清晰）</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> ps | less -S</div></pre></td></tr></table></figure>
<h3 id="查看镜像-容器信息"><a href="#查看镜像-容器信息" class="headerlink" title="查看镜像/容器信息"></a>查看镜像/容器信息</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> inspect &lt;imageId/containerId&gt;</div></pre></td></tr></table></figure>
<h3 id="显示一个运行的容器里面的进程信息"><a href="#显示一个运行的容器里面的进程信息" class="headerlink" title="显示一个运行的容器里面的进程信息"></a>显示一个运行的容器里面的进程信息</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> top &lt;containerName/containerID&gt;</div></pre></td></tr></table></figure>
<h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> stop &lt;containerId&gt;</div></pre></td></tr></table></figure>
<h3 id="停止所有容器"><a href="#停止所有容器" class="headerlink" title="停止所有容器"></a>停止所有容器</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> stop $(docker ps -q);</div></pre></td></tr></table></figure>
<h3 id="杀死容器"><a href="#杀死容器" class="headerlink" title="杀死容器"></a>杀死容器</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> kill &lt;containerName/containerID&gt;</div></pre></td></tr></table></figure>
<h3 id="杀死所有容器"><a href="#杀死所有容器" class="headerlink" title="杀死所有容器"></a>杀死所有容器</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> kill $(docker ps -q);</div></pre></td></tr></table></figure>
<h3 id="删除所有容器"><a href="#删除所有容器" class="headerlink" title="删除所有容器"></a>删除所有容器</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> rm $(docker ps -a -q)</div></pre></td></tr></table></figure>
<h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> start &lt;containerId&gt;</div></pre></td></tr></table></figure>
<h3 id="重启容器"><a href="#重启容器" class="headerlink" title="重启容器"></a>重启容器</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> restart &lt;containerId&gt;</div></pre></td></tr></table></figure>
<h3 id="从容器里面拷贝文件-目录到本地一个路径"><a href="#从容器里面拷贝文件-目录到本地一个路径" class="headerlink" title="从容器里面拷贝文件/目录到本地一个路径"></a>从容器里面拷贝文件/目录到本地一个路径</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> cp &lt;containerName:/container_path&gt; to_path  </div><div class="line"><span class="variable">$docker</span> cp &lt;containerID:/container_path&gt; to_path</div></pre></td></tr></table></figure>
<h3 id="删除所有容器-1"><a href="#删除所有容器-1" class="headerlink" title="删除所有容器"></a>删除所有容器</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> rm `docker ps -a -q`</div></pre></td></tr></table></figure>
<hr>
<h2 id="如何连接运行中的容器"><a href="#如何连接运行中的容器" class="headerlink" title="如何连接运行中的容器"></a>如何连接运行中的容器</h2><h3 id="方法一（推荐）："><a href="#方法一（推荐）：" class="headerlink" title="方法一（推荐）："></a>方法一（推荐）：</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#后面的bin/bash由容器版本决定，可能是bin/bash（ubuntu\debian）,也可能是bin/sh（alpine）</span></div><div class="line"><span class="variable">$docker</span> exec -it &lt;containerId/containername&gt; <span class="string">"bin/bash"</span></div></pre></td></tr></table></figure>
<h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> attach &lt;containerId&gt;</div></pre></td></tr></table></figure>
<h3 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h3><h4 id="安装nsenter"><a href="#安装nsenter" class="headerlink" title="安装nsenter"></a>安装nsenter</h4><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> run --rm -v /usr/local/bin:/target jpetazzo/nsenter</div></pre></td></tr></table></figure>
<h4 id="查看所连接容器的PID"><a href="#查看所连接容器的PID" class="headerlink" title="查看所连接容器的PID"></a>查看所连接容器的PID</h4><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#获取PID</span></div><div class="line"><span class="variable">$PID</span>=$(docker inspect --format &#123;&#123;.State.Pid&#125;&#125; &lt;container_name_or_ID&gt;)</div></pre></td></tr></table></figure>
<h4 id="连接容器"><a href="#连接容器" class="headerlink" title="连接容器"></a>连接容器</h4><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> nsenter --target <span class="variable">$PID</span> --mount --uts --ipc --net --pid</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;常用命令&quot;&gt;&lt;a href=&quot;#常用命令&quot; class=&quot;headerlink&quot; title=&quot;常用命令&quot;&gt;&lt;/a&gt;常用命令&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;最常用几个命令&quot;&gt;&lt;a href=&quot;#最常用几个命令&quot; class=&quot;headerlink&quot; title=&quot;最常用几个命令&quot;&gt;&lt;/a&gt;最常用几个命令&lt;/h2&gt;&lt;figure class=&quot;highlight ps&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#显示现有镜像&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; images&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#查看正在运行的容器&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; ps&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#查看所有容器&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; ps -a&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#进入容器&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ docker exec -it &amp;lt;containerName/Id&amp;gt; &lt;span class=&quot;string&quot;&gt;&quot;bin/bash&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#停止所有容器&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; stop $(docker ps -a -q)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#删除所有已经停止的容器&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; rm $(docker ps -a -q)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#删除所有的容器,包括正在运行的&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$docker&lt;/span&gt; rm -f $(docker ps -a -q)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="docker" scheme="http://www.javacn.top/categories/docker/"/>
    
    
      <category term="docker" scheme="http://www.javacn.top/tags/docker/"/>
    
      <category term="命令" scheme="http://www.javacn.top/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>Docker的安装</title>
    <link href="http://www.javacn.top/20170420/docker_install/"/>
    <id>http://www.javacn.top/20170420/docker_install/</id>
    <published>2017-04-20T06:27:03.000Z</published>
    <updated>2017-05-03T03:07:59.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h1><ul>
<li><p>卸载旧版本 docker 或者 docker-engine</p>
<figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> yum remove docker \</div><div class="line">                  docker-common \</div><div class="line">                  container-selinux \</div><div class="line">                  docker-selinux \</div><div class="line">                  docker-engine</div></pre></td></tr></table></figure>
</li>
<li><p>安装Docker CE</p>
<figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install -y yum-utils</div><div class="line">$ sudo yum-config-manager --add-repo  https://download.docker.com/linux/centos/docker-ce.repo</div><div class="line">$ sudo yum-config-manager --enable docker-ce-edge</div><div class="line">$ sudo yum makecache fast</div><div class="line">$ sudo yum install docker-ce</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h1 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h1><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> systemctl start docker</div></pre></td></tr></table></figure>
<p>详见<a href="https://docs.docker.com/engine/installation/" target="_blank" rel="external">官方文档</a></p>
<h1 id="去除sudo"><a href="#去除sudo" class="headerlink" title="去除sudo"></a>去除sudo</h1><p>如果还没有 docker group 就添加一个：<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> groupadd docker</div></pre></td></tr></table></figure></p>
<p>将用户加入该 group 内。然后退出并重新登录就生效啦。<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> gpasswd -a $&#123;USER&#125; docker</div></pre></td></tr></table></figure></p>
<p>重启 docker 服务<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> systemctl restart docker</div></pre></td></tr></table></figure></p>
<p>切换当前会话到新 group 或者重启 X 会话<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$newgrp</span> - docker</div></pre></td></tr></table></figure></p>
<p>OR<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$pkill</span> X</div></pre></td></tr></table></figure></p>
<p>注意，最后一步是必须的，否则因为 groups 命令获取到的是缓存的组信息，刚添加的组信息未能生效，所以 docker images 执行时同样有错。</p>
<ul>
<li>原因分析<br> 因为 /var/run/docker.sock 所属 docker 组具有 setuid 权限</li>
</ul>
<figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> ls -l /var/run/docker.sock</div><div class="line">srw-rw---- <span class="number">1</span> root docker <span class="number">0</span> May  <span class="number">1</span> <span class="number">21</span>:<span class="number">35</span> /var/run/docker.sock</div></pre></td></tr></table></figure>
<h1 id="检查、测试"><a href="#检查、测试" class="headerlink" title="检查、测试"></a>检查、测试</h1><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> info</div><div class="line"><span class="variable">$docker</span> run hello-world</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Docker的安装&quot;&gt;&lt;a href=&quot;#Docker的安装&quot; class=&quot;headerlink&quot; title=&quot;Docker的安装&quot;&gt;&lt;/a&gt;Docker的安装&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;卸载旧版本 docker 或者 docker-engine&lt;/p&gt;
&lt;figure class=&quot;highlight ps&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$sudo&lt;/span&gt; yum remove docker \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                  docker-common \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                  container-selinux \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                  docker-selinux \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                  docker-engine&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装Docker CE&lt;/p&gt;
&lt;figure class=&quot;highlight ps&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ sudo yum install -y yum-utils&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo yum-config-manager --add-repo  https://download.docker.com/linux/centos/docker-ce.repo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo yum-config-manager --enable docker-ce-edge&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo yum makecache fast&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ sudo yum install docker-ce&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="docker" scheme="http://www.javacn.top/categories/docker/"/>
    
    
      <category term="docker" scheme="http://www.javacn.top/tags/docker/"/>
    
      <category term="安装" scheme="http://www.javacn.top/tags/%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>基于 Consul 的 Docker Swarm 服务发现</title>
    <link href="http://www.javacn.top/20170420/docker_consul_swarm/"/>
    <id>http://www.javacn.top/20170420/docker_consul_swarm/</id>
    <published>2017-04-20T02:09:38.000Z</published>
    <updated>2017-05-03T03:16:54.602Z</updated>
    
    <content type="html"><![CDATA[<p>Docker 是一种新型的虚拟化技术，它的目标在于实现轻量级操作系统的虚拟化。相比传统的虚拟化方案，Docker 虚拟化技术有一些很明显的优势：启动容器的速度明显快于传统虚拟化技术，同时创建一台虚拟机占用的资源也要远远小于传统的虚拟技术。Swarm 是 Docker 集群化的技术，而 Swarm 集群化 Docker 离不开服务发现。Consul 能够解决 Swarm 的服务发现问题。本文将介绍 Swarm 如何使用 Consul 作为服务发现。</p>
<h1 id="Docker-Swarm-服务发现"><a href="#Docker-Swarm-服务发现" class="headerlink" title="Docker Swarm 服务发现"></a>Docker Swarm 服务发现</h1><p>Docker 集群化可以通过 Swarm 来实现。Swarm 对 Docker 集群中节点的动态加入和退出的感知叫做服务发现。Docker Swarm 支持多种服务发现方式，下面进行详细介绍。</p>
<a id="more"></a>
<h2 id="服务发现方式"><a href="#服务发现方式" class="headerlink" title="服务发现方式"></a>服务发现方式</h2><p>  Docker Swarm 支持的服务发现方式主要有以下几种：</p>
<ol>
<li>Token<br>Token 发现策略使用 ID 来唯一标识集群，每一个节点通过指定集群 ID 来标识加入的集群。所以首先使用 Swarm 产生一个集群 ID，然后每一个节点通过 join Cluster-ID 动态加入这个集群。</li>
<li>Nodes<br>Nodes 发现策略依赖于集群节点，我们在集群 manage 节点执行加入集群指令时，就需要指定要加入集群的其他节点。所以集群成员需要预先定义。</li>
<li>File<br>首先将加入集群的节点存储在一个文件中，我们在集群 manage 节点执行加入集群指令时，指定存储集群中所有节点的文件。所以集群成员也是需要预先定义。</li>
<li>分布式 key/value 存储<br>Swarm 使用第三方软件的 key/value 形式存储节点信息，分布式 key-value 存储不仅能够实现 Swarm 节点的动态加入，同时提供了很多其他的功能，直观显示集群中的每个节点以及每个节点提供的服务等。<br>Swarm 通过 key/value 存储实现的服务发现有三种，接下来，分别进行介绍。</li>
</ol>
<h3 id="分布式-key-value-存储"><a href="#分布式-key-value-存储" class="headerlink" title="分布式 key/value 存储"></a>分布式 key/value 存储</h3><p>Swarm 通过分布式 key/value 存储实现的服务发现方式有以下三种：</p>
<ol>
<li>ZooKeeper<br>ZooKeeper 是比较成熟的分布式 key/value 存储，但是使用复杂，入门门槛较高，需要借助第三方软件来发送 key-value 数据给 ZooKeeper 完成数据存储。</li>
<li>Etcd<br>Etcd 部署使用简单，提供了可靠的数据存储，但是需要借助第三方软件，手动将 key/value 数据发送给 Etcd 来存储。</li>
<li>Consul<br>Consul 提供了可靠的数据存储，并且提供了服务发现框架，不需要借助第三方软件。<br>本文主要介绍第三方服务发现 Consul 在 Docker Swarm 中的的使用，接下来对 Consul 进行介绍。</li>
</ol>
<h1 id="Consul-简介"><a href="#Consul-简介" class="headerlink" title="Consul 简介"></a>Consul 简介</h1><p>Consul 提供了分布式环境中服务的注册和发现，支持分布式，高可用，多数据中心。</p>
<h3 id="Consul-重要概念"><a href="#Consul-重要概念" class="headerlink" title="Consul 重要概念"></a>Consul 重要概念</h3><p>Consul 中的重要概念：</p>
<ol>
<li>Agent：Consul 集群中每个成员运行的守护进程，以 Client 或者 Server 的模式存在。</li>
<li>Client：发送 RPC 请求给服务器的 Agent。</li>
<li>Server：是一个 Agent，负责响应 RPC 查询，维护集群状态，参与 Raft 仲裁等。<br>Server 有三种存在状态。接下来，分别介绍这三种状态以及它们之间的关系。</li>
</ol>
<h3 id="Server-存在状态"><a href="#Server-存在状态" class="headerlink" title="Server 存在状态"></a>Server 存在状态</h3><p>Server 的三种状态形式：Leader，Follower，Candidate。</p>
<ol>
<li>Candidate：Server 参与 Raft 仲裁，竞选期间所有服务器的状态。</li>
<li>Leader：Server 参与 Raft 仲裁，竞选结束获胜服务器的状态。</li>
<li>Follower：Server 参与 Raft 仲裁，竞选结束未获胜服务器的状态。</li>
</ol>
<p>三种状态之间关系如下：<br>Consul 集群 Server 节点中要有一个 Leader。<br>Leader 负责维护集群中所有节点的状态。<br>当集群还没有 Leader 或者 Leader 出现故障时候，所有的 Server 运行 Raft 算法，开始竞选。<br>竞选期间所有 Server 的状态称为 Candidate。<br>最终集群中的 Server 经过竞选，只有一台 Server 获胜，竞选结束。<br>这个时候集群中获胜的 Server 称为 Leader，其他的 Server 称为 Follower。  </p>
<h3 id="Consul-架构"><a href="#Consul-架构" class="headerlink" title="Consul 架构"></a>Consul 架构</h3><p>为了从整体上对 Consul 有一个了解，下面以一个数据中心的 Consul 部署结构图来对 Consul 进行说明。<br>一个数据中心的 Consul 集群由客户端和服务器组成，服务器以 Leader 和 Follower 两种角色存在。<br>Client 会定时向 Server 发送 RPC 请求，汇报自己的运行状态。<br>Leader 收到 Client 的 RPC 请求，会给 client 发送 RPC 响应，同时存储 Client 的状态等信息。<br>Follower 收到 Client 的 RPC 请求，会转发给 Leader。<br>Leader 存储该 Client 的信息。<br>Consul 的架构如下图所示。<br><img src="http://op06ugvox.bkt.clouddn.com/hexo/基于-Consul-的-Docker-Swarm-服务发现/image001.png" alt="图 1. Consul 架构图">  </p>
<p>对 Swarm 的服务发现策略和 Consul 有了整体了解后，下面具体介绍在代码实现中，Swarm 如何使用 Consul 作为服务发现。</p>
<h1 id="Swarm-Consul-服务发现源码解析"><a href="#Swarm-Consul-服务发现源码解析" class="headerlink" title="Swarm Consul 服务发现源码解析"></a>Swarm Consul 服务发现源码解析</h1><p>在 GitHub 官网可以下载<a href="https://github.com/docker/swarm?cm_mc_uid=48328830484514900634274&amp;cm_mc_sid_50200000=1490853421" target="_blank" rel="external">Swarm源码</a>。本文以 Swarm 1.2.4 为例，通过介绍 swarm join 的流程，来说明 Swarm 使用 Consul 的服务发现过程。</p>
<p>首先，我们简单说明 Swarm 源码文件夹结构以及每个文件的功能。</p>
<h2 id="Swarm-源码文件夹结构"><a href="#Swarm-源码文件夹结构" class="headerlink" title="Swarm 源码文件夹结构"></a>Swarm 源码文件夹结构</h2><p>Swarm 源码的文件夹结构如下表 1 所示。  </p>
<table>
<thead>
<tr>
<th>文件夹名称</th>
<th>文件夹说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>api</td>
<td>Swarm对外提供的 API</td>
</tr>
<tr>
<td>cli</td>
<td>Swarm命令行解析</td>
</tr>
<tr>
<td>cluster</td>
<td>Swarm集群管理</td>
</tr>
<tr>
<td>discovery</td>
<td>Swarm 集群发现（Token 方式）</td>
</tr>
<tr>
<td>docs</td>
<td>Swarm 文档</td>
</tr>
<tr>
<td>experimental</td>
<td>Swarm 实验性功能</td>
</tr>
<tr>
<td>Godeps</td>
<td>Go 语言包依赖管理工具</td>
</tr>
<tr>
<td>scheduler</td>
<td>Swarm 调度器</td>
</tr>
<tr>
<td>script</td>
<td>Swarm 脚本</td>
</tr>
<tr>
<td>swarmclient</td>
<td>Docker Engine 操作 Swarm 的 API</td>
</tr>
<tr>
<td>test</td>
<td>Swarm 测试</td>
</tr>
<tr>
<td>vendor</td>
<td>Swarm 的依赖包</td>
</tr>
<tr>
<td>version</td>
<td>Swarm 版本</td>
</tr>
<tr>
<td>main.go</td>
<td>Swarm 入口函数</td>
</tr>
</tbody>
</table>
<p>表 1. Swarm 源码的文件夹结构  </p>
<p>Swarm join 是 Swarm 节点加入 Swarm 集群的命令，并且节点在执行 swarm join 命令时，可以指定 Swarm 的服务发现方式。在对 Swarm 源码的文件结构有了整体了解后，接下来我们通过分析 swarm join 的源码，理解 Swarm 使用 Consul 作为服务发现的过程。</p>
<h2 id="Swarm-join-源码解析"><a href="#Swarm-join-源码解析" class="headerlink" title="Swarm join 源码解析"></a>Swarm join 源码解析</h2><p>Swarm 支持一定的命令行操作。当客户端输入 swarm join 命令时，Swarm 会首先在自己支持的命令集合中找到该命令，同时找到该命令对应的处理函数。<br>然后执行 swarm join 的处理函数。在该处理函数中，swarm 会根据命令行输入的服务发现策略 Consul，初始化一个 Consul 客户端，而后向 Consul 服务器发送注册消息，完成客户端加入集群的操作。</p>
<p>Swarm 所有操作的入口函数是 main 函数。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">  cli.Run()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>main 函数的功能是启动命令行应用程序。命令行应用程序在启动的时候主要做三件事：1、创建命令行应用程序。2、初始化 Swarm 支持的命令。3、运行命令行应用程序。其中初始化 Swarm 支持的命令，定义了每个版本的 Swarm 支持的命令行集合，以及每个命令对应的处理函数。下面是命令行程序启动时的主要代码。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Run</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">//1、创建 go 的命令行应用 app</span></div><div class="line">    app := cli.NewApp()</div><div class="line">    <span class="comment">//2、初始化 app 的命令行参数</span></div><div class="line">    app.Commands = commands</div><div class="line">    <span class="comment">//3、运行 app</span></div><div class="line">    <span class="keyword">if</span> err := app.Run(os.Args); err != <span class="literal">nil</span> &#123;</div><div class="line">        log.Fatal(err)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上代码清单位于文件 cli/cli.go。下面对以上代码的主要功能进行详细说明。</p>
<ol>
<li>创建命令行应用程序<br>该功能是利用第三方库 github.com/codegangsta/cli 来创建 Go 的命令行应用程序。在 Swarm 的第三方依赖文件夹 vendor/github.com/codegangsta/cli 可以找到创建 Go 应用程序的依赖文件。</li>
<li>初始化 Swarm 支持的命令<br>这个部分是很关键的一部分，该版本的 Swarm 支持的所有命令以及每个命令对应的处理函数等信息都在此处完成初始化。Swarm 使用数组 commands 完成所有命令的初始化。commands 的定义位于文件 cli\commands.go，关键代码如下。<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> (</div><div class="line">    commands = []cli.Command&#123;</div><div class="line">        &#123;</div><div class="line">            Name:      <span class="string">"create"</span>,</div><div class="line">            ShortName: <span class="string">"c"</span>,</div><div class="line">            Usage:     <span class="string">"Create a cluster"</span>,</div><div class="line">            Action:    create,</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            Name:      <span class="string">"list"</span>,</div><div class="line">            ShortName: <span class="string">"l"</span>,</div><div class="line">            Usage:     <span class="string">"List nodes in a cluster"</span>,</div><div class="line">           Flags:     []cli.Flag&#123;flTimeout, flDiscoveryOpt&#125;,</div><div class="line">            Action:    list,</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            Name:      <span class="string">"manage"</span>,</div><div class="line">            ShortName: <span class="string">"m"</span>,</div><div class="line">            Usage:     <span class="string">"Manage a docker cluster"</span>,</div><div class="line">            <span class="comment">//Flags 定义...</span></div><div class="line">            Action: manage,</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            Name:      <span class="string">"join"</span>,</div><div class="line">            ShortName: <span class="string">"j"</span>,</div><div class="line">            Usage:     <span class="string">"Join a docker cluster"</span>,</div><div class="line">            <span class="comment">//Flags 定义...</span></div><div class="line">            Action:    join,</div><div class="line">            &#125;,</div><div class="line">        &#125;</div><div class="line">)</div></pre></td></tr></table></figure>
</li>
</ol>
<p>在上面的 commands 的定义中，Name 字段指定了 Swarm 支持的每个命令，Action 字段指定了每个命令的处理函数。下面我们把 swarm join 命令和上面的定义结合起来，具体说明下当在节点的终端输入 join 命令时，swarm 代码是如何执行的。  </p>
<p>join 命令在终端的使用如下：<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> run -d -p <span class="number">2376</span>:<span class="number">2375</span> --name swarm-slave-<span class="number">01</span> swarm join -addr <span class="number">192.168</span>.<span class="number">1.28</span>:<span class="number">2376</span> consul://<span class="number">192.168</span>.<span class="number">1.28</span>:<span class="number">8500</span></div></pre></td></tr></table></figure></p>
<p>当我们在终端输入以上命令，Swarm 会首先解析命令，解析出用户要执行的命令是 join 命令。然后在上面 commands 的定义中找到 join 命令的处理函数是 join 函数。接下来就调用 join 函数完成 join 命令的执行。<br>下面代码展示了 Swarm 解析执行终端命令的过程。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *App)</span> <span class="title">Run</span><span class="params">(arguments []<span class="keyword">string</span>)</span> <span class="params">(err error)</span></span>&#123;</div><div class="line">    args := context.Args()</div><div class="line">    <span class="keyword">if</span> args.Present() &#123;</div><div class="line">       <span class="comment">//...</span></div><div class="line">        c := a.Command(name)</div><div class="line">        <span class="keyword">if</span> c != <span class="literal">nil</span> &#123;</div><div class="line">           <span class="comment">//调用 Command 的 Run 函数来执行操作</span></div><div class="line">            <span class="keyword">return</span> c.Run(context)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// Run default Action</span></div><div class="line">    a.Action(context)</div><div class="line">&#125;</div><div class="line"><span class="comment">//Command 的 Run 函数</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Command)</span> <span class="title">Run</span><span class="params">(ctx *Context)</span> <span class="title">error</span></span> &#123;</div><div class="line">    context.Command = c</div><div class="line"><span class="comment">//调用 Command 的 Action 函数，如果我们输入的是 join 函数，接下来就会执行 join 函数</span></div><div class="line">    c.Action(context)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>以上代码清单位于 github.com/codegangsta/cli/app.go 中的 Run 函数。  </p>
<p>Swarm 在初始化的时候，会初始化它支持的第三方服务发现。当我们在终端指定第三方服务发现的时候，Swarm 会调用对应的第三方服务发现接口，创建并初始化第三方服务发现客户端，然后向第三方服务发现服务器发送注册消息，完成注册。</p>
<p>下一步，我们将要考虑 join 函数的具体实现，Swarm 创建 Consul 客户端以及向 Consul 服务器的注册过程。join 函数如下所示。<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">join</span><span class="params">(c *cli.Context)</span></span> &#123;</div><div class="line">    dflag := getDiscovery(c)</div><div class="line">    <span class="number">1</span>、创建服务发现</div><div class="line">    d, err := discovery.New(dflag, hb, ttl, getDiscoveryOpt(c))</div><div class="line">    <span class="keyword">for</span> &#123;</div><div class="line">        <span class="number">2</span>、注册服务发现</div><div class="line">        <span class="keyword">if</span> err := d.Register(addr); err != <span class="literal">nil</span> &#123;<span class="comment">//....&#125;</span></div><div class="line">    &#125;<span class="comment">//.</span></div></pre></td></tr></table></figure></p>
<p>以上代码位于 cli/join.go。  </p>
<p>join 函数主要功能是：创建服服务发现客户端和向服务发现服务器注册。</p>
<ol>
<li><p>创建服务发现<br>创建第三方服务发现客户端使用的是简单工厂模式。Swarm 会首先将支持的第三方服务发现初始化在一个 map 中，然后根据我们在命令行指定的第三方服务发现，去调用对应的初始化方法。所以如果我们自己写了一个第三方服务发现软件，可以很方便地嵌入到 Swarm 中。<br>创建服务发现的数据流程图如下图 所示。<br><img src="http://op06ugvox.bkt.clouddn.com/hexo/基于-Consul-的-Docker-Swarm-服务发现/image002.png" alt="创建服务发现流程图">  </p>
<p>Swarm 首先调用 discovery 包下面的 New 函数，在该函数中调用 Backen 接口的 Initialize 方法，在 Initialize 方法中，调用 libkv 包下的 NewStore 方法。在 NewStore 方法中，首先判断 Swarm 是否支持终端输入的服务发现，如果支持，就去调用该服务发现的初始化方法完成第三方服务发现的初始化。</p>
<p>Consul 初始化函数 New 函数位于 github/com/docker/libkv/store/consul/consul.go，如下所示。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(endpoints []<span class="keyword">string</span>, options *store.Config)</span> <span class="params">(store.Store, error)</span></span> &#123;</div><div class="line">    s := &amp;Consul&#123;&#125;</div><div class="line">    config := api.DefaultConfig()</div><div class="line">    s.config = config</div><div class="line">    config.HttpClient = http.DefaultClient</div><div class="line">    config.Address = endpoints[<span class="number">0</span>]</div><div class="line">    config.Scheme = <span class="string">"http"</span></div><div class="line">    ....</div><div class="line">    <span class="comment">// Creates a new client</span></div><div class="line">    client, err := api.NewClient(config)</div><div class="line">    ...</div><div class="line">    s.client = client</div><div class="line">    <span class="keyword">return</span> s, <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 Consul 的初始化函数中，新创建一个 Consul 客户端，并完成 Consul 客户端一些参数的初始化。  </p>
</li>
<li><p>注册服务发现<br>consul 完成服务发现的初始化，就会发送注册信息给 consul 服务器完成注册。key/value 的注册代码位于 github.com\docker\docker\pkg\discovery\kv\kv.go ，如下所示：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Register is exported</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Discovery)</span> <span class="title">Register</span><span class="params">(addr <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</div><div class="line">    opts := &amp;store.WriteOptions&#123;TTL: s.ttl&#125;</div><div class="line">    <span class="keyword">return</span> s.store.Put(path.Join(s.path, addr), []<span class="keyword">byte</span>(addr), opts)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>Consul 发送注册地址到 Consul 服务器，完成 Consul 的注册。</p>
<h1 id="Consul-实现-Docker-Swarm-服务注册例子"><a href="#Consul-实现-Docker-Swarm-服务注册例子" class="headerlink" title="Consul 实现 Docker Swarm 服务注册例子"></a>Consul 实现 Docker Swarm 服务注册例子</h1><p>  结合Swarm join 源码解析，下面介绍如何使用 Consul 实现 Docker Swarm 服务发现。<br>  在 Swarm 的 Client 节点（IP 地址为 192.168.1.28）执行加入集群的指令，并指定 Consul 作为服务发现。</p>
  <figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> run -d --name swarm-slave-<span class="number">04</span> itaas-docker-registry:<span class="number">5000</span>/public/swarm:<span class="number">1.2</span>.<span class="number">3</span> join --addr <span class="number">192.168</span>.<span class="number">1.28</span>:<span class="number">2375</span> consul://<span class="number">192.168</span>.<span class="number">1.28</span>:<span class="number">8500</span> <span class="number">8</span>c7a6ec6d48ed526a81504879755e3772978790df4bf2476693b144</div></pre></td></tr></table></figure>
<p>  使用 Consul 的 Web UI 查看命令执行结果。在浏览器地址栏输入 <a href="http://192.168.1.28:8500，然后选择" target="_blank" rel="external">http://192.168.1.28:8500，然后选择</a> key/value 选项卡，在该选项卡下选择 docker/swarm/nodes，可以看到 192.168.1.28 这个节点已经注册到 Docker Swarm 集群。  </p>
<p>  Consul 服务发现的结果如下图所示。<br>  <img src="http://op06ugvox.bkt.clouddn.com/hexo/基于-Consul-的-Docker-Swarm-服务发现/image004.png" alt=""></p>
<h1 id="总结与展望"><a href="#总结与展望" class="headerlink" title="总结与展望"></a>总结与展望</h1><p>  本文概述了 Docker Swarm 服务发现的四种策略并进行了简单的比较，简单介绍了 Consul，详述了 Swarm 使用 Consul 作为服务发现的代码流程，最后用一个例子说明了 Docker Swarm 使用 Consul 作为服务发现的过程，希望能够让大家对 Swarm 服务发现的过程有所了解。<br>  通过对 Swarm 服务发现源码的解析，可以看到 Swarm 源码中使用第三方 key/value 作为服务发现的实现采用了简单工厂模式，我们也可以很容易地将其他的第三方 key/value 插件，以及自己设计的服务发现插件嵌入到 Swarm 的服务发现中。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><ul>
<li>参考<a href="http://dockone.io/article/667" target="_blank" rel="external">Consul、Etcd 和 ZooKeeper 的区别</a>，了解第三方服务发现的区别  </li>
<li>参考<a href="https://www.consul.io/docs/internals/architecture.html" target="_blank" rel="external">Consul 架构图</a>，了解更多 Consul 的基本架构  </li>
<li>参考<a href="http://xueshu.baidu.com/s?wd=paperuri%3A%28ec4d03ead7ea49864cf6f288c5df100b%29&amp;filter=sc_long_sign&amp;tn=SE_xueshusource_2kduw22v&amp;sc_vurl=http%3A%2F%2Fwww.cnki.com.cn%2FArticle%2FCJFDTotal-DZRU201403195.htm&amp;ie=utf-8&amp;sc_us=11067160892004884402" target="_blank" rel="external">热备份</a>，查看热备份概念  </li>
<li>参考<a href="http://www.jdon.com/artichect/raft.html" target="_blank" rel="external">Raft</a>，查看 Raft 算法实现原理  </li>
<li>参考<a href="http://dockone.io/article/662" target="_blank" rel="external">Swarm 代码框架</a>，了解 Swarm 代码的整体设计  </li>
<li>参考<a href="https://github.com/docker/swarm" target="_blank" rel="external">Swarm 源码文件夹结构</a>，了解 Swarm 源码的文件夹结构  </li>
<li><p>参考<a href="http://blog.csdn.net/screscent/article/details/51362116" target="_blank" rel="external">Swarm manage 和 Store 流程解析</a>，了解更多 Swarm 第三方服务发现执行流程  </p>
<hr>
</li>
</ul>
<h2 id="相关主题"><a href="#相关主题" class="headerlink" title="相关主题"></a>相关主题</h2><ul>
<li>访问 developerWorks 中国 <a href="http://www.ibm.com/developerworks/cn/cloud/bluemix/index.html" target="_blank" rel="external">IBM Bluemix 资源中心</a>：本专题提供了丰富的文章、教程和演示等学习资源，带您由浅入深地了解 Bluemix。  </li>
<li>访问 developerWorks <a href="http://www.ibm.com/developerworks/cn/cloud/" target="_blank" rel="external">云计算专区</a>，developerWorks 为开发人员和专业人员推出的云计算社区和技术资源。您可以了解关于云计算的更多信息，获取技术文档、how-to 文章、培训、下载、产品信息以及其他最新技术资源，并参与社区讨论。  </li>
<li><a href="https://www.ibm.com/developerworks/cn/premium/" target="_blank" rel="external">IBM developerWorks Premium</a> 是一项针对开发人员的会员计划，它提供了功能强大的工具、资源和支持，旨在帮助您快速设计原型、开发和部署成功的云项目。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker 是一种新型的虚拟化技术，它的目标在于实现轻量级操作系统的虚拟化。相比传统的虚拟化方案，Docker 虚拟化技术有一些很明显的优势：启动容器的速度明显快于传统虚拟化技术，同时创建一台虚拟机占用的资源也要远远小于传统的虚拟技术。Swarm 是 Docker 集群化的技术，而 Swarm 集群化 Docker 离不开服务发现。Consul 能够解决 Swarm 的服务发现问题。本文将介绍 Swarm 如何使用 Consul 作为服务发现。&lt;/p&gt;
&lt;h1 id=&quot;Docker-Swarm-服务发现&quot;&gt;&lt;a href=&quot;#Docker-Swarm-服务发现&quot; class=&quot;headerlink&quot; title=&quot;Docker Swarm 服务发现&quot;&gt;&lt;/a&gt;Docker Swarm 服务发现&lt;/h1&gt;&lt;p&gt;Docker 集群化可以通过 Swarm 来实现。Swarm 对 Docker 集群中节点的动态加入和退出的感知叫做服务发现。Docker Swarm 支持多种服务发现方式，下面进行详细介绍。&lt;/p&gt;
    
    </summary>
    
      <category term="docker" scheme="http://www.javacn.top/categories/docker/"/>
    
    
      <category term="转载" scheme="http://www.javacn.top/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="docker" scheme="http://www.javacn.top/tags/docker/"/>
    
      <category term="swarm" scheme="http://www.javacn.top/tags/swarm/"/>
    
      <category term="consul" scheme="http://www.javacn.top/tags/consul/"/>
    
  </entry>
  
  <entry>
    <title>基于consul的Docker-overlay跨多宿主机容器网络</title>
    <link href="http://www.javacn.top/20170420/docker_consul_overlay/"/>
    <id>http://www.javacn.top/20170420/docker_consul_overlay/</id>
    <published>2017-04-20T02:00:59.000Z</published>
    <updated>2017-05-03T03:16:40.543Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境限制"><a href="#环境限制" class="headerlink" title="环境限制"></a>环境限制</h1><ul>
<li>必须安装key-value存储服务，如consul</li>
<li>宿主机已经安装docker engine</li>
<li>宿主机的hostname必须不同</li>
<li>内核大于3.16</li>
</ul>
<a id="more"></a>
<h1 id="环境准备及角色分配"><a href="#环境准备及角色分配" class="headerlink" title="环境准备及角色分配"></a>环境准备及角色分配</h1><ul>
<li>两台ubuntu的server</li>
</ul>
<table>
<thead>
<tr>
<th>主机名</th>
<th>ip</th>
<th>内核</th>
<th>启动docker容器名称</th>
<th>docker engine版本</th>
<th>consul服务</th>
</tr>
</thead>
<tbody>
<tr>
<td>test26</td>
<td>192.168.2.26</td>
<td>4.10.4-1.el7.elrepo.x86_64</td>
<td>test26（centOS7）</td>
<td>17.03.0-ce</td>
<td>server</td>
</tr>
<tr>
<td>test139</td>
<td>192.168.2.139</td>
<td>4.10.4-1.el7.elrepo.x86_64</td>
<td>test139（centOS7）</td>
<td>17.03.0-ce</td>
<td>client</td>
</tr>
</tbody>
</table>
<ul>
<li><p>实验目标：</p>
<p>  两个CentOS7容器test26,test139网络互通, <strong>注意本文中的zhaoshg@test26和zhaoshg@test139</strong></p>
</li>
</ul>
<h2 id="防火墙开放端口"><a href="#防火墙开放端口" class="headerlink" title="防火墙开放端口"></a>防火墙开放端口</h2><p>分别在两台机器上运行：<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> firewall-cmd --permanent --add-port=&#123;<span class="number">8500</span>/tcp,<span class="number">8300</span>/tcp,<span class="number">8301</span>/tcp,<span class="number">3375</span>/tcp,<span class="number">2375</span>/tcp&#125;</div><div class="line"><span class="variable">$sudo</span> firewall-cmd --reload</div><div class="line"><span class="variable">$sudo</span> firewall-cmd  --list-all</div></pre></td></tr></table></figure></p>
<h2 id="运行分布式发现服务协调软件：consul"><a href="#运行分布式发现服务协调软件：consul" class="headerlink" title="运行分布式发现服务协调软件：consul"></a>运行分布式发现服务协调软件：consul</h2><ul>
<li><p>拉取consul镜像</p>
<figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> pull consul</div></pre></td></tr></table></figure>
</li>
<li><p>启动consul</p>
<figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[zhaoshg@test ~]<span class="variable">$docker</span> run -d -it --net=host --name=consul_server -v /home/zhaoshg/consul_data:/<span class="keyword">data</span> -e <span class="string">'CONSUL_LOCAL_CONFIG=&#123;"skip_leave_on_interrupt": true&#125;'</span> -p <span class="number">8300</span>:<span class="number">8300</span> -p <span class="number">8301</span>:<span class="number">8301</span> -p <span class="number">8301</span>:<span class="number">8301</span>/udp -p <span class="number">8302</span>:<span class="number">8302</span> -p <span class="number">8302</span>:<span class="number">8302</span>/udp -p <span class="number">8400</span>:<span class="number">8400</span> -p <span class="number">8500</span>:<span class="number">8500</span> -p <span class="number">53</span>:<span class="number">53</span>/udp consul agent -server -bootstrap -bind=<span class="number">192.168</span>.<span class="number">2.26</span></div><div class="line">[nrj@test ~]<span class="variable">$docker</span> run -d -it --net=host --name=consul_client -v /home/zhaoshg/consul_data:/<span class="keyword">data</span> -e <span class="string">'CONSUL_LOCAL_CONFIG=&#123;"leave_on_terminate": true&#125;'</span> -p <span class="number">8300</span>:<span class="number">8300</span> -p <span class="number">8301</span>:<span class="number">8301</span> -p <span class="number">8301</span>:<span class="number">8301</span>/udp -p <span class="number">8302</span>:<span class="number">8302</span> -p <span class="number">8302</span>:<span class="number">8302</span>/udp -p <span class="number">8400</span>:<span class="number">8400</span> -p <span class="number">8500</span>:<span class="number">8500</span> -p <span class="number">53</span>:<span class="number">53</span>/udp  consul agent -bind=<span class="number">192.168</span>.<span class="number">2.139</span> -join=<span class="number">192.168</span>.<span class="number">2.26</span></div></pre></td></tr></table></figure>
</li>
<li><p>可以启动一个server和多个agent(此处是一个)，然后让agent，join到consul集群中</p>
</li>
<li>启动时可能会遇到55/udp被占用，多半是虚拟网卡的问题，卸载就好：<figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> virsh net-list</div><div class="line"><span class="variable">$sudo</span> virsh net-destroy default </div><div class="line"><span class="variable">$sudo</span> virsh net-undefine default</div><div class="line"><span class="variable">$sudo</span> service libvirtd restart</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="配置Docker并重启"><a href="#配置Docker并重启" class="headerlink" title="配置Docker并重启"></a>配置Docker并重启</h2><ul>
<li><p>在每一台docker宿主机上做如下配置，并重启docker</p>
<figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> vim /etc/docker/daemon.json</div><div class="line">//添加</div><div class="line">&#123;</div><div class="line">  <span class="string">"tls"</span>: false,</div><div class="line">  <span class="string">"hosts"</span>: [<span class="string">"unix:///var/run/docker.sock"</span>,<span class="string">"tcp://0.0.0.0:2375"</span>],</div><div class="line">  <span class="string">"cluster-store"</span>: <span class="string">"consul://localhost:8500"</span>,</div><div class="line">  <span class="string">"cluster-advertise"</span>: <span class="string">"enp0s3:2375"</span></div><div class="line">&#125;</div><div class="line"><span class="variable">$sudo</span> systemctl daemon-reload</div><div class="line"><span class="variable">$sudo</span> systemctl restart docker</div></pre></td></tr></table></figure>
</li>
<li><p>enp0s3代表两台宿主机交互所对应的网卡地址  分别是  192.168.2.26和192.168.2.139</p>
</li>
<li><p>集群配置</p>
<p> <code>–cluster-store=</code> 参数指向docker daemon所使用key value service的地址（本例中即consul的服务地址）<code>–cluster-advertise=</code> 参数决定了所使用网卡以及docker daemon端口信息</p>
</li>
<li><p>宿主机配置</p>
<p>  上面的-H 的参数分别指定了docker demon服务的地址和协议</p>
</li>
</ul>
<h1 id="跨主机网络创建"><a href="#跨主机网络创建" class="headerlink" title="跨主机网络创建"></a>跨主机网络创建</h1><h2 id="创建overlay网络"><a href="#创建overlay网络" class="headerlink" title="创建overlay网络"></a>创建overlay网络</h2><ul>
<li><p>创建</p>
<figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[zhaoshg@test26 ~]: <span class="variable">$sudo</span> docker network create -d overlay  mynet</div></pre></td></tr></table></figure>
</li>
<li><p>验证<br>在test26上创建的multihost网络，会通过consul服务同步到test139上面</p>
<figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[zhaoshg@test139 ~]:<span class="variable">$docker</span> network ls</div><div class="line">NETWORK ID          NAME                DRIVER              SCOPE</div><div class="line"><span class="number">490</span>c2dbc35e0        bridge              bridge              local</div><div class="line"><span class="number">045</span>f3acd3c28        docker_gwbridge     bridge              local</div><div class="line"><span class="number">023021</span>bcc407        host                host                local</div><div class="line"><span class="number">5104</span>bce70f86        mynet               overlay             global</div><div class="line"><span class="number">3</span>bbb2a39fad8        none                null                local</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><ul>
<li>创建测试容器<figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> run -d -it --net=mynet --name=test1 centos</div><div class="line"><span class="variable">$docker</span> run -d -it --net=mynet --name=test2 centos</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="验证网络互通"><a href="#验证网络互通" class="headerlink" title="验证网络互通"></a>验证网络互通</h2><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">zhaoshg@test139:~$  PID=$(docker inspect --format &#123;&#123;.State.Pid&#125;&#125; test2)</div><div class="line">zhaoshg@test139:~$  sudo nsenter --target <span class="variable">$PID</span> --mount --uts --ipc --net --pid</div><div class="line"></div><div class="line">[root@<span class="number">2516560</span>c337f /]<span class="comment"># yum install net-tools</span></div><div class="line">[root@<span class="number">2516560</span>c337f /]<span class="comment"># ifconfig</span></div><div class="line"></div><div class="line">eth0: flags=<span class="number">4163</span>&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="number">1450</span></div><div class="line">        inet <span class="number">10.0</span>.<span class="number">0.2</span>  netmask <span class="number">255.255</span>.<span class="number">255.0</span>  broadcast <span class="number">0.0</span>.<span class="number">0.0</span></div><div class="line">        inet6 fe80::<span class="number">42</span>:aff:fe00:<span class="number">2</span>  prefixlen <span class="number">64</span>  scopeid <span class="number">0</span>x20&lt;link&gt;</div><div class="line">        ether <span class="number">02</span>:<span class="number">42</span>:<span class="number">0</span>a:<span class="number">00</span>:<span class="number">00</span>:<span class="number">02</span>  txqueuelen <span class="number">0</span>  (Ethernet)</div><div class="line">        RX packets <span class="number">31</span>  bytes <span class="number">2398</span> (<span class="number">2.3</span> KiB)</div><div class="line">        RX errors <span class="number">0</span>  dropped <span class="number">0</span>  overruns <span class="number">0</span>  frame <span class="number">0</span></div><div class="line">        TX packets <span class="number">18</span>  bytes <span class="number">1412</span> (<span class="number">1.3</span> KiB)</div><div class="line">        TX errors <span class="number">0</span>  dropped <span class="number">0</span> overruns <span class="number">0</span>  carrier <span class="number">0</span>  collisions <span class="number">0</span></div><div class="line"></div><div class="line">[root@<span class="number">2516560</span>c337f /]<span class="comment"># </span></div><div class="line"></div><div class="line">[root@<span class="number">2516560</span>c337f /]<span class="comment"># ping 192.168.2.26</span></div><div class="line"></div><div class="line">PING <span class="number">192.168</span>.<span class="number">2.26</span> (<span class="number">192.168</span>.<span class="number">2.26</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of data.</div><div class="line"><span class="number">64</span> bytes from <span class="number">192.168</span>.<span class="number">2.26</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">63</span> time=<span class="number">0.657</span> ms</div><div class="line"><span class="number">64</span> bytes from <span class="number">192.168</span>.<span class="number">2.26</span>: icmp_seq=<span class="number">2</span> ttl=<span class="number">63</span> time=<span class="number">0.853</span> ms</div><div class="line"><span class="number">64</span> bytes from <span class="number">192.168</span>.<span class="number">2.26</span>: icmp_seq=<span class="number">8</span> ttl=<span class="number">63</span> time=<span class="number">0.463</span> ms</div><div class="line"><span class="number">64</span> bytes from <span class="number">192.168</span>.<span class="number">2.26</span>: icmp_seq=<span class="number">9</span> ttl=<span class="number">63</span> time=<span class="number">0.681</span> ms</div><div class="line">^C</div><div class="line">--- <span class="number">192.168</span>.<span class="number">2.26</span> ping statistics ---</div><div class="line"><span class="number">32</span> packets transmitted, <span class="number">32</span> received, <span class="number">0</span>% packet loss, time <span class="number">31736</span>ms</div><div class="line">rtt min/avg/max/mdev = <span class="number">0.363</span>/<span class="number">0.671</span>/<span class="number">1.486</span>/<span class="number">0.183</span> ms</div><div class="line"></div><div class="line">[root@<span class="number">2516560</span>c337f /]<span class="comment"># </span></div><div class="line"></div><div class="line">[root@<span class="number">2516560</span>c337f /]<span class="comment"># ping 10.0.0.2</span></div><div class="line"></div><div class="line">PING <span class="number">10.0</span>.<span class="number">0.2</span> (<span class="number">10.0</span>.<span class="number">0.2</span>) <span class="number">56</span>(<span class="number">84</span>) bytes of data.</div><div class="line"><span class="number">64</span> bytes from <span class="number">10.0</span>.<span class="number">0.2</span>: icmp_seq=<span class="number">1</span> ttl=<span class="number">64</span> time=<span class="number">0.034</span> ms</div><div class="line"><span class="number">64</span> bytes from <span class="number">10.0</span>.<span class="number">0.2</span>: icmp_seq=<span class="number">2</span> ttl=<span class="number">64</span> time=<span class="number">0.068</span> ms</div><div class="line"><span class="number">64</span> bytes from <span class="number">10.0</span>.<span class="number">0.2</span>: icmp_seq=<span class="number">3</span> ttl=<span class="number">64</span> time=<span class="number">0.061</span> ms</div><div class="line"><span class="number">64</span> bytes from <span class="number">10.0</span>.<span class="number">0.2</span>: icmp_seq=<span class="number">4</span> ttl=<span class="number">64</span> time=<span class="number">0.068</span> ms</div><div class="line">^C</div><div class="line">--- <span class="number">10.0</span>.<span class="number">0.2</span> ping statistics ---</div><div class="line"><span class="number">4</span> packets transmitted, <span class="number">4</span> received, <span class="number">0</span>% packet loss, time <span class="number">3089</span>ms</div><div class="line">rtt min/avg/max/mdev = <span class="number">0.034</span>/<span class="number">0.057</span>/<span class="number">0.068</span>/<span class="number">0.016</span> ms</div><div class="line"></div><div class="line">[root@<span class="number">2516560</span>c337f /]<span class="comment">#</span></div></pre></td></tr></table></figure>
<ul>
<li><p>验证结论:</p>
<p>  test139容器host2的ip=10.0.0.3，可以ping通test26，可以ping通test26上的容器host1的ip=10.0.0.2</p>
</li>
</ul>
<h1 id="如何使用静态ip"><a href="#如何使用静态ip" class="headerlink" title="如何使用静态ip"></a>如何使用静态ip</h1><ul>
<li>以上的实验步骤。container的ip都是自动分配的，如果需要静态的固定ip，怎么办？</li>
<li>在创建网络的过程中有区别</li>
</ul>
<figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$sudo</span> docker network create -d overlay --ip-range=<span class="number">192.168</span>.<span class="number">20.0</span>/<span class="number">24</span> --gateway=<span class="number">192.168</span>.<span class="number">20.1</span> --subnet=<span class="number">192.168</span>.<span class="number">20.0</span>/<span class="number">24</span> mynet</div><div class="line"><span class="variable">$docker</span> run -d -it --name test1 --net=mynet --ip=<span class="number">192.168</span>.<span class="number">20.2</span> centos</div><div class="line"><span class="variable">$docker</span> run -d -it --name test2 --net=mynet --ip=<span class="number">192.168</span>.<span class="number">20.3</span> centos</div></pre></td></tr></table></figure>
<h1 id="删除网络"><a href="#删除网络" class="headerlink" title="删除网络"></a>删除网络</h1><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$docker</span> network rm mynet</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;环境限制&quot;&gt;&lt;a href=&quot;#环境限制&quot; class=&quot;headerlink&quot; title=&quot;环境限制&quot;&gt;&lt;/a&gt;环境限制&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;必须安装key-value存储服务，如consul&lt;/li&gt;
&lt;li&gt;宿主机已经安装docker engine&lt;/li&gt;
&lt;li&gt;宿主机的hostname必须不同&lt;/li&gt;
&lt;li&gt;内核大于3.16&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="docker" scheme="http://www.javacn.top/categories/docker/"/>
    
    
      <category term="docker" scheme="http://www.javacn.top/tags/docker/"/>
    
      <category term="overlay" scheme="http://www.javacn.top/tags/overlay/"/>
    
      <category term="consul" scheme="http://www.javacn.top/tags/consul/"/>
    
      <category term="多宿主机" scheme="http://www.javacn.top/tags/%E5%A4%9A%E5%AE%BF%E4%B8%BB%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Hexo的分类和标签设置</title>
    <link href="http://www.javacn.top/20170419/hexo_tags_categories/"/>
    <id>http://www.javacn.top/20170419/hexo_tags_categories/</id>
    <published>2017-04-19T08:29:59.000Z</published>
    <updated>2017-05-03T03:06:29.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设置分类列表"><a href="#设置分类列表" class="headerlink" title="设置分类列表"></a>设置分类列表</h1><h2 id="修改根目录下-config-yml"><a href="#修改根目录下-config-yml" class="headerlink" title="修改根目录下_config.yml"></a>修改根目录下_config.yml</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Directory</span></div><div class="line"><span class="attr">source_dir:</span> <span class="string">source</span></div><div class="line"><span class="attr">public_dir:</span> <span class="string">public</span></div><div class="line"><span class="comment">#这个是tags的目录</span></div><div class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></div><div class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></div><div class="line"><span class="comment">#这个是category的目录</span></div><div class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></div><div class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></div><div class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></div><div class="line"><span class="attr">skip_render:</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="修改themes下-config-yml"><a href="#修改themes下-config-yml" class="headerlink" title="修改themes下_config.yml"></a>修改themes下_config.yml</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">menu:</span></div><div class="line"><span class="attr">  home:</span> <span class="string">/</span></div><div class="line">  <span class="comment">#categories要打开</span></div><div class="line"><span class="attr">  categories:</span> <span class="string">/categories</span></div><div class="line">  <span class="comment">#about: /about</span></div><div class="line"><span class="attr">  archives:</span> <span class="string">/archives</span></div><div class="line">  <span class="comment">#tags要打开</span></div><div class="line"><span class="attr">  tags:</span> <span class="string">/tags</span></div><div class="line">  <span class="comment">#sitemap: /sitemap.xml</span></div><div class="line">  <span class="comment">#commonweal: /404.html</span></div></pre></td></tr></table></figure>
<h2 id="生成tags和categories页面"><a href="#生成tags和categories页面" class="headerlink" title="生成tags和categories页面"></a>生成tags和categories页面</h2><p>在根目录下执行<br><figure class="highlight ps"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$hexo</span> n page <span class="string">"tags"</span></div><div class="line"><span class="variable">$hexo</span> n page <span class="string">"categories"</span></div></pre></td></tr></table></figure></p>
<p>然后去source目录下找到categories/index.md<br>修改：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">title:</span> <span class="string">categories</span></div><div class="line"><span class="attr">date:</span> <span class="number">2017</span><span class="bullet">-04</span><span class="bullet">-19</span> <span class="number">16</span><span class="string">:19:25</span></div><div class="line"><span class="attr">type:</span> <span class="string">categories</span></div><div class="line"><span class="attr">comments:</span> <span class="literal">false</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure></p>
<p>去source目录下找到tags/index.md<br>修改：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">title:</span> <span class="string">tags</span></div><div class="line"><span class="attr">date:</span> <span class="number">2017</span><span class="bullet">-04</span><span class="bullet">-19</span> <span class="number">16</span><span class="string">:19:25</span></div><div class="line"><span class="attr">type:</span> <span class="string">tags</span></div><div class="line"><span class="attr">comments:</span> <span class="literal">false</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure></p>
<p>这样就配置好了</p>
<h1 id="在文章中添加tag、分类"><a href="#在文章中添加tag、分类" class="headerlink" title="在文章中添加tag、分类"></a>在文章中添加tag、分类</h1><h2 id="模板中添加"><a href="#模板中添加" class="headerlink" title="模板中添加"></a>模板中添加</h2><p>编辑 /sacaffolds/post.md<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">title:</span> <span class="string">&#123;&#123;</span> <span class="string">title</span> <span class="string">&#125;&#125;</span></div><div class="line"><span class="attr">date:</span> <span class="string">&#123;&#123;</span> <span class="string">date</span> <span class="string">&#125;&#125;</span></div><div class="line"><span class="attr">categories:</span> </div><div class="line"><span class="attr">tags:</span></div><div class="line"><span class="meta">---</span></div></pre></td></tr></table></figure></p>
<p>这样，new出来的文章默认就带上categories和tags了</p>
<h2 id="多个tag的写法"><a href="#多个tag的写法" class="headerlink" title="多个tag的写法"></a>多个tag的写法</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">tages:</span> </div><div class="line"><span class="bullet">    -</span> <span class="string">标签1</span></div><div class="line"><span class="bullet">    -</span> <span class="string">标签2</span></div><div class="line">    <span class="string">...</span></div><div class="line"><span class="bullet">    -</span> <span class="string">标签n</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;设置分类列表&quot;&gt;&lt;a href=&quot;#设置分类列表&quot; class=&quot;headerlink&quot; title=&quot;设置分类列表&quot;&gt;&lt;/a&gt;设置分类列表&lt;/h1&gt;&lt;h2 id=&quot;修改根目录下-config-yml&quot;&gt;&lt;a href=&quot;#修改根目录下-config-yml&quot; class=&quot;headerlink&quot; title=&quot;修改根目录下_config.yml&quot;&gt;&lt;/a&gt;修改根目录下_config.yml&lt;/h2&gt;&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Directory&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;source_dir:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;source&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;public_dir:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;public&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#这个是tags的目录&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;tag_dir:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;tags&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;archive_dir:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;archives&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#这个是category的目录&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;category_dir:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;categories&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;code_dir:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;downloads/code&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;i18n_dir:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;:lang&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;skip_render:&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="other" scheme="http://www.javacn.top/categories/other/"/>
    
    
      <category term="hexo" scheme="http://www.javacn.top/tags/hexo/"/>
    
      <category term="分类" scheme="http://www.javacn.top/tags/%E5%88%86%E7%B1%BB/"/>
    
      <category term="categories" scheme="http://www.javacn.top/tags/categories/"/>
    
      <category term="标签" scheme="http://www.javacn.top/tags/%E6%A0%87%E7%AD%BE/"/>
    
      <category term="tags" scheme="http://www.javacn.top/tags/tags/"/>
    
  </entry>
  
</feed>
